searchData={"items":[{"type":"module","title":"Klepsidra","doc":"Klepsidra keeps the contexts that define your domain\nand business logic.\n\nContexts are also responsible for managing your data, regardless\nif it comes from the database, an external API or others.","ref":"Klepsidra.html"},{"type":"module","title":"Klepsidra.BusinessPartners","doc":"The BusinessPartners context.","ref":"Klepsidra.BusinessPartners.html"},{"type":"function","title":"Klepsidra.BusinessPartners.change_business_partner/2","doc":"Returns an `%Ecto.Changeset{}` for tracking business_partner changes.","ref":"Klepsidra.BusinessPartners.html#change_business_partner/2"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.change_business_partner/2","doc":"iex> change_business_partner(business_partner)\n    %Ecto.Changeset{data: %BusinessPartner{}}","ref":"Klepsidra.BusinessPartners.html#change_business_partner/2-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.change_note/2","doc":"Returns an `%Ecto.Changeset{}` for tracking note changes.","ref":"Klepsidra.BusinessPartners.html#change_note/2"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.change_note/2","doc":"iex> change_note(note)\n    %Ecto.Changeset{data: %Note{}}","ref":"Klepsidra.BusinessPartners.html#change_note/2-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.create_business_partner/1","doc":"Creates a business_partner.","ref":"Klepsidra.BusinessPartners.html#create_business_partner/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.create_business_partner/1","doc":"iex> create_business_partner(%{field: value})\n    {:ok, %BusinessPartner{}}\n\n    iex> create_business_partner(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#create_business_partner/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.create_note/1","doc":"Creates a note.","ref":"Klepsidra.BusinessPartners.html#create_note/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.create_note/1","doc":"iex> create_note(%{field: value})\n    {:ok, %Note{}}\n\n    iex> create_note(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#create_note/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.delete_business_partner/1","doc":"Deletes a business_partner.","ref":"Klepsidra.BusinessPartners.html#delete_business_partner/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.delete_business_partner/1","doc":"iex> delete_business_partner(business_partner)\n    {:ok, %BusinessPartner{}}\n\n    iex> delete_business_partner(business_partner)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#delete_business_partner/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.delete_note/1","doc":"Deletes a note.","ref":"Klepsidra.BusinessPartners.html#delete_note/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.delete_note/1","doc":"iex> delete_note(note)\n    {:ok, %Note{}}\n\n    iex> delete_note(note)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#delete_note/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.get_business_partner!/1","doc":"Gets a single business_partner.\n\nRaises `Ecto.NoResultsError` if the Business partner does not exist.","ref":"Klepsidra.BusinessPartners.html#get_business_partner!/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.get_business_partner!/1","doc":"iex> get_business_partner!(123)\n    %BusinessPartner{}\n\n    iex> get_business_partner!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.BusinessPartners.html#get_business_partner!/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.get_note!/1","doc":"Gets a single note.\n\nRaises `Ecto.NoResultsError` if the Note does not exist.","ref":"Klepsidra.BusinessPartners.html#get_note!/1"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.get_note!/1","doc":"iex> get_note!(123)\n    %Note{}\n\n    iex> get_note!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.BusinessPartners.html#get_note!/1-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.list_business_partner_notes/0","doc":"Returns the list of business_partner_notes.","ref":"Klepsidra.BusinessPartners.html#list_business_partner_notes/0"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.list_business_partner_notes/0","doc":"iex> list_business_partner_notes()\n    [%Note{}, ...]","ref":"Klepsidra.BusinessPartners.html#list_business_partner_notes/0-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.list_business_partners/0","doc":"Returns the list of business_partners.","ref":"Klepsidra.BusinessPartners.html#list_business_partners/0"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.list_business_partners/0","doc":"iex> list_business_partners()\n    [%BusinessPartner{}, ...]","ref":"Klepsidra.BusinessPartners.html#list_business_partners/0-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.update_business_partner/2","doc":"Updates a business_partner.","ref":"Klepsidra.BusinessPartners.html#update_business_partner/2"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.update_business_partner/2","doc":"iex> update_business_partner(business_partner, %{field: new_value})\n    {:ok, %BusinessPartner{}}\n\n    iex> update_business_partner(business_partner, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#update_business_partner/2-examples"},{"type":"function","title":"Klepsidra.BusinessPartners.update_note/2","doc":"Updates a note.","ref":"Klepsidra.BusinessPartners.html#update_note/2"},{"type":"function","title":"Examples - Klepsidra.BusinessPartners.update_note/2","doc":"iex> update_note(note, %{field: new_value})\n    {:ok, %Note{}}\n\n    iex> update_note(note, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.BusinessPartners.html#update_note/2-examples"},{"type":"module","title":"Klepsidra.BusinessPartners.BusinessPartner","doc":"Defines a schema for the `Business Partners` entity, recording customers and\nsuppliers of the busines.","ref":"Klepsidra.BusinessPartners.BusinessPartner.html"},{"type":"function","title":"Klepsidra.BusinessPartners.BusinessPartner.populate_customers_list/0","doc":"Used across live components to populate select options with projects.","ref":"Klepsidra.BusinessPartners.BusinessPartner.html#populate_customers_list/0"},{"type":"type","title":"Klepsidra.BusinessPartners.BusinessPartner.t/0","doc":"","ref":"Klepsidra.BusinessPartners.BusinessPartner.html#t:t/0"},{"type":"module","title":"Klepsidra.BusinessPartners.Note","doc":"Defines the data schema for the business partners`Note` entity,\nannotations of business partners.","ref":"Klepsidra.BusinessPartners.Note.html"},{"type":"type","title":"Klepsidra.BusinessPartners.Note.t/0","doc":"","ref":"Klepsidra.BusinessPartners.Note.html#t:t/0"},{"type":"module","title":"Klepsidra.Categorisation","doc":"The Categorisation context provides a way to categorise entities within the\napplication.\n\nA general-purpose _tagging_ module provides a record of all tags used for various entities.\nPresently, tagging is only used in activity timers so that users can simply categorise\ntheir timed activities, to help filter activities by category, to search for timers, and to\nmake it easier to collate timers with client invoicing in mind.\n\nTagging activity timers requires a many-to-many relationship between timers and\ntags, which is recorded in the `timer_tags` table.","ref":"Klepsidra.Categorisation.html"},{"type":"function","title":"Klepsidra.Categorisation.change_project_tag/2","doc":"Returns an `%Ecto.Changeset{}` for tracking project_tag changes.","ref":"Klepsidra.Categorisation.html#change_project_tag/2"},{"type":"function","title":"Examples - Klepsidra.Categorisation.change_project_tag/2","doc":"iex> change_project_tag(project_tag)\n    %Ecto.Changeset{data: %ProjectTag{}}","ref":"Klepsidra.Categorisation.html#change_project_tag/2-examples"},{"type":"function","title":"Klepsidra.Categorisation.change_tag/2","doc":"Returns an `%Ecto.Changeset{}` for tracking tag changes.","ref":"Klepsidra.Categorisation.html#change_tag/2"},{"type":"function","title":"Examples - Klepsidra.Categorisation.change_tag/2","doc":"iex> change_tag(tag)\n    %Ecto.Changeset{data: %Tag{}}","ref":"Klepsidra.Categorisation.html#change_tag/2-examples"},{"type":"function","title":"Klepsidra.Categorisation.create_project_tag/1","doc":"Creates a project_tag.","ref":"Klepsidra.Categorisation.html#create_project_tag/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.create_project_tag/1","doc":"iex> create_project_tag(%{field: value})\n    {:ok, %ProjectTag{}}\n\n    iex> create_project_tag(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#create_project_tag/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.create_tag/1","doc":"Creates a tag.","ref":"Klepsidra.Categorisation.html#create_tag/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.create_tag/1","doc":"iex> create_tag(%{field: value})\n    {:ok, %Tag{}}\n\n    iex> create_tag(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#create_tag/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.delete_project_tag/1","doc":"Deletes a project_tag.","ref":"Klepsidra.Categorisation.html#delete_project_tag/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.delete_project_tag/1","doc":"iex> delete_project_tag(project_tag)\n    {:ok, %ProjectTag{}}\n\n    iex> delete_project_tag(project_tag)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#delete_project_tag/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.delete_tag/1","doc":"Deletes a tag.","ref":"Klepsidra.Categorisation.html#delete_tag/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.delete_tag/1","doc":"iex> delete_tag(tag)\n    {:ok, %Tag{}}\n\n    iex> delete_tag(tag)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#delete_tag/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.delete_tag_from_timer/2","doc":"","ref":"Klepsidra.Categorisation.html#delete_tag_from_timer/2"},{"type":"function","title":"Klepsidra.Categorisation.delete_timer_tag/1","doc":"","ref":"Klepsidra.Categorisation.html#delete_timer_tag/1"},{"type":"function","title":"Klepsidra.Categorisation.get_project_tag!/1","doc":"Gets a single project_tag.\n\nRaises `Ecto.NoResultsError` if the Project tag does not exist.","ref":"Klepsidra.Categorisation.html#get_project_tag!/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.get_project_tag!/1","doc":"iex> get_project_tag!(123)\n    %ProjectTag{}\n\n    iex> get_project_tag!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.Categorisation.html#get_project_tag!/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.get_tag!/1","doc":"Gets a single tag.\n\nRaises `Ecto.NoResultsError` if the Tag does not exist.","ref":"Klepsidra.Categorisation.html#get_tag!/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.get_tag!/1","doc":"iex> get_tag!(123)\n    %Tag{}\n\n    iex> get_tag!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.Categorisation.html#get_tag!/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.get_timer_tag!/1","doc":"Gets a single timer tag record.\n\nRaises `Ecto.NoResultsError` if the Tag does not exist.","ref":"Klepsidra.Categorisation.html#get_timer_tag!/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.get_timer_tag!/1","doc":"iex> get_timer_tag!(123)\n    %TimerTag{}\n\n    iex> get_timer_tag!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.Categorisation.html#get_timer_tag!/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.list_project_tags/0","doc":"Returns the list of project_tags.","ref":"Klepsidra.Categorisation.html#list_project_tags/0"},{"type":"function","title":"Examples - Klepsidra.Categorisation.list_project_tags/0","doc":"iex> list_project_tags()\n    [%ProjectTag{}, ...]","ref":"Klepsidra.Categorisation.html#list_project_tags/0-examples"},{"type":"function","title":"Klepsidra.Categorisation.list_tags/0","doc":"Returns the list of tags.","ref":"Klepsidra.Categorisation.html#list_tags/0"},{"type":"function","title":"Examples - Klepsidra.Categorisation.list_tags/0","doc":"iex> list_tags()\n    [%Tag{}, ...]","ref":"Klepsidra.Categorisation.html#list_tags/0-examples"},{"type":"function","title":"Klepsidra.Categorisation.search_tags_by_name_prefix/1","doc":"Simple search for tags defined in the system, performing a prefix filter only.\n\nThis search takes in the `search_phrase`, and after converting it to lowercase,\ncompares it against a list of similarly lowercased tag names (`name` field), from the\ndatabase. The comparison checks filters all tags that start with the normalised\nsearch phrase.","ref":"Klepsidra.Categorisation.html#search_tags_by_name_prefix/1"},{"type":"function","title":"Examples - Klepsidra.Categorisation.search_tags_by_name_prefix/1","doc":"iex> search_tags_by_name_prefix(\"hello\")\n    [%Tag{}, ...]","ref":"Klepsidra.Categorisation.html#search_tags_by_name_prefix/1-examples"},{"type":"function","title":"Klepsidra.Categorisation.tag_timer/2","doc":"","ref":"Klepsidra.Categorisation.html#tag_timer/2"},{"type":"function","title":"Klepsidra.Categorisation.update_project_tag/2","doc":"Updates a project_tag.","ref":"Klepsidra.Categorisation.html#update_project_tag/2"},{"type":"function","title":"Examples - Klepsidra.Categorisation.update_project_tag/2","doc":"iex> update_project_tag(project_tag, %{field: new_value})\n    {:ok, %ProjectTag{}}\n\n    iex> update_project_tag(project_tag, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#update_project_tag/2-examples"},{"type":"function","title":"Klepsidra.Categorisation.update_tag/2","doc":"Updates a tag.","ref":"Klepsidra.Categorisation.html#update_tag/2"},{"type":"function","title":"Examples - Klepsidra.Categorisation.update_tag/2","doc":"iex> update_tag(tag, %{field: new_value})\n    {:ok, %Tag{}}\n\n    iex> update_tag(tag, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Categorisation.html#update_tag/2-examples"},{"type":"module","title":"Klepsidra.Categorisation.ProjectTag","doc":"Defines a schema for the `ProjectTags` entity, used to create a many-to-many\nrelationship between projects and tags.","ref":"Klepsidra.Categorisation.ProjectTag.html"},{"type":"type","title":"Klepsidra.Categorisation.ProjectTag.t/0","doc":"","ref":"Klepsidra.Categorisation.ProjectTag.html#t:t/0"},{"type":"module","title":"Klepsidra.Categorisation.Tag","doc":"Defines a schema for the `Tags` entity, used for categorising timed activities\nwith free form tags.\n\nTo provide a helpful flourish which will make selected tags stand out, we include a\n`colour` field.","ref":"Klepsidra.Categorisation.Tag.html"},{"type":"type","title":"Klepsidra.Categorisation.Tag.t/0","doc":"","ref":"Klepsidra.Categorisation.Tag.html#t:t/0"},{"type":"module","title":"Klepsidra.Categorisation.TimerTags","doc":"Defines a schema for the `TimerTags` entity, used to create a many-to-many\nrelationship between timers and tags.","ref":"Klepsidra.Categorisation.TimerTags.html"},{"type":"type","title":"Klepsidra.Categorisation.TimerTags.t/0","doc":"","ref":"Klepsidra.Categorisation.TimerTags.html#t:t/0"},{"type":"module","title":"Klepsidra.Cldr","doc":"Provides the core functions to retrieve and manage\nthe CLDR data that supports formatting and localisation.\n\nIt provides the core functions to access formatted\nCLDR data, set and retrieve a current locale and validate\ncertain core data types such as locales, currencies and\nterritories.","ref":"Klepsidra.Cldr.html"},{"type":"function","title":"Klepsidra.Cldr.available_locale_name?/1","doc":"","ref":"Klepsidra.Cldr.html#available_locale_name?/1"},{"type":"function","title":"Klepsidra.Cldr.default_locale/0","doc":"Returns the default `locale`.","ref":"Klepsidra.Cldr.html#default_locale/0"},{"type":"function","title":"Example - Klepsidra.Cldr.default_locale/0","doc":"iex> Klepsidra.Cldr.default_locale()\n    %Cldr.LanguageTag{\n      backend: Klepsidra.Cldr,\n      canonical_locale_name: \"en-001\",\n      cldr_locale_name: :\"en-001\",\n      language_subtags: [],\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en-001\",\n      script: :Latn,\n      territory: :\"001\",\n      transform: %{},\n      language_variants: []\n    }","ref":"Klepsidra.Cldr.html#default_locale/0-example"},{"type":"function","title":"Klepsidra.Cldr.default_territory/0","doc":"Returns the default territory when a locale\ndoes not specify one and none can be inferred.","ref":"Klepsidra.Cldr.html#default_territory/0"},{"type":"function","title":"Example - Klepsidra.Cldr.default_territory/0","doc":"iex> Klepsidra.Cldr.default_territory()\n    :\"001\"","ref":"Klepsidra.Cldr.html#default_territory/0-example"},{"type":"function","title":"Klepsidra.Cldr.ellipsis/2","doc":"Add locale-specific ellipsis to a string.","ref":"Klepsidra.Cldr.html#ellipsis/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.ellipsis/2","doc":"* `string` is any `String.t` or a 2-element list\n  of `String.t` between which the ellipsis is inserted.\n\n* `backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module.  The default is `Cldr.default_backend!/0`.\n  Note that `Cldr.default_backend!/0` will raise an exception if\n  no `:default_backend` is configured under the `:ex_cldr` key in\n  `config.exs`.\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.html#ellipsis/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.ellipsis/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`.\n\n* `:location` determines where to place the ellipsis. The options are\n  `:after` (the default for a single string argument), `:between`\n  (the default and only valid location for an argument that is a list\n  of two strings) and `:before`.\n\n* `:format` formats based upon whether the ellipsis\n  is inserted between words or sentences. The valid options are\n  `:word` or `:sentence`. The default is `:sentence`.","ref":"Klepsidra.Cldr.html#ellipsis/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.ellipsis/2","doc":"iex> Klepsidra.Cldr.ellipsis(\"And furthermore\")\n    \"And furthermore…\"\n\n    iex> Klepsidra.Cldr.ellipsis([\"And furthermore\", \"there is much to be done\"], locale: :ja)\n    \"And furthermore…there is much to be done\"\n\n    iex> Klepsidra.Cldr.ellipsis(\"And furthermore\", format: :word)\n    \"And furthermore …\"\n\n    iex> Klepsidra.Cldr.ellipsis([\"And furthermore\", \"there is much to be done\"], locale: :ja, format: :word)\n    \"And furthermore … there is much to be done\"","ref":"Klepsidra.Cldr.html#ellipsis/2-examples"},{"type":"function","title":"Klepsidra.Cldr.get_locale/0","doc":"Return the current locale to be used for `Cldr` functions that\ntake an optional locale parameter for which a locale is not supplied.","ref":"Klepsidra.Cldr.html#get_locale/0"},{"type":"function","title":"Example - Klepsidra.Cldr.get_locale/0","doc":"iex> Klepsidra.Cldr.put_locale(\"pl\")\n    iex> Klepsidra.Cldr.get_locale()\n    %Cldr.LanguageTag{\n       backend: Elixir.Klepsidra.Cldr,\n       canonical_locale_name: \"pl\",\n       cldr_locale_name: :pl,\n       extensions: %{},\n       language: \"pl\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :pl,\n       territory: :PL,\n       requested_locale_name: \"pl\",\n       script: :Latn,\n       transform: %{},\n       language_variants: []\n     }","ref":"Klepsidra.Cldr.html#get_locale/0-example"},{"type":"function","title":"Klepsidra.Cldr.known_calendars/0","doc":"","ref":"Klepsidra.Cldr.html#known_calendars/0"},{"type":"function","title":"Klepsidra.Cldr.known_currencies/0","doc":"","ref":"Klepsidra.Cldr.html#known_currencies/0"},{"type":"function","title":"Klepsidra.Cldr.known_gettext_locale_name/1","doc":"Returns either the Gettext `locale_name` in Cldr format or\n`false` based upon whether the locale name is configured in\n`Gettext`.","ref":"Klepsidra.Cldr.html#known_gettext_locale_name/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_gettext_locale_name/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_gettext_locale_names/0`","ref":"Klepsidra.Cldr.html#known_gettext_locale_name/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_gettext_locale_name/1","doc":"iex> Klepsidra.Cldr.known_gettext_locale_name(\"en\")\n    \"en\"\n\n    iex> Klepsidra.Cldr.known_gettext_locale_name(\"en-SA\")\n    false","ref":"Klepsidra.Cldr.html#known_gettext_locale_name/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_gettext_locale_name?/1","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Gettext.","ref":"Klepsidra.Cldr.html#known_gettext_locale_name?/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_gettext_locale_name?/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.html#known_gettext_locale_name?/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_gettext_locale_name?/1","doc":"iex> Klepsidra.Cldr.known_gettext_locale_name?(\"en\")\n    true\n\n    iex> Klepsidra.Cldr.known_gettext_locale_name?(\"!!\")\n    false","ref":"Klepsidra.Cldr.html#known_gettext_locale_name?/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_gettext_locale_names/0","doc":"Returns a list of Gettext locale names but in CLDR format with\nunderscore replaced by hyphen in order to facilitate comparisons\nwith `Cldr` locale names.","ref":"Klepsidra.Cldr.html#known_gettext_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.known_locale_name/1","doc":"Returns either the `locale_name` or `false` based upon\nwhether the locale name is configured in `Cldr`.\n\nThis is helpful when building a list of `or` expressions\nto return the first known locale name from a list.","ref":"Klepsidra.Cldr.html#known_locale_name/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_locale_name/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.html#known_locale_name/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_locale_name/1","doc":"iex> Klepsidra.Cldr.known_locale_name(:\"en-AU\")\n    :\"en-AU\"\n\n    iex> Klepsidra.Cldr.known_locale_name(:\"en-SA\")\n    false","ref":"Klepsidra.Cldr.html#known_locale_name/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_locale_name?/1","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Cldr.","ref":"Klepsidra.Cldr.html#known_locale_name?/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_locale_name?/1","doc":"* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.html#known_locale_name?/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_locale_name?/1","doc":"iex> Klepsidra.Cldr.known_locale_name?(:en)\n    true\n\n    iex> Klepsidra.Cldr.known_locale_name?(:\"!!\")\n    false","ref":"Klepsidra.Cldr.html#known_locale_name?/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_locale_names/0","doc":"Returns a list of the known locale names.\n\nKnown locales are those locales which\nare the subset of all CLDR locales that\nhave been configured for use either\nin this module or in `Gettext`.","ref":"Klepsidra.Cldr.html#known_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.known_number_system_types/0","doc":"Returns a list of atoms representing the number systems types known to `Cldr`.","ref":"Klepsidra.Cldr.html#known_number_system_types/0"},{"type":"function","title":"Example - Klepsidra.Cldr.known_number_system_types/0","doc":"iex> Klepsidra.Cldr.known_number_system_types()\n    [:default, :finance, :native, :traditional]","ref":"Klepsidra.Cldr.html#known_number_system_types/0-example"},{"type":"function","title":"Klepsidra.Cldr.known_number_systems/0","doc":"","ref":"Klepsidra.Cldr.html#known_number_systems/0"},{"type":"function","title":"Klepsidra.Cldr.known_rbnf_locale_name/1","doc":"Returns either the RBNF `locale_name` or `false` based upon\nwhether the locale name is configured in `Cldr`\nand has RBNF rules defined.","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_rbnf_locale_name/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_rbnf_locale_name/1","doc":"iex> Klepsidra.Cldr.known_rbnf_locale_name(:en)\n    :en\n\n    iex> Klepsidra.Cldr.known_rbnf_locale_name(:\"en-SA\")\n    false","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_rbnf_locale_name?/1","doc":"Returns a boolean indicating if the specified locale\nname is configured and available in Cldr and supports\nrules based number formats (RBNF).","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name?/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.known_rbnf_locale_name?/1","doc":"* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name?/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.known_rbnf_locale_name?/1","doc":"iex> Klepsidra.Cldr.known_rbnf_locale_name?(:en)\n    true\n\n    iex> Klepsidra.Cldr.known_rbnf_locale_name?(:\"!!\")\n    false","ref":"Klepsidra.Cldr.html#known_rbnf_locale_name?/1-examples"},{"type":"function","title":"Klepsidra.Cldr.known_rbnf_locale_names/0","doc":"Returns a list of locale names which have rules-based number\nformats (RBNF).","ref":"Klepsidra.Cldr.html#known_rbnf_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.known_territories/0","doc":"","ref":"Klepsidra.Cldr.html#known_territories/0"},{"type":"function","title":"Klepsidra.Cldr.normalize_lenient_parse/3","doc":"Normalizes a string by applying transliteration\nof common symbols in numbers, currencies and dates","ref":"Klepsidra.Cldr.html#normalize_lenient_parse/3"},{"type":"function","title":"Klepsidra.Cldr.put_gettext_locale/1","doc":"Set the current process's Gettext locale from a\n`t:Cldr.LanguageTag`.","ref":"Klepsidra.Cldr.html#put_gettext_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.put_gettext_locale/1","doc":"* `locale` is a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`.","ref":"Klepsidra.Cldr.html#put_gettext_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.put_gettext_locale/1","doc":"* `{:ok, gettext_locale_name}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.html#put_gettext_locale/1-returns"},{"type":"function","title":"Behaviour - Klepsidra.Cldr.put_gettext_locale/1","doc":"1. If the `locale.gettext_locale_name` is `nil` then an error\n   is returned.\n\n2. The `gettext` locale for the `gettext_backend` configured for the\n   CLDR backend defined by the `t:Cldr.LanguageTag` is set.","ref":"Klepsidra.Cldr.html#put_gettext_locale/1-behaviour"},{"type":"function","title":"Examples - Klepsidra.Cldr.put_gettext_locale/1","doc":"iex> import Cldr.LanguageTag.Sigil\n    iex> Klepsidra.Cldr.put_gettext_locale(~l\"en\")\n    {:ok, \"en\"}\n\n    iex> import Cldr.LanguageTag.Sigil\n    iex> Klepsidra.Cldr.put_gettext_locale(~l\"de\")\n    {:error,\n      {Cldr.UnknownLocaleError,\n        \"Locale #Cldr.LanguageTag  does not map to a known gettext locale name\"}}","ref":"Klepsidra.Cldr.html#put_gettext_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.put_locale/1","doc":"Set the current locale to be used for `Cldr` functions that\ntake an optional locale parameter for which a locale is not supplied.","ref":"Klepsidra.Cldr.html#put_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.put_locale/1","doc":"* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct returned by `Klepsidra.Cldr.Locale.new!/1`\n\nSee [rfc5646](https://tools.ietf.org/html/rfc5646) for the specification\nof a language tag.","ref":"Klepsidra.Cldr.html#put_locale/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.put_locale/1","doc":"iex> Klepsidra.Cldr.put_locale(\"en\")\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: Klepsidra.Cldr,\n       canonical_locale_name: \"en\",\n       cldr_locale_name: :en,\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: \"en\",\n       language: \"en\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :en,\n       requested_locale_name: \"en\",\n       script: :Latn,\n       territory: :US,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Klepsidra.Cldr.put_locale(\"invalid-locale!\")\n    {:error, {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"!\\\" starting at position 15\"}}","ref":"Klepsidra.Cldr.html#put_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.quote/2","doc":"Add locale-specific quotation marks around a string.","ref":"Klepsidra.Cldr.html#quote/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.quote/2","doc":"* `string` is any valid Elixir string\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.html#quote/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.quote/2","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n  The default is `Cldr.get_locale/0`","ref":"Klepsidra.Cldr.html#quote/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.quote/2","doc":"iex> Klepsidra.Cldr.quote(\"Quoted String\")\n    \"“Quoted String”\"\n\n    iex> Klepsidra.Cldr.quote(\"Quoted String\", locale: :ja)\n    \"「Quoted String」\"","ref":"Klepsidra.Cldr.html#quote/2-examples"},{"type":"function","title":"Klepsidra.Cldr.unknown_locale_names/0","doc":"Returns a list of the locales names that are configured,\nbut not known in CLDR.\n\nSince there is a compile-time exception raised if there are\nany unknown locales this function should always\nreturn an empty list.","ref":"Klepsidra.Cldr.html#unknown_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.validate_calendar/1","doc":"","ref":"Klepsidra.Cldr.html#validate_calendar/1"},{"type":"function","title":"Klepsidra.Cldr.validate_currency/1","doc":"","ref":"Klepsidra.Cldr.html#validate_currency/1"},{"type":"function","title":"Klepsidra.Cldr.validate_locale/1","doc":"Normalise and validate a locale name.","ref":"Klepsidra.Cldr.html#validate_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.validate_locale/1","doc":"* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Klepsidra.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.html#validate_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.validate_locale/1","doc":"* `{:ok, language_tag}`\n\n* `{:error, reason}`","ref":"Klepsidra.Cldr.html#validate_locale/1-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.validate_locale/1","doc":"See [rfc5646](https://tools.ietf.org/html/rfc5646) for the specification\nof a language tag.","ref":"Klepsidra.Cldr.html#validate_locale/1-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.validate_locale/1","doc":"iex> Klepsidra.Cldr.validate_locale(:en)\n    {:ok,\n    %Cldr.LanguageTag{\n      backend: Klepsidra.Cldr,\n      canonical_locale_name: \"en\",\n      cldr_locale_name: :en,\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en\",\n      script: :Latn,\n      territory: :US,\n      transform: %{},\n      language_variants: []\n    }}\n\n\n    iex> Klepsidra.Cldr.validate_locale Klepsidra.Cldr.default_locale()\n    {:ok,\n    %Cldr.LanguageTag{\n      backend: Klepsidra.Cldr,\n      canonical_locale_name: \"en-001\",\n      cldr_locale_name: :\"en-001\",\n      extensions: %{},\n      gettext_locale_name: \"en\",\n      language: \"en\",\n      locale: %{},\n      private_use: [],\n      rbnf_locale_name: :en,\n      requested_locale_name: \"en-001\",\n      script: :Latn,\n      territory: :\"001\",\n      transform: %{},\n      language_variants: []\n    }}\n\n    iex> Klepsidra.Cldr.validate_locale(\"zzz\")\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zzz\\\" is invalid\"}}","ref":"Klepsidra.Cldr.html#validate_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.validate_number_system/1","doc":"","ref":"Klepsidra.Cldr.html#validate_number_system/1"},{"type":"function","title":"Klepsidra.Cldr.validate_number_system_type/1","doc":"Normalise and validate a number system type.","ref":"Klepsidra.Cldr.html#validate_number_system_type/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.validate_number_system_type/1","doc":"* `number_system_type` is any number system type returned by\n  `Cldr.known_number_system_types/1`","ref":"Klepsidra.Cldr.html#validate_number_system_type/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.validate_number_system_type/1","doc":"* `{:ok, normalized_number_system_type}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.html#validate_number_system_type/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.validate_number_system_type/1","doc":"iex> Klepsidra.Cldr.validate_number_system_type(:default)\n    {:ok, :default}\n\n    iex> Klepsidra.Cldr.validate_number_system_type(:traditional)\n    {:ok, :traditional}\n\n    iex> Klepsidra.Cldr.validate_number_system_type(:latn)\n    {\n      :error,\n      {Cldr.UnknownNumberSystemTypeError, \"The number system type :latn is unknown\"}\n    }\n\n    iex> Klepsidra.Cldr.validate_number_system_type(\"bork\")\n    {\n      :error,\n      {Cldr.UnknownNumberSystemTypeError, \"The number system type \\\"bork\\\" is invalid\"}\n    }","ref":"Klepsidra.Cldr.html#validate_number_system_type/1-examples"},{"type":"function","title":"Klepsidra.Cldr.validate_territory/1","doc":"","ref":"Klepsidra.Cldr.html#validate_territory/1"},{"type":"function","title":"Klepsidra.Cldr.with_locale/2","doc":"Execute a function with a locale ensuring that the\ncurrent locale is restored after the function.","ref":"Klepsidra.Cldr.html#with_locale/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.with_locale/2","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`.\n\n* `fun` is any 0-arity function or function capture.","ref":"Klepsidra.Cldr.html#with_locale/2-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.with_locale/2","doc":"* The value returned by the function `fun/0` or\n\n* `{:error, {exception, reason}}` if the locale is invalid or\n\n* raises an exception if the current locale cannot be\n  identified.","ref":"Klepsidra.Cldr.html#with_locale/2-returns"},{"type":"module","title":"Klepsidra.Cldr.AcceptLanguage","doc":"Parses HTTP `Accept-Language` header values as defined in\n[rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4).\n\nThe Accept-Language request-header field is similar to Accept, but restricts\nthe set of natural languages that are preferred as a response to the request.\nLanguage tags function are provided in `Cldr.LanguageTag`.\n\nThe format of an `Accept-Language` header is as follows in `ABNF` format:\n\n       Accept-Language = \"Accept-Language\" \":\"\n                         1#( language-range [ \";\" \"q\" \"=\" qvalue ] )\n       language-range  = ( ( 1*8ALPHA *( \"-\" 1*8ALPHA ) ) | \"*\" )\n\nEach language-range MAY be given an associated quality value which represents an\nestimate of the user's preference for the languages specified by that range. The\nquality value defaults to \"q=1\". For example,\n\n       Accept-Language: da, en-gb;q=0.8, en;q=0.7\n\nwould mean: \"I prefer Danish, but will accept British English and other types of English.\"","ref":"Klepsidra.Cldr.AcceptLanguage.html"},{"type":"function","title":"Klepsidra.Cldr.AcceptLanguage.best_match/1","doc":"Parse an `Accept-Language` string and return the best match for\na configured `Cldr` locale.","ref":"Klepsidra.Cldr.AcceptLanguage.html#best_match/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.AcceptLanguage.best_match/1","doc":"* `accept_langauge` is a string representing an accept language header","ref":"Klepsidra.Cldr.AcceptLanguage.html#best_match/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.AcceptLanguage.best_match/1","doc":"* `{:ok, language_tag}` or\n\n* `{:error, reason}`","ref":"Klepsidra.Cldr.AcceptLanguage.html#best_match/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.AcceptLanguage.best_match/1","doc":"iex> Klepsidra.Cldr.AcceptLanguage.best_match(\"da;q=0.1,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: TestBackend.Cldr,\n       canonical_locale_name: \"zh-TW\",\n       cldr_locale_name: :\"zh-Hant\",\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: nil,\n       language: \"zh\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :\"zh-Hant\",\n       requested_locale_name: \"zh-TW\",\n       script: :Hant,\n       territory: :TW,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Klepsidra.Cldr.AcceptLanguage.best_match(\"da;q=0.1,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     %Cldr.LanguageTag{\n       backend: TestBackend.Cldr,\n       canonical_locale_name: \"zh-TW\",\n       cldr_locale_name: :\"zh-Hant\",\n       language_subtags: [],\n       extensions: %{},\n       gettext_locale_name: nil,\n       language: \"zh\",\n       locale: %{},\n       private_use: [],\n       rbnf_locale_name: :\"zh-Hant\",\n       requested_locale_name: \"zh-TW\",\n       script: :Hant,\n       territory: :TW,\n       transform: %{},\n       language_variants: []\n     }}\n\n    iex> Klepsidra.Cldr.AcceptLanguage.best_match(\"xx,yy;q=0.3\")\n    {:error,\n     {Cldr.NoMatchingLocale,\n      \"No configured locale could be matched to \\\"xx,yy;q=0.3\\\"\"}}\n\n    iex> Klepsidra.Cldr.AcceptLanguage.best_match(\"invalid_tag\")\n    {:error, {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}","ref":"Klepsidra.Cldr.AcceptLanguage.html#best_match/1-examples"},{"type":"function","title":"Klepsidra.Cldr.AcceptLanguage.parse/1","doc":"Parses an `Accept-Language` header value in its string\nor tokenized form to return a tuple of the form\n`{:ok, [{quality, %Cldr.LanguageTag{}}, ...]}` sorted by quality.","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.AcceptLanguage.parse/1","doc":"* `accept-language` is any string in the format defined by\n  [rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)\n\n* `backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.AcceptLanguage.parse/1","doc":"* `{:ok, [{quality, language_tag}, ...]}` or\n\n* `{:error, {Cldr.AcceptLanguageError, String.t}}`\n\nIf at least one valid language tag is found but errors are also\ndetected on one more more tags, an `{ok, list}` tuple is returned\nwuth an error tuple for each invalid tag added at the end of the list.","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse/1-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.AcceptLanguage.parse/1","doc":"iex> Cldr.AcceptLanguage.parse(\"da,zh-TW;q=0.3\", TestBackend.Cldr)\n    {:ok,\n     [\n       {1.0,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"da\",\n          cldr_locale_name: :da,\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"da\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :da,\n          requested_locale_name: \"da\",\n          script: :Latn,\n          territory: :DK,\n          transform: %{},\n          language_variants: []\n        }},\n       {0.3,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"zh-TW\",\n          cldr_locale_name: :\"zh-Hant\",\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"zh\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :\"zh-Hant\",\n          requested_locale_name: \"zh-TW\",\n          script: :Hant,\n          territory: :TW,\n          transform: %{},\n          language_variants: []\n        }}\n     ]}\n\n    iex> Klepsidra.Cldr.AcceptLanguage.parse(\"invalid_tag\")\n    {:error,\n     {Cldr.LanguageTag.ParseError,\n      \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n\n    iex> Klepsidra.Cldr.AcceptLanguage.parse(\"da,zh-TW;q=0.3,invalid_tag\")\n    {:ok,\n     [\n       {1.0,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"da\",\n          cldr_locale_name: :da,\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"da\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :da,\n          requested_locale_name: \"da\",\n          script: :Latn,\n          territory: :DK,\n          transform: %{},\n          language_variants: []\n        }},\n       {0.3,\n        %Cldr.LanguageTag{\n          backend: TestBackend.Cldr,\n          canonical_locale_name: \"zh-TW\",\n          cldr_locale_name: :\"zh-Hant\",\n          language_subtags: [],\n          extensions: %{},\n          gettext_locale_name: nil,\n          language: \"zh\",\n          locale: %{},\n          private_use: [],\n          rbnf_locale_name: :\"zh-Hant\",\n          requested_locale_name: \"zh-TW\",\n          script: :Hant,\n          territory: :TW,\n          transform: %{},\n          language_variants: []\n        }},\n       {:error,\n        {Cldr.LanguageTag.ParseError,\n         \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n     ]}","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse/1-example"},{"type":"function","title":"Klepsidra.Cldr.AcceptLanguage.parse!/1","doc":"Parses an `Accept-Language` header value in its string\nor tokenized form to produce a list of tuples of the form\n`[{quality, %Cldr.LanguageTag{}}, ...]` sorted by quality\nin descending order.","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse!/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.AcceptLanguage.parse!/1","doc":"* `accept-language` is any string in the format defined by [rfc2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4)","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse!/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.AcceptLanguage.parse!/1","doc":"* `{:ok, [{quality, language_tag}, ...]}` or\n\n* raises a `Cldr.AcceptLanguageError` exception\n\nIf at least one valid language tag is found but errors are also\ndetected on one more more tags, an `{ok, list}` tuple is returned\nwuth an error tuple for each invalid tag added at the end of the list.","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse!/1-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.AcceptLanguage.parse!/1","doc":"iex> Klepsidra.Cldr.AcceptLanguage.parse!(\"da,zh-TW;q=0.3\")\n    [\n      {1.0,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"da\",\n         cldr_locale_name: :da,\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"da\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :da,\n         requested_locale_name: \"da\",\n         script: :Latn,\n         territory: :DK,\n         transform: %{},\n         language_variants: []\n       }},\n      {0.3,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"zh-TW\",\n         cldr_locale_name: :\"zh-Hant\",\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"zh\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :\"zh-Hant\",\n         requested_locale_name: \"zh-TW\",\n         script: :Hant,\n         territory: :TW,\n         transform: %{},\n         language_variants: []\n       }}\n    ]\n\n    Klepsidra.Cldr.AcceptLanguage.parse! \"invalid_tag\"\n    ** (Cldr.AcceptLanguageError) \"Expected a BCP47 language tag. Could not parse the remaining \"g\" starting at position 11\n        (ex_cldr) lib/cldr/accept_language.ex:304: Cldr.AcceptLanguage.parse!/1\n\n    iex> Klepsidra.Cldr.AcceptLanguage.parse!(\"da,zh-TW;q=0.3,invalid_tag\")\n    [\n      {1.0,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"da\",\n         cldr_locale_name: :da,\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"da\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :da,\n         requested_locale_name: \"da\",\n         script: :Latn,\n         territory: :DK,\n         transform: %{},\n         language_variants: []\n       }},\n      {0.3,\n       %Cldr.LanguageTag{\n         backend: TestBackend.Cldr,\n         canonical_locale_name: \"zh-TW\",\n         cldr_locale_name: :\"zh-Hant\",\n         language_subtags: [],\n         extensions: %{},\n         gettext_locale_name: nil,\n         language: \"zh\",\n         locale: %{},\n         private_use: [],\n         rbnf_locale_name: :\"zh-Hant\",\n         requested_locale_name: \"zh-TW\",\n         script: :Hant,\n         territory: :TW,\n         transform: %{},\n         language_variants: []\n       }},\n      {:error,\n       {Cldr.LanguageTag.ParseError,\n        \"Expected a BCP47 language tag. Could not parse the remaining \\\"g\\\" starting at position 11\"}}\n    ]","ref":"Klepsidra.Cldr.AcceptLanguage.html#parse!/1-example"},{"type":"module","title":"Klepsidra.Cldr.Calendar","doc":"Data functions to retrieve localised calendar\ninformation.\n\n`Cldr` defines formats for several calendars, the names of which\nare returned by `Cldr.known_calendars/0`.\n\nCurrently this implementation only supports the `:gregorian`,\n`:persian`, `:coptic` and `ethiopic` calendars.\n\nThe `:gregorian` calendar aligns with the proleptic Gregorian calendar\ndefined by Elixir, `Calendar.ISO`.","ref":"Klepsidra.Cldr.Calendar.html"},{"type":"function","title":"Klepsidra.Cldr.Calendar.calendar_from_locale/1","doc":"Return the calendar module for a locale.","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Calendar.calendar_from_locale/1","doc":"* `:locale` is any locale or locale name validated\n  by `Cldr.validate_locale/2`.  The default is\n  `Cldr.get_locale()` which returns the locale\n  set for the current process","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Calendar.calendar_from_locale/1","doc":"* `{:ok, calendar_module}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Calendar.calendar_from_locale/1","doc":"iex> Klepsidra.Cldr.Calendar.calendar_from_locale \"en-GB\"\n    {:ok, Cldr.Calendar.GB}\n\n    iex> Klepsidra.Cldr.Calendar.calendar_from_locale \"en-GB-u-ca-gregory\"\n    {:ok, Cldr.Calendar.Gregorian}\n\n    iex> Klepsidra.Cldr.Calendar.calendar_from_locale \"en\"\n    {:ok, Cldr.Calendar.US}\n\n    iex> Klepsidra.Cldr.Calendar.calendar_from_locale \"fa-IR\"\n    {:ok, Cldr.Calendar.Persian}","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Calendar.calendar_from_territory/1","doc":"Returns the calendar module preferred for\na territory.","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_territory/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Calendar.calendar_from_territory/1","doc":"* `territory` is any valid ISO3166-2 code as\n  an `String.t` or upcased `atom()`","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_territory/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Calendar.calendar_from_territory/1","doc":"* `{:ok, calendar_module}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_territory/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Calendar.calendar_from_territory/1","doc":"iex> Klepsidra.Cldr.Calendar.calendar_from_territory :US\n    {:ok, Cldr.Calendar.Gregorian}\n\n    iex> Klepsidra.Cldr.Calendar.calendar_from_territory :XX\n    {:error, {Cldr.UnknownTerritoryError, \"The territory :XX is unknown\"}}","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_territory/1-examples"},{"type":"function","title":"Notes - Klepsidra.Cldr.Calendar.calendar_from_territory/1","doc":"The overwhelming majority of territories have\n`:gregorian` as their first preferred calendar\nand therefore `Cldr.Calendar.Gregorian`\nwill be returned for most territories.\n\nReturning any other calendar module would require:\n\n1. That another calendar is preferred over `:gregorian`\n   for a territory\n\n2. That a calendar module is available to support\n   that calendar.\n\nAs an example, Iran (territory `:IR`) prefers the\n`:persian` calendar. If the optional library\n[ex_cldr_calendars_persian](https://hex.pm/packages/ex_cldr_calendars_persian)\nis installed, the calendar module `Cldr.Calendar.Persian` will\nbe returned. If it is not installed, `Cldr.Calendar.Gregorian`\nwill be returned as `:gregorian` is the second preference\nfor `:IR`.","ref":"Klepsidra.Cldr.Calendar.html#calendar_from_territory/1-notes"},{"type":"function","title":"Klepsidra.Cldr.Calendar.cyclic_years/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#cyclic_years/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.day_periods/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#day_periods/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.days/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#days/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.eras/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#eras/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.month_patterns/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#month_patterns/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.months/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#months/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.quarters/2","doc":"","ref":"Klepsidra.Cldr.Calendar.html#quarters/2"},{"type":"function","title":"Klepsidra.Cldr.Calendar.strftime_options!/2","doc":"Returns a keyword list of options than can be applied to\n`NimbleStrftime.format/3`.\n\nThe hex package [nimble_strftime](https://hex.pm/packages/nimble_strftime)\nprovides a `format/3` function to format dates, times and datetimes.\nIt takes a set of options that can return day, month and am/pm names.\n\n`strftime_options!` returns a keyword list than can be used as these\noptions to return localised names for days, months and am/pm.","ref":"Klepsidra.Cldr.Calendar.html#strftime_options!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Calendar.strftime_options!/2","doc":"* `locale` is any locale returned by `MyApp.Cldr.known_locale_names/0`. The\n  default is `MyApp.Cldr.get_locale/0`\n\n* `options` is a set of keyword options. The default is `[]`","ref":"Klepsidra.Cldr.Calendar.html#strftime_options!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Calendar.strftime_options!/2","doc":"* `:calendar` is the name of any known CLDR calendar. The default\n  is `:gregorian`.","ref":"Klepsidra.Cldr.Calendar.html#strftime_options!/2-options"},{"type":"function","title":"Example - Klepsidra.Cldr.Calendar.strftime_options!/2","doc":"iex: MyApp.Cldr.Calendar.strftime_options!\n    [\n      am_pm_names: #Function<0.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      month_names: #Function<1.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      abbreviated_month_names: #Function<2.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      day_of_week_names: #Function<3.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>,\n      abbreviated_day_of_week_names: #Function<4.32021692/1 in MyApp.Cldr.Calendar.strftime_options/2>\n    ]","ref":"Klepsidra.Cldr.Calendar.html#strftime_options!/2-example"},{"type":"function","title":"Typical usage - Klepsidra.Cldr.Calendar.strftime_options!/2","doc":"iex: NimbleStrftime.format(Date.today(), MyApp.Cldr.Calendar.strftime_options!())","ref":"Klepsidra.Cldr.Calendar.html#strftime_options!/2-typical-usage"},{"type":"module","title":"Klepsidra.Cldr.Currency","doc":"","ref":"Klepsidra.Cldr.Currency.html"},{"type":"function","title":"Klepsidra.Cldr.Currency.currencies_for_locale/3","doc":"Returns a map of the metadata for all currencies for\na given locale.","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currencies_for_locale/3","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale/3-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currencies_for_locale/3","doc":"* `{:ok, currency_map}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale/3-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.currencies_for_locale/3","doc":"MyApp.Cldr.Currency.currencies_for_locale(\"en\")\n  => {:ok,\n   %{\n     FJD: %Cldr.Currency{\n       cash_digits: 2,\n       cash_rounding: 0,\n       code: \"FJD\",\n       count: %{one: \"Fijian dollar\", other: \"Fijian dollars\"},\n       digits: 2,\n       from: nil,\n       iso_digits: 2,\n       name: \"Fijian Dollar\",\n       narrow_symbol: \"$\",\n       rounding: 0,\n       symbol: \"FJD\",\n       tender: true,\n       to: nil\n     },\n     SUR: %Cldr.Currency{\n       cash_digits: 2,\n       cash_rounding: 0,\n       code: \"SUR\",\n       count: %{one: \"Soviet rouble\", other: \"Soviet roubles\"},\n       digits: 2,\n       from: nil,\n       iso_digits: nil,\n       name: \"Soviet Rouble\",\n       narrow_symbol: nil,\n       rounding: 0,\n       symbol: \"SUR\",\n       tender: true,\n       to: nil\n     },\n     ...\n    }}","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale/3-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.currencies_for_locale!/3","doc":"Returns a map of the metadata for all currencies for\na given locale and raises on error.","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currencies_for_locale!/3","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale!/3-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currencies_for_locale!/3","doc":"* `{:ok, currency_map}` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale!/3-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.currencies_for_locale!/3","doc":"MyApp.Cldr.Currency.currencies_for_locale!(\"en\")\n  => %{\n    FJD: %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"FJD\",\n      count: %{one: \"Fijian dollar\", other: \"Fijian dollars\"},\n      digits: 2,\n      from: nil,\n      iso_digits: 2,\n      name: \"Fijian Dollar\",\n      narrow_symbol: \"$\",\n      rounding: 0,\n      symbol: \"FJD\",\n      tender: true,\n      to: nil\n    },\n    SUR: %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"SUR\",\n      count: %{one: \"Soviet rouble\", other: \"Soviet roubles\"},\n      digits: 2,\n      from: nil,\n      iso_digits: nil,\n      name: \"Soviet Rouble\",\n      narrow_symbol: nil,\n      rounding: 0,\n      symbol: \"SUR\",\n      tender: true,\n      to: nil\n    },\n    ...\n   }","ref":"Klepsidra.Cldr.Currency.html#currencies_for_locale!/3-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_for_code/2","doc":"Returns the currency metadata for the requested currency code.","ref":"Klepsidra.Cldr.Currency.html#currency_for_code/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_for_code/2","doc":"* `currency_or_currency_code` is a `binary` or `atom` representation\n   of an ISO 4217 currency code, or a `%Cldr.Currency{}` struct.","ref":"Klepsidra.Cldr.Currency.html#currency_for_code/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Currency.currency_for_code/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`","ref":"Klepsidra.Cldr.Currency.html#currency_for_code/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currency_for_code/2","doc":"* A `{:ok, currency}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Currency.html#currency_for_code/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.currency_for_code/2","doc":"iex> Klepsidra.Cldr.Currency.currency_for_code(\"AUD\")\n    {:ok,\n      %Cldr.Currency{\n        cash_digits: 2,\n        cash_rounding: 0,\n        code: \"AUD\",\n        count: %{one: \"Australian dollar\", other: \"Australian dollars\"},\n        digits: 2,\n        iso_digits: 2,\n        name: \"Australian Dollar\",\n        narrow_symbol: \"$\",\n        rounding: 0,\n        symbol: \"A$\",\n        tender: true\n    }}\n\n    iex> Klepsidra.Cldr.Currency.currency_for_code(\"THB\")\n    {:ok,\n      %Cldr.Currency{\n        cash_digits: 2,\n        cash_rounding: 0,\n        code: \"THB\",\n        count: %{one: \"Thai baht\", other: \"Thai baht\"},\n        digits: 2,\n        iso_digits: 2,\n        name: \"Thai Baht\",\n        narrow_symbol: \"฿\",\n        rounding: 0,\n        symbol: \"THB\",\n        tender: true\n    }}","ref":"Klepsidra.Cldr.Currency.html#currency_for_code/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_for_code!/2","doc":"Returns the currency metadata for the requested currency code.","ref":"Klepsidra.Cldr.Currency.html#currency_for_code!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_for_code!/2","doc":"* `currency_or_currency_code` is a `binary` or `atom` representation\n   of an ISO 4217 currency code, or a `%Cldr.Currency{}` struct.","ref":"Klepsidra.Cldr.Currency.html#currency_for_code!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Currency.currency_for_code!/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`","ref":"Klepsidra.Cldr.Currency.html#currency_for_code!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currency_for_code!/2","doc":"* A `t:Cldr.Current.t/0` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Currency.html#currency_for_code!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.currency_for_code!/2","doc":"iex> Klepsidra.Cldr.Currency.currency_for_code!(\"AUD\")\n    %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"AUD\",\n      count: %{one: \"Australian dollar\", other: \"Australian dollars\"},\n      digits: 2,\n      iso_digits: 2,\n      name: \"Australian Dollar\",\n      narrow_symbol: \"$\",\n      rounding: 0,\n      symbol: \"A$\",\n      tender: true\n    }\n\n    iex> Klepsidra.Cldr.Currency.currency_for_code!(\"THB\")\n    %Cldr.Currency{\n      cash_digits: 2,\n      cash_rounding: 0,\n      code: \"THB\",\n      count: %{one: \"Thai baht\", other: \"Thai baht\"},\n      digits: 2,\n      iso_digits: 2,\n      name: \"Thai Baht\",\n      narrow_symbol: \"฿\",\n      rounding: 0,\n      symbol: \"THB\",\n      tender: true\n    }","ref":"Klepsidra.Cldr.Currency.html#currency_for_code!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_from_locale/1","doc":"Returns the effective currency for a given locale","ref":"Klepsidra.Cldr.Currency.html#currency_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_from_locale/1","doc":"* `locale` is a `Cldr.LanguageTag` struct returned by\n  `Cldr.Locale.new!/2`","ref":"Klepsidra.Cldr.Currency.html#currency_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currency_from_locale/1","doc":"* A ISO 4217 currency code as an upcased atom","ref":"Klepsidra.Cldr.Currency.html#currency_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.currency_from_locale/1","doc":"iex> {:ok, locale} = Klepsidra.Cldr.validate_locale(\"en\")\n    iex> Klepsidra.Cldr.Currency.currency_from_locale locale\n    :USD\n\n    iex> {:ok, locale} = Klepsidra.Cldr.validate_locale(\"en-AU\")\n    iex> Klepsidra.Cldr.Currency.currency_from_locale locale\n    :AUD\n\n    iex> Klepsidra.Cldr.Currency.currency_from_locale(\"en-GB\")\n    :GBP","ref":"Klepsidra.Cldr.Currency.html#currency_from_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_history_for_locale/1","doc":"Returns a list of historic and the current\ncurrency for a given locale.","ref":"Klepsidra.Cldr.Currency.html#currency_history_for_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_history_for_locale/1","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.Currency.html#currency_history_for_locale/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.currency_history_for_locale/1","doc":"iex> MyApp.Cldr.Currency.currency_history_for_locale(\"en\")\n    {:ok,\n        %{\n        USD: %{from: ~D[1792-01-01], to: nil},\n        USN: %{tender: false},\n        USS: %{from: nil, tender: false, to: ~D[2014-03-01]}\n      }\n    }","ref":"Klepsidra.Cldr.Currency.html#currency_history_for_locale/1-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_strings/3","doc":"Returns a map that matches a currency string to a\ncurrency code.\n\nA currency string is a localised name or symbol\nrepresenting a currency in a locale-specific manner.","ref":"Klepsidra.Cldr.Currency.html#currency_strings/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_strings/3","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","ref":"Klepsidra.Cldr.Currency.html#currency_strings/3-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currency_strings/3","doc":"* `{:ok, currency_string_map}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Currency.html#currency_strings/3-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.currency_strings/3","doc":"MyApp.Cldr.Currency.currency_strings(\"en\")\n    => {:ok,\n     %{\n       \"mexican silver pesos\" => :MXP,\n       \"sudanese dinar\" => :SDD,\n       \"bad\" => :BAD,\n       \"rsd\" => :RSD,\n       \"swazi lilangeni\" => :SZL,\n       \"zairean new zaire\" => :ZRN,\n       \"guyanaese dollars\" => :GYD,\n       \"equatorial guinean ekwele\" => :GQE,\n       ...\n      }}","ref":"Klepsidra.Cldr.Currency.html#currency_strings/3-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.currency_strings!/3","doc":"Returns a map that matches a currency string to a\ncurrency code or raises an exception.\n\nA currency string is a localised name or symbol\nrepresenting a currency in a locale-specific manner.","ref":"Klepsidra.Cldr.Currency.html#currency_strings!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.currency_strings!/3","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`\n\n* `currency_status` is `:all`, `:current`, `:historic`,\n  `unannotated` or `:tender`; or a list of one or more status.\n  The default is `:all`. See `Cldr.Currency.currency_filter/2`.","ref":"Klepsidra.Cldr.Currency.html#currency_strings!/3-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.currency_strings!/3","doc":"* `{:ok, currency_string_map}` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Currency.html#currency_strings!/3-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.currency_strings!/3","doc":"MyApp.Cldr.Currency.currency_strings!(\"en\")\n    => %{\n      \"mexican silver pesos\" => :MXP,\n      \"sudanese dinar\" => :SDD,\n      \"bad\" => :BAD,\n      \"rsd\" => :RSD,\n      \"swazi lilangeni\" => :SZL,\n      \"zairean new zaire\" => :ZRN,\n      \"guyanaese dollars\" => :GYD,\n      \"equatorial guinean ekwele\" => :GQE,\n      ...\n     }","ref":"Klepsidra.Cldr.Currency.html#currency_strings!/3-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.current_currency_from_locale/1","doc":"Returns the current currency for a given locale.\n\nThis function does not consider the `U` extenion\nparameters `cu` or `rg`. It is recommended to us\n`Cldr.Currency.currency_from_locale/1` in most\ncircumstances.","ref":"Klepsidra.Cldr.Currency.html#current_currency_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.current_currency_from_locale/1","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.Currency.html#current_currency_from_locale/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.current_currency_from_locale/1","doc":"iex> MyApp.Cldr.Currency.current_currency_from_locale(\"en\")\n    :USD\n\n    iex> MyApp.Cldr.Currency.current_currency_from_locale(\"en-AU\")\n    :AUD","ref":"Klepsidra.Cldr.Currency.html#current_currency_from_locale/1-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.current_territory_currencies/0","doc":"Returns a mapping from a territory code to its\ncurrent currency code.\n\nIf a territory has no current currency (like\nAntartica, territory code `:AQ`) then no\nmapping is returned for that territory.","ref":"Klepsidra.Cldr.Currency.html#current_territory_currencies/0"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.current_territory_currencies/0","doc":"* A map of `{territory_code => Cldr.Currency.t}`","ref":"Klepsidra.Cldr.Currency.html#current_territory_currencies/0-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.current_territory_currencies/0","doc":"iex> Klepsidra.Cldr.Currency.current_territory_currencies()","ref":"Klepsidra.Cldr.Currency.html#current_territory_currencies/0-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.known_currencies/0","doc":"","ref":"Klepsidra.Cldr.Currency.html#known_currencies/0"},{"type":"function","title":"Klepsidra.Cldr.Currency.known_currency?/1","doc":"","ref":"Klepsidra.Cldr.Currency.html#known_currency?/1"},{"type":"function","title":"Klepsidra.Cldr.Currency.known_currency_code/1","doc":"Returns a 2-tuple indicating if the supplied currency code is known.","ref":"Klepsidra.Cldr.Currency.html#known_currency_code/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.known_currency_code/1","doc":"* `currency_code` is a `binary` or `atom` representing an ISO4217\n  currency code","ref":"Klepsidra.Cldr.Currency.html#known_currency_code/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.known_currency_code/1","doc":"* `{:ok, currency_code}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Currency.html#known_currency_code/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.known_currency_code/1","doc":"iex> Klepsidra.Cldr.Currency.known_currency_code(\"AUD\")\n    {:ok, :AUD}\n\n    iex> Klepsidra.Cldr.Currency.known_currency_code(\"GGG\")\n    {:error, {Cldr.UnknownCurrencyError, \"The currency \\\"GGG\\\" is invalid\"}}","ref":"Klepsidra.Cldr.Currency.html#known_currency_code/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.known_currency_code?/1","doc":"Returns a boolean indicating if the supplied currency code is known.","ref":"Klepsidra.Cldr.Currency.html#known_currency_code?/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.known_currency_code?/1","doc":"* `currency_code` is a `binary` or `atom` representing an ISO4217\n  currency code","ref":"Klepsidra.Cldr.Currency.html#known_currency_code?/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.known_currency_code?/1","doc":"* `true` or `false`","ref":"Klepsidra.Cldr.Currency.html#known_currency_code?/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.known_currency_code?/1","doc":"iex> Klepsidra.Cldr.Currency.known_currency_code?(\"AUD\")\n    true\n\n    iex> Klepsidra.Cldr.Currency.known_currency_code?(\"GGG\")\n    false\n\n    iex> Klepsidra.Cldr.Currency.known_currency_code?(:XCV)\n    false","ref":"Klepsidra.Cldr.Currency.html#known_currency_code?/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.known_currency_codes/0","doc":"Returns a list of all known currency codes.","ref":"Klepsidra.Cldr.Currency.html#known_currency_codes/0"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.known_currency_codes/0","doc":"iex> Klepsidra.Cldr.Currency.known_currency_codes()","ref":"Klepsidra.Cldr.Currency.html#known_currency_codes/0-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.new/2","doc":"Returns a `Currency` struct created from the arguments.","ref":"Klepsidra.Cldr.Currency.html#new/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.new/2","doc":"* `currency` is a private use currency code in a format defined by\n  [ISO4217](https://en.wikipedia.org/wiki/ISO_4217)\n  which is `X` followed by two alphanumeric characters.\n\n* `options` is a map of options representing the optional elements of\n  the `Cldr.Currency.t` struct.","ref":"Klepsidra.Cldr.Currency.html#new/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Currency.new/2","doc":"* `:name` is the name of the currency. Required.\n* `:digits` is the precision of the currency. Required.\n* `:symbol` is the currency symbol. Optional.\n* `:narrow_symbol` is an alternative narrow symbol. Optional.\n* `:round_nearest` is the rounding precision such as `0.05`. Optional.\n* `:alt_code` is an alternative currency code for application use.\n* `:cash_digits` is the precision of the currency when used as cash. Optional.\n* `:cash_rounding_nearest` is the rounding precision when used as cash\n  such as `0.05`. Optional.","ref":"Klepsidra.Cldr.Currency.html#new/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.new/2","doc":"* `{:ok, Cldr.Currency.t}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Currency.html#new/2-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.new/2","doc":"iex> Klepsidra.Cldr.Currency.new(:XAE, name: \"Custom Name\", digits: 0)\n    {:ok,\n     %Cldr.Currency{\n       alt_code: :XAE,\n       cash_digits: 0,\n       cash_rounding: nil,\n       code: :XAE,\n       count: %{other: \"Custom Name\"},\n       digits: 0,\n       from: nil,\n       iso_digits: 0,\n       name: \"Custom Name\",\n       narrow_symbol: nil,\n       rounding: 0,\n       symbol: \"XAE\",\n       tender: false,\n       to: nil\n     }}\n    iex> MyApp.Cldr.Currency.new(:XAH, name: \"Custom Name\")\n    {:error, \"Required options are missing. Required options are [:name, :digits]\"}\n    iex> Klepsidra.Cldr.Currency.new(:XAE, name: \"XAE\", digits: 0)\n    {:error, {Cldr.CurrencyAlreadyDefined, \"Currency :XAE is already defined.\"}}","ref":"Klepsidra.Cldr.Currency.html#new/2-example"},{"type":"function","title":"Klepsidra.Cldr.Currency.pluralize/3","doc":"Returns the appropriate currency display name for the `currency`, based\non the plural rules in effect for the `locale`.","ref":"Klepsidra.Cldr.Currency.html#pluralize/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.pluralize/3","doc":"* `number` is an integer, float or `Decimal`\n\n* `currency` is any currency returned by `Cldr.Currency.known_currencies/0`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Currency.html#pluralize/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Currency.pluralize/3","doc":"* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`. The\n  default is `Klepsidra.Cldr.get_locale/0`","ref":"Klepsidra.Cldr.Currency.html#pluralize/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.pluralize/3","doc":"* `{:ok, plural_string}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Currency.html#pluralize/3-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Currency.pluralize/3","doc":"iex> Klepsidra.Cldr.Currency.pluralize(1, :USD)\n    {:ok, \"US dollar\"}\n\n    iex> Klepsidra.Cldr.Currency.pluralize(3, :USD)\n    {:ok, \"US dollars\"}\n\n    iex> Klepsidra.Cldr.Currency.pluralize(12, :USD, locale: \"zh\")\n    {:ok, \"美元\"}\n\n    iex> Klepsidra.Cldr.Currency.pluralize(12, :USD, locale: \"fr\")\n    {:ok, \"dollars des États-Unis\"}\n\n    iex> Klepsidra.Cldr.Currency.pluralize(1, :USD, locale: \"fr\")\n    {:ok, \"dollar des États-Unis\"}","ref":"Klepsidra.Cldr.Currency.html#pluralize/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Currency.strings_for_currency/2","doc":"Returns the strings associated with a currency\nin a given locale.","ref":"Klepsidra.Cldr.Currency.html#strings_for_currency/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Currency.strings_for_currency/2","doc":"* `currency` is an ISO4217 currency code\n\n* `locale` is any valid locale name returned by `MyApp.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `MyApp.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.Currency.html#strings_for_currency/2-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Currency.strings_for_currency/2","doc":"* A list of strings or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Currency.html#strings_for_currency/2-returns"},{"type":"function","title":"Example - Klepsidra.Cldr.Currency.strings_for_currency/2","doc":"iex> MyApp.Cldr.Currency.strings_for_currency(:AUD, \"en\")\n    [\"a$\", \"australian dollars\", \"aud\", \"australian dollar\"]","ref":"Klepsidra.Cldr.Currency.html#strings_for_currency/2-example"},{"type":"module","title":"Klepsidra.Cldr.Date","doc":"","ref":"Klepsidra.Cldr.Date.html"},{"type":"function","title":"Klepsidra.Cldr.Date.to_string/2","doc":"Formats a date according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)","ref":"Klepsidra.Cldr.Date.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Date.to_string/2","doc":"* `date` is a `%Date{}` struct or any map that contains the keys\n  `year`, `month`, `day` and `calendar`\n\n* `options` is a keyword list of options for formatting.  The valid options are:","ref":"Klepsidra.Cldr.Date.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Date.to_string/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string.\n    The default is `:medium`.\n\n  * `locale:` any locale returned by `Cldr.known_locale_names/1`.\n    The default is `Cldr.get_locale()`.\n\n  * `number_system:` a number system into which the formatted date digits\n    should be transliterated.","ref":"Klepsidra.Cldr.Date.html#to_string/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Date.to_string/2","doc":"* `{:ok, formatted_string}` or\n\n* `{:error, reason}`","ref":"Klepsidra.Cldr.Date.html#to_string/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Date.to_string/2","doc":"iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], format: :medium, locale: \"en\"\n    {:ok, \"Jul 10, 2017\"}\n\n    iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], locale: \"en\"\n    {:ok, \"Jul 10, 2017\"}\n\n    iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], format: :full, locale: \"en\"\n    {:ok, \"Monday, July 10, 2017\"}\n\n    iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], format: :short, locale: \"en\"\n    {:ok, \"7/10/17\"}\n\n    iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], format: :short, locale: \"fr\"\n    {:ok, \"10/07/2017\"}\n\n    iex> Klepsidra.Cldr.Date.to_string ~D[2017-07-10], format: :long, locale: \"af\"\n    {:ok, \"10 Julie 2017\"}","ref":"Klepsidra.Cldr.Date.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Date.to_string!/2","doc":"Formats a date according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html).","ref":"Klepsidra.Cldr.Date.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Date.to_string!/2","doc":"* `date` is a `%Date{}` struct or any map that contains the keys\n  `year`, `month`, `day` and `calendar`.\n\n* `options` is a keyword list of options for formatting.","ref":"Klepsidra.Cldr.Date.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Date.to_string!/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string.\n    The default is `:medium`.\n\n  * `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n    or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`.\n\n  * `number_system:` a number system into which the formatted date digits should\n    be transliterated.","ref":"Klepsidra.Cldr.Date.html#to_string!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Date.to_string!/2","doc":"* `formatted_date` or\n\n* raises an exception.","ref":"Klepsidra.Cldr.Date.html#to_string!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Date.to_string!/2","doc":"iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], format: :medium, locale: \"en\"\n    \"Jul 10, 2017\"\n\n    iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], locale: \"en\"\n    \"Jul 10, 2017\"\n\n    iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], format: :full,locale: \"en\"\n    \"Monday, July 10, 2017\"\n\n    iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], format: :short, locale: \"en\"\n    \"7/10/17\"\n\n    iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], format: :short, locale: \"fr\"\n    \"10/07/2017\"\n\n    iex> Klepsidra.Cldr.Date.to_string! ~D[2017-07-10], format: :long, locale: \"af\"\n    \"10 Julie 2017\"","ref":"Klepsidra.Cldr.Date.html#to_string!/2-examples"},{"type":"module","title":"Klepsidra.Cldr.Date.Interval","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Klepsidra.Cldr.Date.Interval.to_string/3` and `Klepsidra.Cldr.Interval.to_string/3`","ref":"Klepsidra.Cldr.Date.Interval.html"},{"type":"function","title":"Klepsidra.Cldr.Date.Interval.do_to_string!/3","doc":"","ref":"Klepsidra.Cldr.Date.Interval.html#do_to_string!/3"},{"type":"function","title":"Klepsidra.Cldr.Date.Interval.to_string/3","doc":"Returns a interval formed from two dates as\na localised string.","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Date.Interval.to_string/3","doc":"* `from` is any map that conforms to the\n  `Calendar.date` type.\n\n* `to` is any map that conforms to the\n  `Calendar.date` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone date.","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Date.Interval.to_string/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The\n  alternatives are `:date`, `:month_and_day`, `:month`\n  and `:year_and_month`. The default is `:date`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Date.Interval.to_string/3","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Date.Interval.to_string/3","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Date.Interval.to_string/3","doc":"iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-12-31]\n    {:ok, \"Jan 1 – Dec 31, 2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12]\n    {:ok, \"Jan 1 – 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month\n    {:ok, \"January – December 2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :short\n    {:ok, \"1/1/2020 – 1/12/2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long, locale: \"fr\"\n    {:ok, \"mer. 1 – dim. 12 janv. 2020\"}\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long, locale: \"th\", number_system: :thai\n    {:ok, \"พ. ๑ ม.ค. – อา. ๑๒ ม.ค. ๒๐๒๐\"}","ref":"Klepsidra.Cldr.Date.Interval.html#to_string/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"Returns a interval formed from two dates as\na localised string.","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"* `from` is any map that conforms to the\n  `Calendar.date` type.\n\n* `to` is any map that conforms to the\n  `Calendar.date` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone date.","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The\n  alternatives are `:date`, `:month_and_day`, `:month`\n  and `:year_and_month`. The default is `:date`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"* `string` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Date.Interval.to_string!/3","doc":"iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-12-31])\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12])\n    \"Jan 1 – 12, 2020\"\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :long\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-12-01]),\n    ...> format: :long, style: :year_and_month\n    \"January – December 2020\"\n\n    iex> use CalendarInterval\n    iex> Klepsidra.Cldr.Date.Interval.to_string! ~I\"2020-01/12\"\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :short\n    \"1/1/2020 – 1/12/2020\"\n\n    iex> Klepsidra.Cldr.Date.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-01-12]),\n    ...> format: :long, locale: \"fr\"\n    \"mer. 1 – dim. 12 janv. 2020\"","ref":"Klepsidra.Cldr.Date.Interval.html#to_string!/3-examples"},{"type":"module","title":"Klepsidra.Cldr.DateTime","doc":"","ref":"Klepsidra.Cldr.DateTime.html"},{"type":"function","title":"Klepsidra.Cldr.DateTime.to_string/2","doc":"Formats a DateTime according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)","ref":"Klepsidra.Cldr.DateTime.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.to_string/2","doc":"* `datetime` is a `%DateTime{}` `or %NaiveDateTime{}`struct or any map that contains the keys\n  `:year`, `:month`, `:day`, `:calendar`. `:hour`, `:minute` and `:second` with optional\n  `:microsecond`.\n\n* `options` is a keyword list of options for formatting.","ref":"Klepsidra.Cldr.DateTime.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.to_string/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string or\n    any of the keys returned by `Cldr.DateTime.available_format_names`.\n    The default is `:medium`\n\n  * `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n    or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n  * `number_system:` a number system into which the formatted date digits should\n    be transliterated\n\n  * `era: :variant` will use a variant for the era is one is available in the locale.\n    In the \"en\" for example, the locale `era: :variant` will return \"BCE\" instead of \"BC\".\n\n  * `period: :variant` will use a variant for the time period and flexible time period if\n    one is available in the locale.  For example, in the \"en\" locale `period: :variant` will\n    return \"pm\" instead of \"PM\"","ref":"Klepsidra.Cldr.DateTime.html#to_string/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.DateTime.to_string/2","doc":"* `{:ok, formatted_datetime}` or\n\n* `{:error, reason}`","ref":"Klepsidra.Cldr.DateTime.html#to_string/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.to_string/2","doc":"iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Klepsidra.Cldr.DateTime.to_string datetime\n    {:ok, \"Jan 1, 2000, 11:59:59 PM\"}\n    iex> Klepsidra.Cldr.DateTime.to_string datetime, locale: \"en\"\n    {:ok, \"Jan 1, 2000, 11:59:59 PM\"}\n    iex> Klepsidra.Cldr.DateTime.to_string datetime, format: :long, locale: \"en\"\n    {:ok, \"January 1, 2000, 11:59:59 PM UTC\"}\n    iex> Klepsidra.Cldr.DateTime.to_string datetime, format: :hms, locale: \"en\"\n    {:ok, \"11:59:59 PM\"}\n    iex> Klepsidra.Cldr.DateTime.to_string datetime, format: :full, locale: \"en\"\n    {:ok, \"Saturday, January 1, 2000, 11:59:59 PM GMT\"}\n    iex> Klepsidra.Cldr.DateTime.to_string datetime, format: :full, locale: \"fr\"\n    {:ok, \"samedi 1 janvier 2000, 23:59:59 UTC\"}","ref":"Klepsidra.Cldr.DateTime.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.to_string!/2","doc":"Formats a DateTime according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)\nreturning a formatted string or raising on error.","ref":"Klepsidra.Cldr.DateTime.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.to_string!/2","doc":"* `datetime` is a `%DateTime{}` `or %NaiveDateTime{}`struct or any map that contains the keys\n  `:year`, `:month`, `:day`, `:calendar`. `:hour`, `:minute` and `:second` with optional\n  `:microsecond`.\n\n* `options` is a keyword list of options for formatting.","ref":"Klepsidra.Cldr.DateTime.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.to_string!/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string or\n    any of the keys returned by `Cldr.DateTime.available_format_names` or a format string.\n    The default is `:medium`.\n\n  * `:date_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n    this option is used to format the date part of the date time. This option is\n    only acceptable if the `:format` option is not specified, or is specified as either\n    `:short`, `:medium`, `:long`, `:full`. If `:date_format` is not specified\n    then the date format is defined by the `:format` option.\n\n  * `:time_format` is any one of `:short`, `:medium`, `:long`, `:full`. If defined,\n    this option is used to format the time part of the date time. This option is\n    only acceptable if the `:format` option is not specified, or is specified as either\n    `:short`, `:medium`, `:long`, `:full`. If `:time_format` is not specified\n    then the time format is defined by the `:format` option.\n\n  * `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n    or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`.\n\n  * `number_system:` a number system into which the formatted date digits should\n    be transliterated.\n\n  * `era: :variant` will use a variant for the era is one is available in the locale.\n    In the \"en\" for example, the locale `era: :variant` will return \"BCE\" instead of \"BC\".\n\n  * `period: :variant` will use a variant for the time period and flexible time period if\n    one is available in the locale.  For example, in the \"en\" locale `period: :variant` will\n    return \"pm\" instead of \"PM\".","ref":"Klepsidra.Cldr.DateTime.html#to_string!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.DateTime.to_string!/2","doc":"* `formatted_datetime` or\n\n* raises an exception","ref":"Klepsidra.Cldr.DateTime.html#to_string!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.to_string!/2","doc":"iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Klepsidra.Cldr.DateTime.to_string! datetime, locale: \"en\"\n    \"Jan 1, 2000, 11:59:59 PM\"\n    iex> Klepsidra.Cldr.DateTime.to_string! datetime, format: :long, locale: \"en\"\n    \"January 1, 2000, 11:59:59 PM UTC\"\n    iex> Klepsidra.Cldr.DateTime.to_string! datetime, format: :full, locale: \"en\"\n    \"Saturday, January 1, 2000, 11:59:59 PM GMT\"\n    iex> Klepsidra.Cldr.DateTime.to_string! datetime, format: :full, locale: \"fr\"\n    \"samedi 1 janvier 2000, 23:59:59 UTC\"","ref":"Klepsidra.Cldr.DateTime.html#to_string!/2-examples"},{"type":"module","title":"Klepsidra.Cldr.DateTime.Format","doc":"Manages the Date, TIme and DateTime formats\ndefined by CLDR.\n\nThe functions in `Cldr.DateTime.Format` are\nprimarily concerned with encapsulating the\ndata from CLDR in functions that are used\nduring the formatting process.","ref":"Klepsidra.Cldr.DateTime.Format.html"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.calendars_for/1","doc":"Returns a list of calendars defined for a given locale.","ref":"Klepsidra.Cldr.DateTime.Format.html#calendars_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.calendars_for/1","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.DateTime.Format.html#calendars_for/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.DateTime.Format.calendars_for/1","doc":"iex> Klepsidra.Cldr.DateTime.Format.calendars_for(:en)\n    {:ok, [:buddhist, :chinese, :coptic, :dangi, :ethiopic, :ethiopic_amete_alem,\n     :generic, :gregorian, :hebrew, :indian, :islamic, :islamic_civil,\n     :islamic_rgsa, :islamic_tbla, :islamic_umalqura, :japanese, :persian, :roc]}","ref":"Klepsidra.Cldr.DateTime.Format.html#calendars_for/1-example"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_formats/2","doc":"Returns a map of the standard date formats for a given locale and calendar.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_formats/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.date_formats(:en)\n    {:ok, %Cldr.Date.Formats{\n      full: \"EEEE, MMMM d, y\",\n      long: \"MMMM d, y\",\n      medium: \"MMM d, y\",\n      short: \"M/d/yy\"\n    }}\n\n    iex> Klepsidra.Cldr.DateTime.Format.date_formats(:en, :buddhist)\n    {:ok, %Cldr.Date.Formats{\n      full: \"EEEE, MMMM d, y G\",\n      long: \"MMMM d, y G\",\n      medium: \"MMM d, y G\",\n      short: \"M/d/y GGGGG\"\n    }}","ref":"Klepsidra.Cldr.DateTime.Format.html#date_formats/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_time_at_formats/2","doc":"Returns a map of the standard datetime \"at\" formats for a given\nlocale and calendar.\n\nAn \"at\" format is one where the datetime is formatted with the\ndate part separated from the time part by a localized version\nof \"at\".","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_at_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_time_at_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`,","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_at_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_time_at_formats/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.date_time_at_formats(:en)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1} 'at' {0}\",\n      long: \"{1} 'at' {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"}\n    }\n\n    iex> Klepsidra.Cldr.DateTime.Format.date_time_at_formats(:en, :buddhist)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1} 'at' {0}\",\n      long: \"{1} 'at' {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"}\n    }","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_at_formats/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_time_available_formats/2","doc":"Returns a map of the available non-standard datetime formats for a\ngiven locale and calendar.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_available_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_time_available_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag.t()`\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\nThe default is `:gregorian`","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_available_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_time_available_formats/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.date_time_available_formats \"en\"\n    {\n      :ok,\n      %{\n        d: \"d\",\n        h: \"h a\",\n        hm: \"h:mm a\",\n        hms: \"h:mm:ss a\",\n        hmsv: \"h:mm:ss a v\",\n        hmv: \"h:mm a v\",\n        ms: \"mm:ss\",\n        y: \"y\",\n        yw: %{one: \"'week' w 'of' Y\", other: \"'week' w 'of' Y\"},\n        Bh: \"h B\",\n        Bhm: \"h:mm B\",\n        Bhms: \"h:mm:ss B\",\n        E: \"ccc\",\n        EBhm: \"E h:mm B\",\n        EBhms: \"E h:mm:ss B\",\n        EHm: \"E HH:mm\",\n        EHms: \"E HH:mm:ss\",\n        Ed: \"d E\",\n        Ehm: \"E h:mm a\",\n        Ehms: \"E h:mm:ss a\",\n        Gy: \"y G\",\n        GyMMM: \"MMM y G\",\n        GyMMMEd: \"E, MMM d, y G\",\n        GyMMMd: \"MMM d, y G\",\n        GyMd: \"M/d/y G\",\n        H: \"HH\",\n        Hm: \"HH:mm\",\n        Hms: \"HH:mm:ss\",\n        Hmsv: \"HH:mm:ss v\",\n        Hmv: \"HH:mm v\",\n        M: \"L\",\n        MEd: \"E, M/d\",\n        MMM: \"LLL\",\n        MMMEd: \"E, MMM d\",\n        MMMMW: %{one: \"'week' W 'of' MMMM\", other: \"'week' W 'of' MMMM\"},\n        MMMMd: \"MMMM d\",\n        MMMd: \"MMM d\",\n        Md: \"M/d\",\n        yM: \"M/y\",\n        yMEd: \"E, M/d/y\",\n        yMMM: \"MMM y\",\n        yMMMEd: \"E, MMM d, y\",\n        yMMMM: \"MMMM y\",\n        yMMMd: \"MMM d, y\",\n        yMd: \"M/d/y\",\n        yQQQ: \"QQQ y\",\n        yQQQQ: \"QQQQ y\"\n      }\n    }","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_available_formats/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_time_formats/2","doc":"Returns a map of the standard datetime formats for a given locale and calendar.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_time_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_time_formats/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.date_time_formats(:en)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1}, {0}\",\n      long: \"{1}, {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"\n    }}\n\n    iex> Klepsidra.Cldr.DateTime.Format.date_time_formats(:en, :buddhist)\n    {:ok, %Cldr.DateTime.Formats{\n      full: \"{1}, {0}\",\n      long: \"{1}, {0}\",\n      medium: \"{1}, {0}\",\n      short: \"{1}, {0}\"\n    }}","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_formats/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_time_interval_fallback/2","doc":"Returns the fallback format for a given\nlocale and calendar type","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_fallback/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_time_interval_fallback/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag.t()`\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_fallback/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_time_interval_fallback/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.date_time_interval_fallback :en, :gregorian\n    [0, \" – \", 1]","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_fallback/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.date_time_interval_formats/2","doc":"Returns a map of the interval formats for a\ngiven locale and calendar.","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.date_time_interval_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag.t/0`\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.date_time_interval_formats/2","doc":"","ref":"Klepsidra.Cldr.DateTime.Format.html#date_time_interval_formats/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.day_period_for/2","doc":"Returns the time period for a given time of day.","ref":"Klepsidra.Cldr.DateTime.Format.html#day_period_for/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.day_period_for/2","doc":"* `time` is any `Time.t` or a map with at least `:hour`,\n  `:minute` and `:second` keys\n\n* `language` is a binary representation of a valid and\n  configured language in `Cldr`\n\nThe time period is a locale-specific key that is used\nto localise a time into a textual representation of \"am\",\n\"pm\", \"noon\", \"midnight\", \"evening\", \"morning\" and so on\nas defined in the CLDR day period rules.","ref":"Klepsidra.Cldr.DateTime.Format.html#day_period_for/2-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Format.day_period_for/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.day_period_for ~T[06:05:54.515228], :en\n    :morning1\n\n    iex> Klepsidra.Cldr.DateTime.Format.day_period_for ~T[13:05:54.515228], :en\n    :afternoon1\n\n    iex> Klepsidra.Cldr.DateTime.Format.day_period_for ~T[21:05:54.515228], :en\n    :night1\n\n    iex> Klepsidra.Cldr.DateTime.Format.day_period_for ~T[21:05:54.515228], :fr\n    :evening1","ref":"Klepsidra.Cldr.DateTime.Format.html#day_period_for/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.gmt_format/1","doc":"Returns the GMT offset format list for a\nfor a timezone offset for a given locale.","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_format/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.gmt_format/1","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_format/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.DateTime.Format.gmt_format/1","doc":"iex> Klepsidra.Cldr.DateTime.Format.gmt_format :en\n    {:ok, [\"GMT\", 0]}","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_format/1-example"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.gmt_zero_format/1","doc":"Returns the GMT format string for a\nfor a timezone with an offset of zero for\na given locale.","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_zero_format/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.gmt_zero_format/1","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_zero_format/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.DateTime.Format.gmt_zero_format/1","doc":"iex> Klepsidra.Cldr.DateTime.Format.gmt_zero_format :en\n    {:ok, \"GMT\"}\n\n    iex> Klepsidra.Cldr.DateTime.Format.gmt_zero_format :fr\n    {:ok, \"UTC\"}","ref":"Klepsidra.Cldr.DateTime.Format.html#gmt_zero_format/1-example"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.hour_format/1","doc":"Returns the positive and negative hour format\nfor a timezone offset for a given locale.","ref":"Klepsidra.Cldr.DateTime.Format.html#hour_format/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.hour_format/1","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.DateTime.Format.html#hour_format/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.DateTime.Format.hour_format/1","doc":"iex> Klepsidra.Cldr.DateTime.Format.hour_format \"en\"\n    {:ok, {\"+HH:mm\", \"-HH:mm\"}}","ref":"Klepsidra.Cldr.DateTime.Format.html#hour_format/1-example"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","doc":"Returns a boolean indicating is a given language defines the\nnotion of \"noon\" and \"midnight\"","ref":"Klepsidra.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","doc":"* `language` is a binary representation of a valid and\n  configured language in `Cldr`","ref":"Klepsidra.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight?/1","doc":"iex> Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight? :fr\n    true\n\n    iex> Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight? :en\n    true\n\n    iex> Klepsidra.Cldr.DateTime.Format.language_has_noon_and_midnight? :af\n    false","ref":"Klepsidra.Cldr.DateTime.Format.html#language_has_noon_and_midnight?/1-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Format.time_formats/2","doc":"Returns a map of the standard time formats for a given locale and calendar.","ref":"Klepsidra.Cldr.DateTime.Format.html#time_formats/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Format.time_formats/2","doc":"* `locale` is any locale returned by `Cldr.known_locale_names/0`.\n\n* `calendar` is any calendar returned by `Cldr.DateTime.Format.calendars_for/1`\n  The default is `:gregorian`.","ref":"Klepsidra.Cldr.DateTime.Format.html#time_formats/2-arguments"},{"type":"function","title":"Examples: - Klepsidra.Cldr.DateTime.Format.time_formats/2","doc":"iex> Klepsidra.Cldr.DateTime.Format.time_formats(:en)\n    {:ok, %Cldr.Time.Formats{\n      full: \"h:mm:ss a zzzz\",\n      long: \"h:mm:ss a z\",\n      medium: \"h:mm:ss a\",\n      short: \"h:mm a\"\n    }}\n\n    iex> Klepsidra.Cldr.DateTime.Format.time_formats(:en, :buddhist)\n    {:ok, %Cldr.Time.Formats{\n      full: \"h:mm:ss a zzzz\",\n      long: \"h:mm:ss a z\",\n      medium: \"h:mm:ss a\",\n      short: \"h:mm a\"\n    }}","ref":"Klepsidra.Cldr.DateTime.Format.html#time_formats/2-examples"},{"type":"type","title":"Klepsidra.Cldr.DateTime.Format.calendar/0","doc":"","ref":"Klepsidra.Cldr.DateTime.Format.html#t:calendar/0"},{"type":"type","title":"Klepsidra.Cldr.DateTime.Format.formats/0","doc":"","ref":"Klepsidra.Cldr.DateTime.Format.html#t:formats/0"},{"type":"module","title":"Klepsidra.Cldr.DateTime.Formatter","doc":"Implements the compilation and execution of\ndate, time and datetime formats.","ref":"Klepsidra.Cldr.DateTime.Formatter.html"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Formatter.format/4","doc":"Returns the formatted and localised date, time or datetime\nfor a given `Date`, `Time`, `DateTime` or struct with the\nappropriate fields.","ref":"Klepsidra.Cldr.DateTime.Formatter.html#format/4"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Formatter.format/4","doc":"* `date` is a `Date`, `Time`, `DateTime` or other struct that\ncontains the required date and time fields.\n\n* `format` is a valid format string, for example `yy/MM/dd hh:MM`\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`\n\n* `options` is a keyword list of options.  The valid options are:","ref":"Klepsidra.Cldr.DateTime.Formatter.html#format/4-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.Formatter.format/4","doc":"* `:number_system`.  The resulting formatted and localised date/time\nstring will be transliterated into this number system. Number system\nis anything returned from `Klepsidra.Cldr.Number.System.number_systems_for/1`\n\n*NOTE* This function is called by `Cldr.Date.to_string/2`, `Cldr.Time.to_string/2`\nand `Cldr.DateTime.to_string/2` which is the preferred API.","ref":"Klepsidra.Cldr.DateTime.Formatter.html#format/4-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Formatter.format/4","doc":"iex> Klepsidra.Cldr.DateTime.Formatter.format ~U[2017-09-03 10:23:00.0Z], \"yy/MM/dd hh:MM\", \"en\"\n    {:ok, \"17/09/03 10:09\"}","ref":"Klepsidra.Cldr.DateTime.Formatter.html#format/4-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Formatter.gmt_tz_format/3","doc":"","ref":"Klepsidra.Cldr.DateTime.Formatter.html#gmt_tz_format/3"},{"type":"module","title":"Klepsidra.Cldr.DateTime.Interval","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Cldr.Interval.to_string/3` and `Cldr.DateTime.Interval.to_string/3`","ref":"Klepsidra.Cldr.DateTime.Interval.html"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Interval.do_to_string/3","doc":"","ref":"Klepsidra.Cldr.DateTime.Interval.html#do_to_string/3"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Interval.do_to_string!/3","doc":"","ref":"Klepsidra.Cldr.DateTime.Interval.html#do_to_string!/3"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"Returns a string representing the formatted\ninterval formed by two dates.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"* `from` is any map that conforms to the\n  `Calendar.datetime` type.\n\n* `to` is any map that conforms to the\n  `Calendar.datetime` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone datetime.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Interval.to_string/3","doc":"iex> Klepsidra.Cldr.DateTime.Interval.to_string ~U[2020-01-01 00:00:00.0Z],\n    ...> ~U[2020-12-31 10:00:00.0Z]\n    {:ok, \"Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM\"}\n\n    iex> Klepsidra.Cldr.DateTime.Interval.to_string ~U[2020-01-01 00:00:00.0Z], nil\n    {:ok, \"Jan 1, 2020, 12:00:00 AM –\"}","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string/3-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"Returns a string representing the formatted\ninterval formed by two dates or raises an\nexception.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"* `from` is any map that conforms to the\n  `Calendar.datetime` type.\n\n* `to` is any map that conforms to the\n  `Calendar.datetime` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone datetime.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"* `string` or\n\n* raises an exception","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"* For more information on interval format string\n  see the `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date is formatted instead of an interval.","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Interval.to_string!/3","doc":"iex> Klepsidra.Cldr.DateTime.Interval.to_string! ~U[2020-01-01 00:00:00.0Z],\n    ...> ~U[2020-12-31 10:00:00.0Z]\n    \"Jan 1, 2020, 12:00:00 AM – Dec 31, 2020, 10:00:00 AM\"","ref":"Klepsidra.Cldr.DateTime.Interval.html#to_string!/3-examples"},{"type":"module","title":"Klepsidra.Cldr.DateTime.Relative","doc":"","ref":"Klepsidra.Cldr.DateTime.Relative.html"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Relative.to_string/2","doc":"Returns a `{:ok, string}` representing a relative time (ago, in) for a given\nnumber, Date or Datetime.  Returns `{:error, reason}` when errors are detected.\n\n* `relative` is a number or Date/Datetime representing the time distance from `now` or from\n  options[:relative_to]\n\n* `options` is a `Keyword` list of options which are:","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string/2"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.Relative.to_string/2","doc":"* `:locale` is the locale in which the binary is formatted.\n  The default is `Cldr.get_locale/0`\n\n* `:style` is the style of the binary.  Style may be `:default`, `:narrow` or `:short`\n\n* `:unit` is the time unit for the formatting.  The allowable units are `:second`, `:minute`,\n  `:hour`, `:day`, `:week`, `:month`, `:year`, `:mon`, `:tue`, `:wed`, `:thu`, `:fri`, `:sat`,\n  `:sun`, `:quarter`\n\n* `:relative_to` is the baseline Date or Datetime from which the difference from `relative` is\n  calculated when `relative` is a Date or a DateTime. The default for a Date is `Date.utc_today`,\n  for a DateTime it is `DateTime.utc_now`\n\n#","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string/2-options"},{"type":"function","title":"Notes - Klepsidra.Cldr.DateTime.Relative.to_string/2","doc":"When `options[:unit]` is not specified, `MyApp.Cldr.DateTime.Relative.to_string/2`\nattempts to identify the appropriate unit based upon the magnitude of `relative`.\nFor example, given a parameter of less than `60`, then `to_string/2` will\nassume `:seconds` as the unit.  See `unit_from_relative_time/1`.","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.DateTime.Relative.to_string/2","doc":"iex> Klepsidra.Cldr.DateTime.Relative.to_string(-1)\n    {:ok, \"1 second ago\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1)\n    {:ok, \"in 1 second\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1, unit: :day)\n    {:ok, \"tomorrow\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1, unit: :day, locale: \"fr\")\n    {:ok, \"demain\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1, unit: :day, style: :narrow)\n    {:ok, \"tomorrow\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1234, unit: :year)\n    {:ok, \"in 1,234 years\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(1234, unit: :year, locale: \"fr\")\n    {:ok, \"dans 1 234 ans\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(31)\n    {:ok, \"in 31 seconds\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(~D[2017-04-29], relative_to: ~D[2017-04-26])\n    {:ok, \"in 3 days\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(310, style: :short, locale: \"fr\")\n    {:ok, \"dans 5 min\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(310, style: :narrow, locale: \"fr\")\n    {:ok, \"+5 min\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string 2, unit: :wed, style: :short, locale: \"en\"\n    {:ok, \"in 2 Wed.\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string 1, unit: :wed, style: :short\n    {:ok, \"next Wed.\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string -1, unit: :wed, style: :short\n    {:ok, \"last Wed.\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string -1, unit: :wed\n    {:ok, \"last Wednesday\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string -1, unit: :quarter\n    {:ok, \"last quarter\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string -1, unit: :mon, locale: \"fr\"\n    {:ok, \"lundi dernier\"}\n\n    iex> Klepsidra.Cldr.DateTime.Relative.to_string(~D[2017-04-29], unit: :ziggeraut)\n    {:error, {Cldr.UnknownTimeUnit,\n     \"Unknown time unit :ziggeraut.  Valid time units are [:day, :fri, :hour, :minute, :mon, :month, :quarter, :sat, :second, :sun, :thu, :tue, :wed, :week, :year]\"}}","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.DateTime.Relative.to_string!/2","doc":"Returns a `{:ok, string}` representing a relative time (ago, in) for a given\nnumber, Date or Datetime or raises an exception on error.","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.DateTime.Relative.to_string!/2","doc":"* `relative` is a number or Date/Datetime representing the time distance from `now` or from\n  options[:relative_to].\n\n* `options` is a `Keyword` list of options.","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.DateTime.Relative.to_string!/2","doc":"* `:locale` is the locale in which the binary is formatted.\n  The default is `Cldr.get_locale/0`\n\n* `:style` is the format of the binary.  Style may be `:default`, `:narrow` or `:short`.\n  The default is `:default`\n\n* `:unit` is the time unit for the formatting.  The allowable units are `:second`, `:minute`,\n  `:hour`, `:day`, `:week`, `:month`, `:year`, `:mon`, `:tue`, `:wed`, `:thu`, `:fri`, `:sat`,\n  `:sun`, `:quarter`\n\n* `:relative_to` is the baseline Date or Datetime from which the difference from `relative` is\n  calculated when `relative` is a Date or a DateTime. The default for a Date is `Date.utc_today`,\n  for a DateTime it is `DateTime.utc_now`\n\nSee `to_string/2`","ref":"Klepsidra.Cldr.DateTime.Relative.html#to_string!/2-options"},{"type":"module","title":"Klepsidra.Cldr.Interval","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nThe interval functions in this library will determine the calendar\nfield with the greatest difference between the two datetimes before using the\nformat pattern.\n\nFor example, the greatest difference in \"Jan 10-12, 2008\" is the day field, while\nthe greatest difference in \"Jan 10 - Feb 12, 2008\" is the month field. This is used to\npick the exact pattern to be used.\n\nSee `Cldr.Interval` for further detail.","ref":"Klepsidra.Cldr.Interval.html"},{"type":"function","title":"Klepsidra.Cldr.Interval.to_string/2","doc":"Returns a `Date.Range` or `CalendarInterval` as\na localised string.","ref":"Klepsidra.Cldr.Interval.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Interval.to_string/2","doc":"* `range` is either a `Date.Range.t` returned from `Date.range/2`\n  or a `CalendarInterval.t`\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","ref":"Klepsidra.Cldr.Interval.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Interval.to_string/2","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If a style is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","ref":"Klepsidra.Cldr.Interval.html#to_string/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Interval.to_string/2","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Interval.html#to_string/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Interval.to_string/2","doc":"* `to_string/2` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval","ref":"Klepsidra.Cldr.Interval.html#to_string/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Interval.to_string/2","doc":"iex> use CalendarInterval\n    iex> Klepsidra.Cldr.Interval.to_string ~I\"2020-01-01/12\",\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string Date.range(~D[2020-01-01], ~D[2020-12-31]),\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Thu, Dec 31, 2020\"}","ref":"Klepsidra.Cldr.Interval.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Interval.to_string/3","doc":"Returns a string representing the formatted\ninterval formed by two dates.","ref":"Klepsidra.Cldr.Interval.html#to_string/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Interval.to_string/3","doc":"* `from` is any map that conforms to the\n  any one of the `Calendar` types.\n\n* `to` is any map that conforms to the\n  any one of the `Calendar` types. `to` must\n  occur on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","ref":"Klepsidra.Cldr.Interval.html#to_string/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Interval.to_string/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If styling is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","ref":"Klepsidra.Cldr.Interval.html#to_string/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Interval.to_string/3","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Interval.html#to_string/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Interval.to_string/3","doc":"* `to_string/2` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval.","ref":"Klepsidra.Cldr.Interval.html#to_string/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Interval.to_string/3","doc":"iex> Klepsidra.Cldr.Interval.to_string ~D[2020-01-01], ~D[2020-12-31]\n    {:ok, \"Jan 1 – Dec 31, 2020\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string ~D[2020-01-01], ~D[2020-01-12]\n    {:ok, \"Jan 1 – 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string ~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month\n    {:ok, \"January – December 2020\"}\n\n    iex> use CalendarInterval\n    iex> Klepsidra.Cldr.Interval.to_string ~I\"2020-01-01/12\",\n    ...> format: :long\n    {:ok, \"Wed, Jan 1 – Sun, Jan 12, 2020\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-12-01 10:05:00.0Z],\n    ...> format: :long\n    {:ok, \"January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC\"}\n\n    iex> Klepsidra.Cldr.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:05:00.0Z],\n    ...> format: :long\n    {:ok, \"January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC\"}","ref":"Klepsidra.Cldr.Interval.html#to_string/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Interval.to_string!/2","doc":"Returns a `Date.Range` or `CalendarInterval` as\na localised string or raises an exception.","ref":"Klepsidra.Cldr.Interval.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Interval.to_string!/2","doc":"* `range` is either a `Date.Range.t` returned from `Date.range/2`\n  or a `CalendarInterval.t`\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","ref":"Klepsidra.Cldr.Interval.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Interval.to_string!/2","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If a style is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`.\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","ref":"Klepsidra.Cldr.Interval.html#to_string!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Interval.to_string!/2","doc":"* `string` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Interval.html#to_string!/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Interval.to_string!/2","doc":"* `to_string/3` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Otherwise\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval","ref":"Klepsidra.Cldr.Interval.html#to_string!/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Interval.to_string!/2","doc":"iex> use CalendarInterval\n    iex> Klepsidra.Cldr.Interval.to_string! ~I\"2020-01-01/12\",\n    ...> format: :long\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! Date.range(~D[2020-01-01], ~D[2020-12-31]),\n    ...> format: :long\n    \"Wed, Jan 1 – Thu, Dec 31, 2020\"","ref":"Klepsidra.Cldr.Interval.html#to_string!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Interval.to_string!/3","doc":"Returns a string representing the formatted\ninterval formed by two date or raises an\nexception.","ref":"Klepsidra.Cldr.Interval.html#to_string!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Interval.to_string!/3","doc":"* `from` is any map that conforms to the\n  any one of the `Calendar` types.\n\n* `to` is any map that conforms to the\n  any one of the `Calendar` types. `to` must\n  occur on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :date | :time | nil]`.","ref":"Klepsidra.Cldr.Interval.html#to_string!/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Interval.to_string!/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The valid\n  styles depends on whether formatting is for a date, time or datetime.\n  Since the functions in this module will make a determination as\n  to which formatter to be used based upon the data passed to them\n  it is recommended the style option be omitted. If styling is important\n  then call `to_string/3` directly on `Cldr.Date.Interval`, `Cldr.Time.Interval`\n  or `Cldr.DateTime.Interval`.\n\n  * For a date the alternatives are `:date`, `:month_and_day`, `:month`\n    and `:year_and_month`. The default is `:date`.\n\n  * For a time the alternatives are `:time`, `:zone` and\n    `:flex`. The default is `:time`.\n\n  * For a datetime there are no style options, the default\n    for each of the date and time part is used.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.","ref":"Klepsidra.Cldr.Interval.html#to_string!/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Interval.to_string!/3","doc":"* `string` or\n\n* raises and exception","ref":"Klepsidra.Cldr.Interval.html#to_string!/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Interval.to_string!/3","doc":"* `to_string/3` will decide which formatter to call based upon\n  the arguments provided to it.\n\n  * A `Date.Range.t` will call `Cldr.Date.Interval.to_string/3`\n\n  * A `CalendarInterval` will call `Cldr.Date.Interval.to_string/3`\n    if its `:precision` is `:year`, `:month` or `:day`. Othersie\n    it will call `Cldr.Time.Interval.to_string/3`\n\n  * If `from` and `to` both conform to the `Calendar.datetime()`\n    type then `Cldr.DateTime.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.date()`\n    type then `Cldr.Date.Interval.to_string/3` is called\n\n  * Otherwise if `from` and `to` conform to the `Calendar.time()`\n    type then `Cldr.Time.Interval.to_string/3` is called\n\n* `CalendarInterval` support requires adding the\n  dependency [calendar_interval](https://hex.pm/packages/calendar_interval)\n  to the `deps` configuration in `mix.exs`.\n\n* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configuration locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  date, time or datetime is formatted instead of an interval.","ref":"Klepsidra.Cldr.Interval.html#to_string!/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Interval.to_string!/3","doc":"iex> Klepsidra.Cldr.Interval.to_string! ~D[2020-01-01], ~D[2020-12-31]\n    \"Jan 1 – Dec 31, 2020\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! ~D[2020-01-01], ~D[2020-01-12]\n    \"Jan 1 – 12, 2020\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! ~D[2020-01-01], ~D[2020-01-12],\n    ...> format: :long\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! ~D[2020-01-01], ~D[2020-12-01],\n    ...> format: :long, style: :year_and_month\n    \"January – December 2020\"\n\n    iex> use CalendarInterval\n    iex> Klepsidra.Cldr.Interval.to_string! ~I\"2020-01-01/12\",\n    ...> format: :long\n    \"Wed, Jan 1 – Sun, Jan 12, 2020\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-12-01 10:05:00.0Z],\n    ...> format: :long\n    \"January 1, 2020, 12:00:00 AM UTC – December 1, 2020, 10:05:00 AM UTC\"\n\n    iex> Klepsidra.Cldr.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:05:00.0Z],\n    ...> format: :long\n    \"January 1, 2020, 12:00:00 AM UTC – 10:05:00 AM UTC\"","ref":"Klepsidra.Cldr.Interval.html#to_string!/3-examples"},{"type":"module","title":"Klepsidra.Cldr.List","doc":"Cldr backend module that formats lists.\n\nIf we have a list of days like `[\"Monday\", \"Tuesday\", \"Wednesday\"]`\nthen we can format that list for a given locale by:\n\n    iex> Klepsidra.Cldr.List.to_string([\"Monday\", \"Tuesday\", \"Wednesday\"], locale: \"en\")\n    {:ok, \"Monday, Tuesday, and Wednesday\"}","ref":"Klepsidra.Cldr.List.html"},{"type":"function","title":"Klepsidra.Cldr.List.intersperse/2","doc":"Intersperces a list elements into a list format according to the list\npattern rules for a locale.\n\nThis function can be helpful when creating a list from `Phoenix`\nsafe strings which are of the format `{:safe, \"some string\"}`","ref":"Klepsidra.Cldr.List.html#intersperse/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.List.intersperse/2","doc":"* `list` is any list of of terms that can be passed through `Kernel.to_string/1`\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.List.html#intersperse/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.List.intersperse/2","doc":"* `:locale` is any configured locale. See . The default\n  is `Klepsidra.Cldr.known_locale_names/0`.\n\n* `:format` is one of those returned by\n  `Cldr.List.known_list_formats/0`. The default is `format: :standard`","ref":"Klepsidra.Cldr.List.html#intersperse/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.List.intersperse/2","doc":"iex> Klepsidra.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"en\")\n    {:ok, [\"a\", \", \", \"b\", \", and \", \"c\"]}\n\n    iex> Klepsidra.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    {:ok, [\"a\", \" \", \"b\", \" \", \"c\"]}\n\n    iex> Klepsidra.Cldr.List.intersperse([\"a\", \"b\", \"c\"], locale: \"fr\")\n    {:ok, [\"a\", \", \", \"b\", \" et \", \"c\"]}\n\n    iex> Klepsidra.Cldr.List.intersperse([1,2,3,4,5,6])\n    {:ok, [1, \", \", 2, \", \", 3, \", \", 4, \", \", 5, \", and \", 6]}\n\n    iex> Klepsidra.Cldr.List.intersperse([\"a\"])\n    {:ok, [\"a\"]}\n\n    iex> Klepsidra.Cldr.List.intersperse([1,2])\n    {:ok, [1, \" and \", 2]}","ref":"Klepsidra.Cldr.List.html#intersperse/2-examples"},{"type":"function","title":"Klepsidra.Cldr.List.intersperse/3","doc":"","ref":"Klepsidra.Cldr.List.html#intersperse/3"},{"type":"function","title":"Klepsidra.Cldr.List.intersperse!/2","doc":"Formats a list using `intersperse/2` but raises if there is\nan error.","ref":"Klepsidra.Cldr.List.html#intersperse!/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.List.intersperse!/2","doc":"iex> Klepsidra.Cldr.List.intersperse!([\"a\", \"b\", \"c\"], locale: \"en\")\n    [\"a\", \", \", \"b\", \", and \", \"c\"]\n\n    iex> Klepsidra.Cldr.List.intersperse!([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    [\"a\", \" \", \"b\", \" \", \"c\"]","ref":"Klepsidra.Cldr.List.html#intersperse!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.List.list_formats_for/1","doc":"Returns the styles of list patterns available for a locale.\n\nReturns a list of `atom`s of of the list formats that are\navailable in CLDR for a locale.","ref":"Klepsidra.Cldr.List.html#list_formats_for/1"},{"type":"function","title":"Example - Klepsidra.Cldr.List.list_formats_for/1","doc":"iex> Klepsidra.Cldr.List.list_formats_for(:en)\n    [:or, :or_narrow, :or_short, :standard, :standard_narrow, :standard_short,\n     :unit, :unit_narrow, :unit_short]","ref":"Klepsidra.Cldr.List.html#list_formats_for/1-example"},{"type":"function","title":"Klepsidra.Cldr.List.list_patterns_for/1","doc":"Returns the list patterns for a locale.\n\nList patterns provide rules for combining multiple\nitems into a language format appropriate for a locale.","ref":"Klepsidra.Cldr.List.html#list_patterns_for/1"},{"type":"function","title":"Example - Klepsidra.Cldr.List.list_patterns_for/1","doc":"iex> Klepsidra.Cldr.List.list_patterns_for(:en)\n    %{\n      or: %{\n        2 => [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      or_narrow: %{\n        2 => [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      or_short: %{\n        2 => [0, \" or \", 1],\n        end: [0, \", or \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard: %{\n        2 => [0, \" and \", 1],\n        end: [0, \", and \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard_narrow: %{\n        2 => [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      standard_short: %{\n        2 => [0, \" & \", 1],\n        end: [0, \", & \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      unit: %{\n        2 => [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      },\n      unit_narrow: %{\n        2 => [0, \" \", 1],\n        end: [0, \" \", 1],\n        middle: [0, \" \", 1],\n        start: [0, \" \", 1]\n      },\n      unit_short: %{\n        2 => [0, \", \", 1],\n        end: [0, \", \", 1],\n        middle: [0, \", \", 1],\n        start: [0, \", \", 1]\n      }\n    }","ref":"Klepsidra.Cldr.List.html#list_patterns_for/1-example"},{"type":"function","title":"Klepsidra.Cldr.List.to_string/2","doc":"Formats a list into a string according to the list pattern rules for a locale.","ref":"Klepsidra.Cldr.List.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.List.to_string/2","doc":"* `list` is any list of of terms that can be passed through `Kernel.to_string/1`\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.List.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.List.to_string/2","doc":"* `:locale` is any configured locale. See . The default\n  is `Klepsidra.Cldr.known_locale_names/0`.\n\n* `:format` is one of those returned by\n  `Cldr.List.known_list_formats/0`. The default is `format: :standard`","ref":"Klepsidra.Cldr.List.html#to_string/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.List.to_string/2","doc":"iex> Klepsidra.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"en\")\n    {:ok, \"a, b, and c\"}\n\n    iex> Klepsidra.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    {:ok, \"a b c\"}\n\n    iex> Klepsidra.Cldr.List.to_string([\"a\", \"b\", \"c\"], locale: \"fr\")\n    {:ok, \"a, b et c\"}\n\n    iex> Klepsidra.Cldr.List.to_string([1,2,3,4,5,6])\n    {:ok, \"1, 2, 3, 4, 5, and 6\"}\n\n    iex> Klepsidra.Cldr.List.to_string([\"a\"])\n    {:ok, \"a\"}\n\n    iex> Klepsidra.Cldr.List.to_string([1,2])\n    {:ok, \"1 and 2\"}","ref":"Klepsidra.Cldr.List.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.List.to_string!/2","doc":"Formats a list using `to_string/2` but raises if there is\nan error.","ref":"Klepsidra.Cldr.List.html#to_string!/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.List.to_string!/2","doc":"iex> Klepsidra.Cldr.List.to_string!([\"a\", \"b\", \"c\"], locale: \"en\")\n    \"a, b, and c\"\n\n    iex> Klepsidra.Cldr.List.to_string!([\"a\", \"b\", \"c\"], locale: \"en\", format: :unit_narrow)\n    \"a b c\"","ref":"Klepsidra.Cldr.List.html#to_string!/2-examples"},{"type":"module","title":"Klepsidra.Cldr.Locale","doc":"Backend module that provides functions\nto define new locales and display human-readable\nlocale names for presentation purposes.","ref":"Klepsidra.Cldr.Locale.html"},{"type":"function","title":"Klepsidra.Cldr.Locale.fallback_locale_names/1","doc":"Returns the list of fallback locale names, starting\nwith the provided locale name.\n\nFallbacks are a list of locate names which can\nbe used to resolve translation or other localization\ndata if such localised data does not exist for\nthis specific locale..","ref":"Klepsidra.Cldr.Locale.html#fallback_locale_names/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.fallback_locale_names/1","doc":"* `locale_name` is any locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.Locale.html#fallback_locale_names/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.fallback_locale_names/1","doc":"* `{:ok, list_of_locale_names}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Locale.html#fallback_locale_names/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.fallback_locale_names/1","doc":"iex> Klepsidra.Cldr.Locale.fallback_locale_names(:\"fr-CA\")\n    {:ok, [:\"fr-CA\", :fr, :und]}\n\n    # Fallbacks are typically formed by progressively\n    # stripping variant, territory and script from the\n    # given locale name. But not always - there are\n    # certain fallbacks that take a different path.\n\n    iex> Klepsidra.Cldr.Locale.fallback_locale_names(:nb)\n    {:ok, [:nb, :no, :und]}","ref":"Klepsidra.Cldr.Locale.html#fallback_locale_names/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.fallback_locales/1","doc":"Returns the list of fallback locales, starting\nwith the provided locale name.\n\nFallbacks are a list of locate names which can\nbe used to resolve translation or other localization\ndata if such localised data does not exist for\nthis specific locale.","ref":"Klepsidra.Cldr.Locale.html#fallback_locales/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.fallback_locales/1","doc":"* `locale_name` is any locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.Locale.html#fallback_locales/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.fallback_locales/1","doc":"* `{:ok, list_of_locales}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Locale.html#fallback_locales/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.fallback_locales/1","doc":"Klepsidra.Cldr.Locale.fallback_locales(:\"fr-CA\")\n    => {:ok,\n         [#Cldr.LanguageTag , #Cldr.LanguageTag ,\n          #Cldr.LanguageTag ]}\n\n    # Fallbacks are typically formed by progressively\n    # stripping variant, territory and script from the\n    # given locale name. But not always - there are\n    # certain fallbacks that take a different path.\n\n    Klepsidra.Cldr.Locale.fallback_locales(:nb))\n    => {:ok,\n         [#Cldr.LanguageTag , #Cldr.LanguageTag ,\n          #Cldr.LanguageTag ]}","ref":"Klepsidra.Cldr.Locale.html#fallback_locales/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.locale_for_territory/1","doc":"Returns the \"best fit\" locale for a given territory.\n\nUsing the population percentage data from CLDR, the\nlanguage most commonly spoken in the given territory\nis used to form a locale name which is then validated\nagainst the given backend.\n\nFirst a territory-specific locale is validated and if\nthat fails, the base language only is validate.\n\nFor example, if the territory is `AU` then then the\nlanguage most spoken is \"en\". First, the locale \"en-AU\"\nis validated and if that fails, \"en\" is validated.","ref":"Klepsidra.Cldr.Locale.html#locale_for_territory/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.locale_for_territory/1","doc":"* `territory` is any ISO 3166 Alpha-2 territory\n  code that can be validated by `Cldr.validate_territory/1`","ref":"Klepsidra.Cldr.Locale.html#locale_for_territory/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.locale_for_territory/1","doc":"* `{:ok, language_tag}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Locale.html#locale_for_territory/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.locale_for_territory/1","doc":"iex> Klepsidra.Cldr.Locale.locale_for_territory(:AU)\n  Elixir.Klepsidra.Cldr.validate_locale(:\"en-AU\")\n\n  iex> Klepsidra.Cldr.Locale.locale_for_territory(:US)\n  Elixir.Klepsidra.Cldr.validate_locale(:\"en-US\")\n\n  iex> Klepsidra.Cldr.Locale.locale_for_territory(:ZZ)\n  {:error, {Cldr.UnknownTerritoryError, \"The territory :ZZ is unknown\"}}","ref":"Klepsidra.Cldr.Locale.html#locale_for_territory/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.locale_from_host/2","doc":"Returns a \"best fit\" locale for a host name.","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.locale_from_host/2","doc":"* `host` is any valid host name\n\n* `options` is a keyword list of options. The default\n  is `[]`.","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Locale.locale_from_host/2","doc":"* `:tlds` is a list of territory codes as upper-cased\n  atoms that are to be considered as top-level domains.\n  See `Cldr.Locale.locale_from_host/2` for the default\n  list.","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.locale_from_host/2","doc":"* `{:ok, langauge_tag}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Locale.locale_from_host/2","doc":"Certain top-level domains have become associated with content\nunderlated to the territory for who the domain is registered.\nTherefore Google (and perhaps others) do not associate these\nTLDs as belonging to the territory but rather are considered\ngeneric top-level domain names.","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.locale_from_host/2","doc":"iex> Klepsidra.Cldr.Locale.locale_from_host \"a.b.com.au\"\n    Elixir.Klepsidra.Cldr.validate_locale(:\"en-AU\")\n\n    iex> Klepsidra.Cldr.Locale.locale_from_host(\"a.b.com.tv\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"tv\\\"\"}}\n\n    iex> Klepsidra.Cldr.Locale.locale_from_host(\"a.b.com\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"com\\\"\"}}","ref":"Klepsidra.Cldr.Locale.html#locale_from_host/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.new/1","doc":"","ref":"Klepsidra.Cldr.Locale.html#new/1"},{"type":"function","title":"Klepsidra.Cldr.Locale.new!/1","doc":"","ref":"Klepsidra.Cldr.Locale.html#new!/1"},{"type":"function","title":"Klepsidra.Cldr.Locale.script_direction_from_locale/1","doc":"Returns the script direction for a locale.","ref":"Klepsidra.Cldr.Locale.html#script_direction_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.script_direction_from_locale/1","doc":"* `language_tag` is any language tag returned by `Cldr.Locale.new/2`\n  or any `locale_name` returned by `Cldr.known_locale_names/1`.","ref":"Klepsidra.Cldr.Locale.html#script_direction_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.script_direction_from_locale/1","doc":"* The script direction which is either `:ltr` (for left-to-right\n  scripts) or `:rtl` (for right-to-left scripts).","ref":"Klepsidra.Cldr.Locale.html#script_direction_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.script_direction_from_locale/1","doc":"iex> Klepsidra.Cldr.Locale.script_direction_from_locale \"en-US\"\n    :ltr\n\n    iex> Klepsidra.Cldr.Locale.script_direction_from_locale :ar\n    :rtl","ref":"Klepsidra.Cldr.Locale.html#script_direction_from_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.territory_from_host/1","doc":"Returns the last segment of a host that might\nbe a territory.","ref":"Klepsidra.Cldr.Locale.html#territory_from_host/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.territory_from_host/1","doc":"* `host` is any valid host name","ref":"Klepsidra.Cldr.Locale.html#territory_from_host/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.territory_from_host/1","doc":"* `{:ok, territory}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Locale.html#territory_from_host/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.territory_from_host/1","doc":"iex> Cldr.Locale.territory_from_host(\"a.b.com.au\")\n    {:ok, :AU}\n\n    iex> Cldr.Locale.territory_from_host(\"a.b.com\")\n    {:error,\n     {Cldr.UnknownLocaleError, \"No locale was identified for territory \\\"com\\\"\"}}","ref":"Klepsidra.Cldr.Locale.html#territory_from_host/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.territory_from_locale/1","doc":"Returns the territory from a language tag or\nlocale name.","ref":"Klepsidra.Cldr.Locale.html#territory_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.territory_from_locale/1","doc":"* `locale` is any language tag returned by\n  `Klepsidra.Cldr.Locale.new/1`\n  or a locale name in the list returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.Locale.html#territory_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.territory_from_locale/1","doc":"* A territory code as an atom","ref":"Klepsidra.Cldr.Locale.html#territory_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.territory_from_locale/1","doc":"iex> Klepsidra.Cldr.Locale.territory_from_locale \"en-US\"\n    :US\n\n    iex> Klepsidra.Cldr.Locale.territory_from_locale \"en-US-u-rg-GBzzzz\"\n    :GB","ref":"Klepsidra.Cldr.Locale.html#territory_from_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Locale.timezone_from_locale/1","doc":"Returns the time zone from a language tag or\nlocale name.","ref":"Klepsidra.Cldr.Locale.html#timezone_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Locale.timezone_from_locale/1","doc":"* `locale` is any language tag returned by\n  `Klepsidra.Cldr.Locale.new/1`\n  or a locale name in the list returned by\n  `Klepsidra.Cldr.known_locale_names/0`","ref":"Klepsidra.Cldr.Locale.html#timezone_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Locale.timezone_from_locale/1","doc":"* A time zone ID as a string or\n\n* `:error` if no time zone can be determined","ref":"Klepsidra.Cldr.Locale.html#timezone_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Locale.timezone_from_locale/1","doc":"iex> Klepsidra.Cldr.Locale.timezone_from_locale \"en-US-u-tz-ausyd\"\n    \"Australia/Sydney\"","ref":"Klepsidra.Cldr.Locale.html#timezone_from_locale/1-examples"},{"type":"module","title":"Klepsidra.Cldr.Number","doc":"Formats numbers and currencies based upon CLDR's decimal formats specification.\n\nThe format specification is documentated in [Unicode TR35](http://unicode.org/reports/tr35/tr35-numbers.html#Number_Formats).\nThere are several classes of formatting including non-scientific, scientific,\nrules based (for spelling and ordinal formats), compact formats that display `1k`\nrather than `1,000` and so on.  See `Cldr.Number.to_string/2` for specific formatting\noptions.\n\n#","ref":"Klepsidra.Cldr.Number.html"},{"type":"module","title":"Non-Scientific Notation Formatting - Klepsidra.Cldr.Number","doc":"The following description applies to formats that do not use scientific\nnotation or significant digits:\n\n* If the number of actual integer digits exceeds the maximum integer digits,\n  then only the least significant digits are shown. For example, 1997 is\n  formatted as \"97\" if the maximum integer digits is set to 2.\n\n* If the number of actual integer digits is less than the minimum integer\n  digits, then leading zeros are added. For example, 1997 is formatted as\n  \"01997\" if the minimum integer digits is set to 5.\n\n* If the number of actual fraction digits exceeds the maximum fraction\n  digits, then half-even rounding it performed to the maximum fraction\n  digits. For example, 0.125 is formatted as \"0.12\" if the maximum fraction\n  digits is 2. This behavior can be changed by specifying a rounding\n  increment and a rounding mode.\n\n* If the number of actual fraction digits is less than the minimum fraction\n  digits, then trailing zeros are added. For example, 0.125 is formatted as\n  \"0.1250\" if the minimum fraction digits is set to 4.\n\n* Trailing fractional zeros are not displayed if they occur j positions after\n  the decimal, where j is less than the maximum fraction digits. For example,\n  0.10004 is formatted as \"0.1\" if the maximum fraction digits is four or\n  less.\n\n#","ref":"Klepsidra.Cldr.Number.html#module-non-scientific-notation-formatting"},{"type":"module","title":"Scientific Notation Formatting - Klepsidra.Cldr.Number","doc":"Numbers in scientific notation are expressed as the product of a mantissa and\na power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The\nmantissa is typically in the half-open interval [1.0, 10.0) or sometimes\n[0.0, 1.0), but it need not be. In a pattern, the exponent character\nimmediately followed by one or more digit characters indicates scientific\nnotation. Example: \"0.###E0\" formats the number 1234 as \"1.234E3\".\n\n* The number of digit characters after the exponent character gives the\n  minimum exponent digit count. There is no maximum. Negative exponents are\n  formatted using the localized minus sign, not the prefix and suffix from\n  the pattern. This allows patterns such as \"0.###E0 m/s\". To prefix positive\n  exponents with a localized plus sign, specify '+' between the exponent and\n  the digits: \"0.###E+0\" will produce formats \"1E+1\", \"1E+0\", \"1E-1\", and so\n  on. (In localized patterns, use the localized plus sign rather than '+'.)\n\n* The minimum number of integer digits is achieved by adjusting the exponent.\n  Example: 0.00123 formatted with \"00.###E0\" yields \"12.3E-4\". This only\n  happens if there is no maximum number of integer digits. If there is a\n  maximum, then the minimum number of integer digits is fixed at one.\n\n* The maximum number of integer digits, if present, specifies the exponent\n  grouping. The most common use of this is to generate engineering notation,\n  in which the exponent is a multiple of three, for example, \"##0.###E0\". The\n  number 12345 is formatted using \"##0.####E0\" as \"12.345E3\".\n\n* When using scientific notation, the formatter controls the digit counts\n  using significant digits logic. The maximum number of significant digits\n  limits the total number of integer and fraction digits that will be shown\n  in the mantissa; it does not affect parsing. For example, 12345 formatted\n  with \"##0.##E0\" is \"12.3E3\". Exponential patterns may not contain grouping\n  separators.\n\n#","ref":"Klepsidra.Cldr.Number.html#module-scientific-notation-formatting"},{"type":"module","title":"Significant Digits - Klepsidra.Cldr.Number","doc":"There are two ways of controlling how many digits are shows: (a)\nsignificant digits counts, or (b) integer and fraction digit counts. Integer\nand fraction digit counts are described above. When a formatter is using\nsignificant digits counts, it uses however many integer and fraction digits\nare required to display the specified number of significant digits. It may\nignore min/max integer/fraction digits, or it may use them to the extent\npossible.","ref":"Klepsidra.Cldr.Number.html#module-significant-digits"},{"type":"function","title":"Klepsidra.Cldr.Number.parse/2","doc":"Parse a string locale-aware manner and return\na number.","ref":"Klepsidra.Cldr.Number.html#parse/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.parse/2","doc":"* `string` is any `String.t`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#parse/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.parse/2","doc":"* `:number` is one of `:integer`, `:float`,\n  `:decimal` or `nil`. The default is `nil`\n  meaning that the type auto-detected as either\n  an `integer` or a `float`.\n\n* `:locale` is any locale returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag.t`. The default is\n  `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.html#parse/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.parse/2","doc":"* A number of the requested or default type or\n\n* `{:error, {exception, error}}` if no number could be determined","ref":"Klepsidra.Cldr.Number.html#parse/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Number.parse/2","doc":"This function parses a string to return a number but\nin a locale-aware manner. It will normalise grouping\ncharacters and decimal separators, different forms of\nthe `+` and `-` symbols that appear in Unicode and\nstrips any `_` characters that might be used for\nformatting in a string. It then parses the number\nusing the Elixir standard library functions.","ref":"Klepsidra.Cldr.Number.html#parse/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.parse/2","doc":"iex> Klepsidra.Cldr.Number.parse(\"＋1.000,34\", locale: \"de\")\n    {:ok, 1000.34}\n\n    iex> Klepsidra.Cldr.Number.parse(\"-1_000_000.34\")\n    {:ok, -1000000.34}\n\n    iex> Klepsidra.Cldr.Number.parse(\"1.000\", locale: \"de\", number: :integer)\n    {:ok, 1000}\n\n    iex> Klepsidra.Cldr.Number.parse(\"＋1.000,34\", locale: \"de\", number: :integer)\n    {:error,\n      {Cldr.Number.ParseError,\n       \"The string \\\"＋1.000,34\\\" could not be parsed as a number\"}}","ref":"Klepsidra.Cldr.Number.html#parse/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.resolve_currencies/2","doc":"Resolve curencies from strings within\na list.","ref":"Klepsidra.Cldr.Number.html#resolve_currencies/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.resolve_currencies/2","doc":"* `list` is any list in which currency\n  names and symbols are expected\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#resolve_currencies/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.resolve_currencies/2","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `Klepsidra.Cldr.get_locale()`\n\n* `:only` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be considered for a match.\n  The equates to a list of acceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:except` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be not considered for a match.\n  This equates to a list of unacceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:fuzzy` is a float greater than `0.0` and less than or\n  equal to `1.0` which is used as input to\n  `String.jaro_distance/2` to determine is the provided\n  currency string is *close enough* to a known currency\n  string for it to identify definitively a currency code.\n  It is recommended to use numbers greater than `0.8` in\n  order to reduce false positives.","ref":"Klepsidra.Cldr.Number.html#resolve_currencies/2-options"},{"type":"function","title":"Notes - Klepsidra.Cldr.Number.resolve_currencies/2","doc":"The `:only` and `:except` options accept a list of\ncurrency codes and/or currency types.  The following\ntypes are recognised.\n\nIf both `:only` and `:except` are specified,\nthe `:except` entries take priority - that means\nany entries in `:except` are removed from the `:only`\nentries.\n\n  * `:all`, the default, considers all currencies\n\n  * `:current` considers those currencies that have a `:to`\n    date of nil and which also is a known ISO4217 currency\n\n  * `:historic` is the opposite of `:current`\n\n  * `:tender` considers currencies that are legal tender\n\n  * `:unannotated` considers currencies that don't have\n    \"(some string)\" in their names.  These are usually\n    financial instruments.","ref":"Klepsidra.Cldr.Number.html#resolve_currencies/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.resolve_currencies/2","doc":"iex> Klepsidra.Cldr.Number.scan(\"100 US dollars\")\n    ...> |> Klepsidra.Cldr.Number.resolve_currencies\n    [100, :USD]\n\n    iex> Klepsidra.Cldr.Number.scan(\"100 eurosports\")\n    ...> |> Klepsidra.Cldr.Number.resolve_currencies(fuzzy: 0.75)\n    [100, :EUR]\n\n    iex> Klepsidra.Cldr.Number.scan(\"100 dollars des États-Unis\")\n    ...> |> Klepsidra.Cldr.Number.resolve_currencies(locale: \"fr\")\n    [100, :USD]","ref":"Klepsidra.Cldr.Number.html#resolve_currencies/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.resolve_currency/2","doc":"Resolve a currency from a string","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.resolve_currency/2","doc":"* `list` is any list in which currency\n  names and symbols are expected\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.resolve_currency/2","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `Klepsidra.Cldr.get_locale()`\n\n* `:only` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be considered for a match.\n  The equates to a list of acceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:except` is an `atom` or list of `atoms` representing the\n  currencies or currency types to be not considered for a match.\n  This equates to a list of unacceptable currencies for parsing.\n  See the notes below for currency types.\n\n* `:fuzzy` is a float greater than `0.0` and less than or\n  equal to `1.0` which is used as input to\n  `String.jaro_distance/2` to determine is the provided\n  currency string is *close enough* to a known currency\n  string for it to identify definitively a currency code.\n  It is recommended to use numbers greater than `0.8` in\n  order to reduce false positives.","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.resolve_currency/2","doc":"* An ISO4217 currency code as an atom or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Number.resolve_currency/2","doc":"The `:only` and `:except` options accept a list of\ncurrency codes and/or currency types.  The following\ntypes are recognised.\n\nIf both `:only` and `:except` are specified,\nthe `:except` entries take priority - that means\nany entries in `:except` are removed from the `:only`\nentries.\n\n  * `:all`, the default, considers all currencies\n\n  * `:current` considers those currencies that have a `:to`\n    date of nil and which also is a known ISO4217 currency\n\n  * `:historic` is the opposite of `:current`\n\n  * `:tender` considers currencies that are legal tender\n\n  * `:unannotated` considers currencies that don't have\n    \"(some string)\" in their names.  These are usually\n    financial instruments.","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.resolve_currency/2","doc":"iex> Klepsidra.Cldr.Number.resolve_currency(\"US dollars\")\n    [:USD]\n\n    iex> Klepsidra.Cldr.Number.resolve_currency(\"100 eurosports\", fuzzy: 0.75)\n    [:EUR]\n\n    iex> Klepsidra.Cldr.Number.resolve_currency(\"dollars des États-Unis\", locale: \"fr\")\n    [:USD]\n\n    iex> Klepsidra.Cldr.Number.resolve_currency(\"not a known currency\", locale: \"fr\")\n    {:error,\n     {Cldr.UnknownCurrencyError,\n      \"The currency \\\"not a known currency\\\" is unknown or not supported\"}}","ref":"Klepsidra.Cldr.Number.html#resolve_currency/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.resolve_per/2","doc":"Resolve and tokenize percent or permille\nfrom the beginning and/or the end of a string","ref":"Klepsidra.Cldr.Number.html#resolve_per/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.resolve_per/2","doc":"* `list` is any list in which percent\n  and permille symbols are expected\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#resolve_per/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.resolve_per/2","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `options[:backend].get_locale()`","ref":"Klepsidra.Cldr.Number.html#resolve_per/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.resolve_per/2","doc":"* An `:percent` or `permille` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.html#resolve_per/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.resolve_per/2","doc":"iex> Klepsidra.Cldr.Number.resolve_per \"11%\"\n    [\"11\", :percent]\n\n    iex> Klepsidra.Cldr.Number.resolve_per \"% of linguists\"\n    [:percent, \" of linguists\"]\n\n    iex> Klepsidra.Cldr.Number.resolve_per \"% of linguists %\"\n    [:percent, \" of linguists \", :percent]","ref":"Klepsidra.Cldr.Number.html#resolve_per/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.resolve_pers/2","doc":"Resolve and tokenize percent and permille\nsybols from strings within a list.\n\nPercent and permille symbols can be identified\nat the beginning and/or the end of a string.","ref":"Klepsidra.Cldr.Number.html#resolve_pers/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.resolve_pers/2","doc":"* `list` is any list in which percent and\n  permille symbols are expected\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#resolve_pers/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.resolve_pers/2","doc":"* `:locale` is any valid locale returned by `Cldr.known_locale_names/1`\n  or a `t:Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n  The default is `options[:backend].get_locale()`","ref":"Klepsidra.Cldr.Number.html#resolve_pers/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.resolve_pers/2","doc":"iex> Klepsidra.Cldr.Number.scan(\"100%\")\n    ...> |> Klepsidra.Cldr.Number.resolve_pers()\n    [100, :percent]","ref":"Klepsidra.Cldr.Number.html#resolve_pers/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.scan/2","doc":"Scans a string locale-aware manner and returns\na list of strings and numbers.","ref":"Klepsidra.Cldr.Number.html#scan/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.scan/2","doc":"* `string` is any `String.t`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Number.html#scan/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.scan/2","doc":"* `:number` is one of `:integer`, `:float`,\n  `:decimal` or `nil`. The default is `nil`\n  meaning that the type auto-detected as either\n  an `integer` or a `float`.\n\n* `:locale` is any locale returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag.t`. The default is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.html#scan/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.scan/2","doc":"* A list of strings and numbers","ref":"Klepsidra.Cldr.Number.html#scan/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Number.scan/2","doc":"Number parsing is performed by `Cldr.Number.Parser.parse/2`\nand any options provided are passed to that function.","ref":"Klepsidra.Cldr.Number.html#scan/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.scan/2","doc":"iex> Klepsidra.Cldr.Number.scan(\"£1_000_000.34\")\n    [\"£\", 1000000.34]\n\n    iex> Klepsidra.Cldr.Number.scan(\"I want £1_000_000 dollars\")\n    [\"I want £\", 1000000, \" dollars\"]\n\n    iex> Klepsidra.Cldr.Number.scan(\"The prize is 23\")\n    [\"The prize is \", 23]\n\n    iex> Klepsidra.Cldr.Number.scan(\"The lottery number is 23 for the next draw\")\n    [\"The lottery number is \", 23, \" for the next draw\"]\n\n    iex> Klepsidra.Cldr.Number.scan(\"The loss is -1.000 euros\", locale: \"de\", number: :integer)\n    [\"The loss is \", -1000, \" euros\"]","ref":"Klepsidra.Cldr.Number.html#scan/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.to_approx_string/2","doc":"Formats a number and applies the `:approximately` format for\na locale and number system.","ref":"Klepsidra.Cldr.Number.html#to_approx_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_approx_string/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","ref":"Klepsidra.Cldr.Number.html#to_approx_string/2-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.to_approx_string/2","doc":"iex> Klepsidra.Cldr.Number.to_approx_string 1234\n    {:ok, \"~1,234\"}","ref":"Klepsidra.Cldr.Number.html#to_approx_string/2-example"},{"type":"function","title":"Klepsidra.Cldr.Number.to_at_least_string/2","doc":"Formats a number and applies the `:at_least` format for\na locale and number system.","ref":"Klepsidra.Cldr.Number.html#to_at_least_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_at_least_string/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Klepsidra.Cldr.Number.to_string/2` for a description of the available\n  options.","ref":"Klepsidra.Cldr.Number.html#to_at_least_string/2-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.to_at_least_string/2","doc":"iex> Klepsidra.Cldr.Number.to_at_least_string 1234\n    {:ok, \"1,234+\"}","ref":"Klepsidra.Cldr.Number.html#to_at_least_string/2-example"},{"type":"function","title":"Klepsidra.Cldr.Number.to_at_most_string/2","doc":"Formats a number and applies the `:at_most` format for\na locale and number system.","ref":"Klepsidra.Cldr.Number.html#to_at_most_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_at_most_string/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","ref":"Klepsidra.Cldr.Number.html#to_at_most_string/2-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.to_at_most_string/2","doc":"iex> Klepsidra.Cldr.Number.to_at_most_string 1234\n    {:ok, \"≤1,234\"}","ref":"Klepsidra.Cldr.Number.html#to_at_most_string/2-example"},{"type":"function","title":"Klepsidra.Cldr.Number.to_range_string/2","doc":"Formats the first and last numbers of a range and applies\nthe `:range` format for a locale and number system.","ref":"Klepsidra.Cldr.Number.html#to_range_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_range_string/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.\n  See `Cldr.Number.to_string/3` for a description of the available\n  options.","ref":"Klepsidra.Cldr.Number.html#to_range_string/2-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.to_range_string/2","doc":"iex> Klepsidra.Cldr.Number.to_range_string 1234..5678\n    {:ok, \"1,234–5,678\"}","ref":"Klepsidra.Cldr.Number.html#to_range_string/2-example"},{"type":"function","title":"Klepsidra.Cldr.Number.to_string/2","doc":"Returns a number formatted into a string according to a format pattern and options.","ref":"Klepsidra.Cldr.Number.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_string/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted.","ref":"Klepsidra.Cldr.Number.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.to_string/2","doc":"* `format`: the format style or a format string defining how the number is\n  formatted. See `Cldr.Number.Format` for how format strings can be constructed.\n  See `Cldr.Number.Format.format_styles_for/3` to return available format styles\n  for a locale. The default `format` is `:standard`.\n\n* If `:format` is set to `:long` or `:short` then the formatting depends on\n  whether `:currency` is specified. If not specified then the number is\n  formatted as `:decimal_long` or `:decimal_short`. If `:currency` is\n  specified the number is formatted as `:currency_long` or\n  `:currency_short` and `:fractional_digits` is set to 0 as a default.\n\n* `:format` may also be a format defined by CLDR's Rules Based Number\n  Formats (RBNF).  Further information is found in the module `Cldr.Rbnf`.\n  The most commonly used formats in this category are to spell out the\n  number in a the locales language.  The applicable formats are `:spellout`,\n  `:spellout_year`, `:ordinal`.  A number can also be formatted as roman\n  numbers by using the format `:roman` or `:roman_lower`.\n\n* `currency`: is the currency for which the number is formatted. For\n  available currencies see `Cldr.Currency.known_currencies/0`. This option\n  is required if `:format` is set to `:currency`.  If `currency` is set\n  and no `:format` is set, `:format` will be set to `:currency` as well.\n\n* `currency_symbol`: Allows overriding a currency symbol. The alternatives\n  are:\n  * `:iso` the ISO currency code will be used instead of the default\n    currency symbol.\n  * `:narrow` uses the narrow symbol defined for the locale. The same\n    narrow symbol can be defined for more than one currency and therefore this\n    should be used with care. If no narrow symbol is defined, the standard\n    symbol is used.\n  * `:symbol` uses the standard symbol defined in CLDR. A symbol is unique\n    for each currency and can be safely used.\n  * \"string\" uses `string` as the currency symbol\n  * `:standard` (the default and recommended) uses the CLDR-defined symbol\n    based upon the currency format for the locale.\n\n* `:cash`: a boolean which indicates whether a number being formatted as a\n  `:currency` is to be considered a cash value or not. Currencies can be\n  rounded differently depending on whether `:cash` is `true` or `false`.\n  *This option is deprecated in favour of `currency_digits: :cash`.\n\n* `:currency_digits` indicates which of the rounding and digits should be\n  used. The options are `:accounting` which is the default, `:cash` or\n  `:iso`\n\n* `:rounding_mode`: determines how a number is rounded to meet the precision\n  of the format requested. The available rounding modes are `:down`,\n  :half_up, :half_even, :ceiling, :floor, :half_down, :up. The default is\n  `:half_even`.\n\n* `:number_system`: determines which of the number systems for a locale\n  should be used to define the separators and digits for the formatted\n  number. If `number_system` is an `atom` then `number_system` is\n  interpreted as a number system. If the `:number_system` is\n  `binary` then it is interpreted as a number system name. See\n  `Cldr.Number.System.number_system_names_for/2`. The default is `:default`.\n\n* `:locale`: determines the locale in which the number is formatted. See\n  `Cldr.known_locale_names/0`. The default is`Cldr.get_locale/0` which is the\n  locale currently in affect for this `Process` and which is set by\n  `Cldr.put_locale/1`.\n\n* If `:fractional_digits` is set to a positive integer value then the number\n  will be rounded to that number of digits and displayed accordingly - overriding\n  settings that would be applied by default.  For example, currencies have\n  fractional digits defined reflecting each currencies minor unit.  Setting\n  `:fractional_digits` will override that setting.\n\n* If `:maximum_integer_digits` is set to a positive integer value then the\n  number is left truncated before formatting. For example if the number `1234`\n  is formatted with the option `maximum_integer_digits: 2`, the number is\n  truncated to `34` and formatted.\n\n* If `:round_nearest` is set to a positive integer value then the number\n  will be rounded to nearest increment of that value - overriding\n  settings that would be applied by default.\n\n* `:minimum_grouping_digits` overrides the CLDR definition of minimum grouping\n  digits. For example in the locale `es` the number `1234` is formatted by default\n  as `1345` because the locale defines the `minimium_grouping_digits` as `2`. If\n  `minimum_grouping_digits: 1` is set as an option the number is formatting as\n  `1.345`. The `:minimum_grouping_digits` is added to the grouping defined by\n  the number format.  If the sum of these two digits is greater than the number\n  of digits in the integer (or fractional) part of the number then no grouping\n  is performed.\n\n* `:wrapper` is a 2-arity function that will be called for each number component\n  with parameters `string` and `tag` where `tag` is one of `:number`,\n  `:currency_symbol`, `:currency_space`, `:literal`, `:quote`, `:percent`,\n  `:permille`, `:minus` or `:plus`. The function must return a string. The\n  function can be used to wrap format elements in HTML or other tags.","ref":"Klepsidra.Cldr.Number.html#to_string/2-options"},{"type":"function","title":"Locale extensions affecting formatting - Klepsidra.Cldr.Number.to_string/2","doc":"A locale identifier can specify options that affect number formatting.\nThese options are:\n\n* `nu`: defines the number system to be used if none is specified by the `:number_system`\n  option to `to_string/2`\n\nThis key is part of the [u extension](https://unicode.org/reports/tr35/#u_Extension) and\nthat document should be consulted for details on how to construct a locale identifier with these\nextensions.","ref":"Klepsidra.Cldr.Number.html#to_string/2-locale-extensions-affecting-formatting"},{"type":"function","title":"Wrapping format elements - Klepsidra.Cldr.Number.to_string/2","doc":"Wrapping elements is particularly useful when formatting a number with a\ncurrency symbol and the requirement is to have different HTML formatting\napplied to the symbol than the number.  For example:\n\n    iex> Cldr.Number.to_string(100, format: :currency, currency: :USD, wrapper: fn\n    ...>   string, :currency_symbol -> \" \" <> string <> \" \"\n    ...>   string, :number -> \" \" <> string <> \" \"\n    ...>   string, :currency_space -> \" \" <> string <> \" \"\n    ...>   string, _other -> string\n    ...> end)\n    {:ok, \" $  100.00 \"}\n\nIt is also possible and recommended to use the `Phoenix.HTML.Tag.content_tag/3`\nfunction if wrapping HTML tags since these will ensure HTML entities are\ncorrectly encoded.  For example:\n\n    iex> Cldr.Number.to_string(100, format: :currency, currency: :USD, wrapper: fn\n    ...>   string, :currency_symbol -> Phoenix.HTML.Tag.content_tag(:span, string, class: \"symbol\")\n    ...>   string, :number -> Phoenix.HTML.Tag.content_tag(:span, string, class: \"number\")\n    ...>   string, :currency_space -> Phoenix.HTML.Tag.content_tag(:span, string)\n    ...>   string, _other -> string\n    ...> end)\n    {:ok, \" $  100.00 \"}\n\nWhen formatting a number the format is parsed into format elements that might include\na currency symbol, a literal string, inserted text between a currency symbol and the\ncurrency amount, a percent sign, the number itself and several other elements.  In\nsome cases it is helpful to be apply specific formatting to each element.\nThis can be achieved by specifying a `:wrapper` option. This option takes a 2-arity\nfunction as an argument. For each element of the format the wrapper function is called\nwith two parameters:  the format element as a string and an atom representing the\nelement type. The wrapper function is required to return a string that is then\ninserted in the final formatted number.","ref":"Klepsidra.Cldr.Number.html#to_string/2-wrapping-format-elements"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.to_string/2","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.html#to_string/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.to_string/2","doc":"iex> Klepsidra.Cldr.Number.to_string 12345\n    {:ok, \"12,345\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, locale: \"fr\"\n    {:ok, \"12 345\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1345.32, currency: :EUR, locale: \"es\", minimum_grouping_digits: 1\n    {:ok, \"1.345,32 €\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1345.32, currency: :EUR, locale: \"es\"\n    {:ok, \"1345,32 €\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, locale: \"fr\", currency: \"USD\"\n    {:ok, \"12 345,00 $US\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, format: \"#E0\"\n    {:ok, \"1.2345E4\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\"\n    {:ok, \"THB 12,345.00\"}\n\n    iex> Klepsidra.Cldr.Number.to_string -12345, format: :accounting, currency: \"THB\"\n    {:ok, \"(THB 12,345.00)\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\",\n    ...> locale: \"th\"\n    {:ok, \"฿12,345.00\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 12345, format: :accounting, currency: \"THB\",\n    ...> locale: \"th\", number_system: :native\n    {:ok, \"฿๑๒,๓๔๕.๐๐\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1244.30, format: :long\n    {:ok, \"1 thousand\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1244.30, format: :long, currency: \"USD\"\n    {:ok, \"1,244 US dollars\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1244.30, format: :short\n    {:ok, \"1K\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1244.30, format: :short, currency: \"EUR\"\n    {:ok, \"€1K\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1234, format: :spellout\n    {:ok, \"one thousand two hundred thirty-four\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1234, format: :spellout_verbose\n    {:ok, \"one thousand two hundred and thirty-four\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 1989, format: :spellout_year\n    {:ok, \"nineteen eighty-nine\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 123, format: :ordinal\n    {:ok, \"123rd\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 123, format: :roman\n    {:ok, \"CXXIII\"}\n\n    iex> Klepsidra.Cldr.Number.to_string 123, locale: \"th-u-nu-thai\"\n    {:ok, \"๑๒๓\"}","ref":"Klepsidra.Cldr.Number.html#to_string/2-examples"},{"type":"function","title":"Errors - Klepsidra.Cldr.Number.to_string/2","doc":"An error tuple `{:error, reason}` will be returned if an error is detected.\nThe two most likely causes of an error return are:\n\n  * A format cannot be compiled. In this case the error tuple will look like:\n\n```\n    iex> Klepsidra.Cldr.Number.to_string(12345, format: \"0#\")\n    {:error, {Cldr.FormatCompileError,\n      \"Decimal format compiler: syntax error before: \\\"#\\\"\"}}\n```\n\n  * The format style requested is not defined for the `locale` and\n    `number_system`. This happens typically when the number system is\n    `:algorithmic` rather than the more common `:numeric`. In this case the error\n    return looks like:\n\n```\n    iex> Klepsidra.Cldr.Number.to_string(1234, locale: \"he\", number_system: \"hebr\", format: :percent)\n    {:error, {Cldr.UnknownFormatError,\n      \"The locale :he with number system :hebr does not define a format :percent\"}}\n```","ref":"Klepsidra.Cldr.Number.html#to_string/2-errors"},{"type":"function","title":"Klepsidra.Cldr.Number.to_string!/2","doc":"Same as the execution of `to_string/2` but raises an exception if an error would be\nreturned.","ref":"Klepsidra.Cldr.Number.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.to_string!/2","doc":"* `number` is an integer, float or Decimal to be formatted\n\n* `options` is a keyword list defining how the number is to be formatted. See\n  `Klepsidra.Cldr.Number.to_string/2`","ref":"Klepsidra.Cldr.Number.html#to_string!/2-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.to_string!/2","doc":"* a formatted number as a string or\n\n* raises an exception","ref":"Klepsidra.Cldr.Number.html#to_string!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.to_string!/2","doc":"iex> Klepsidra.Cldr.Number.to_string! 12345\n    \"12,345\"\n\n    iex> Klepsidra.Cldr.Number.to_string! 12345, locale: \"fr\"\n    \"12 345\"","ref":"Klepsidra.Cldr.Number.html#to_string!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.validate_number_system/2","doc":"Return a valid number system from a provided locale and number\nsystem name or type.\n\nThe number system or number system type must be valid for the\ngiven locale.  If a number system type is provided, the\nunderlying number system is returned.","ref":"Klepsidra.Cldr.Number.html#validate_number_system/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.validate_number_system/2","doc":"* `locale` is any valid locale name returned by `Cldr.known_locale_names/1`\n  or a `Cldr.LanguageTag` struct returned by `Cldr.Locale.new!/2`\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`","ref":"Klepsidra.Cldr.Number.html#validate_number_system/2-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.validate_number_system/2","doc":"iex> Klepsidra.Cldr.Number.validate_number_system \"en\", :latn\n    {:ok, :latn}\n\n    iex> Klepsidra.Cldr.Number.validate_number_system \"en\", :default\n    {:ok, :latn}\n\n    iex> Klepsidra.Cldr.Number.validate_number_system \"en\", :unknown\n    {:error,\n     {Cldr.UnknownNumberSystemError, \"The number system :unknown is unknown\"}}\n\n    iex> Klepsidra.Cldr.Number.validate_number_system \"zz\", :default\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","ref":"Klepsidra.Cldr.Number.html#validate_number_system/2-examples"},{"type":"module","title":"Klepsidra.Cldr.Number.Cardinal","doc":"Implements cardinal plural rules for numbers.","ref":"Klepsidra.Cldr.Number.Cardinal.html"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.available_locale_names/0","doc":"The locale names for which plural rules are defined.","ref":"Klepsidra.Cldr.Number.Cardinal.html#available_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.known_locale_names/0","doc":"The configured locales for which plural rules are defined.\n\nReturns the intersection of `Klepsidra.Cldr.known_locale_names/0` and\nthe locales for which Cardinal plural rules are defined.\n\nThere are many `Cldr` locales which don't have their own plural\nrules so this list is the intersection of `Cldr`'s configured\nlocales and those that have rules.","ref":"Klepsidra.Cldr.Number.Cardinal.html#known_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.plural_rule/3","doc":"Return the plural key for a given number in a given locale\n\nReturns which plural key (`:zero`, `:one`, `:two`, `:few`,\n`:many` or `:other`) a given number fits into within the\ncontext of a given locale.\n\nNote that these key names should not be interpreted\nliterally.  For example, the key returned from\n`Cldr.Number.Ordinal.plural_rule(0, \"en\")` is actually\n`:other`, not `:zero`.\n\nThis key can then be used to format a number, date, time, unit,\nlist or other content in a plural-sensitive way.","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rule/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Cardinal.plural_rule/3","doc":"* `number` is any `integer`, `float` or `Decimal`\n\n* `locale` is any locale returned by `Cldr.Locale.new!/2` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\n* `rounding` is one of `[:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down]`.  The\n  default is `:half_even`.","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rule/3-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Cardinal.plural_rule/3","doc":"iex> Klepsidra.Cldr.Number.Cardinal.plural_rule 0, \"fr\"\n    :one\n\n    iex> Klepsidra.Cldr.Number.Cardinal.plural_rule 0, \"en\"\n    :other","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rule/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.plural_rules/0","doc":"Returns all the plural rules defined in CLDR.","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rules/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.plural_rules_for/1","doc":"Return the plural rules for a locale.","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rules_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Cardinal.plural_rules_for/1","doc":"* `locale` is any locale returned by `Klepsidra.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\nThe rules are returned in AST form after parsing.","ref":"Klepsidra.Cldr.Number.Cardinal.html#plural_rules_for/1-arguments"},{"type":"function","title":"Klepsidra.Cldr.Number.Cardinal.pluralize/3","doc":"Pluralize a number using cardinal plural rules\nand a substitution map.","ref":"Klepsidra.Cldr.Number.Cardinal.html#pluralize/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Cardinal.pluralize/3","doc":"* `number` is an integer, float or Decimal\n\n* `locale` is any locale returned by `Klepsidra.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\n* `substitutions` is a map that maps plural keys to a string.\n  The valid substitution keys are `:zero`, `:one`, `:two`,\n  `:few`, `:many` and `:other`.\n\nSee also `Klepsidra.Cldr.Number.Cardinal.Cardinal.plural_rule/3`.","ref":"Klepsidra.Cldr.Number.Cardinal.html#pluralize/3-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Cardinal.pluralize/3","doc":"iex> Klepsidra.Cldr.Number.Cardinal.pluralize 1, \"en\", %{one: \"one\"}\n    \"one\"\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize 2, \"en\", %{one: \"one\"}\n    nil\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize 2, \"en\", %{one: \"one\", two: \"two\", other: \"other\"}\n    \"other\"\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize 22, \"en\", %{one: \"one\", two: \"two\", other: \"other\"}\n    \"other\"\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize Decimal.new(1), \"en\", %{one: \"one\"}\n    \"one\"\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize Decimal.new(2), \"en\", %{one: \"one\"}\n    nil\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize Decimal.new(2), \"en\", %{one: \"one\", two: \"two\"}\n    nil\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize 1..10, \"ar\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"few\"\n\n    iex> Klepsidra.Cldr.Number.Cardinal.pluralize 1..10, \"en\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"","ref":"Klepsidra.Cldr.Number.Cardinal.html#pluralize/3-examples"},{"type":"module","title":"Klepsidra.Cldr.Number.Format","doc":"Functions to manage the collection of number patterns defined in Cldr.\n\nNumber patterns affect how numbers are interpreted in a localized context.\nHere are some examples, based on the French locale. The \".\" shows where the\ndecimal point should go. The \",\" shows where the thousands separator should\ngo. A \"0\" indicates zero-padding: if the number is too short, a zero (in the\nlocale's numeric set) will go there. A \"#\" indicates no padding: if the\nnumber is too short, nothing goes there. A \"¤\" shows where the currency sign\nwill go. The following illustrates the effects of different patterns for the\nFrench locale, with the number \"1234.567\". Notice how the pattern characters\n',' and '.' are replaced by the characters appropriate for the locale.","ref":"Klepsidra.Cldr.Number.Format.html"},{"type":"module","title":"Number Pattern Examples - Klepsidra.Cldr.Number.Format","doc":"| Pattern\t      | Currency\t      | Text        |\n| ------------- | :-------------: | ----------: |\n| #,##0.##\t    | n/a\t            | 1 234,57    |\n| #,##0.###\t    | n/a\t            | 1 234,567   |\n| ###0.#####\t  | n/a\t            | 1234,567    |\n| ###0.0000#\t  | n/a\t            | 1234,5670   |\n| 00000.0000\t  | n/a\t            | 01234,5670  |\n| #,##0.00 ¤\t  | EUR\t            | 1 234,57 €  |\n\nThe number of # placeholder characters before the decimal do not matter,\nsince no limit is placed on the maximum number of digits. There should,\nhowever, be at least one zero some place in the pattern. In currency formats,\nthe number of digits after the decimal also do not matter, since the\ninformation in the supplemental data (see Supplemental Currency Data) is used\nto override the number of decimal places — and the rounding — according to\nthe currency that is being formatted. That can be seen in the above chart,\nwith the difference between Yen and Euro formatting.\n\nDetails of the number formats are described in the\n[Unicode documentation](http://unicode.org/reports/tr35/tr35-numbers.html#Number_Format_Patterns)","ref":"Klepsidra.Cldr.Number.Format.html#module-number-pattern-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.all_formats_for/1","doc":"Returns the decimal formats defined for a given locale.","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.all_formats_for/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.all_formats_for/1","doc":"* `{:ok, map}` where map is a map of decimal formats\n  keyed by number system or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for/1-returns"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.all_formats_for!/1","doc":"Returns the decimal formats defined for a given locale.","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for!/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.all_formats_for!/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for!/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.all_formats_for!/1","doc":"* `{:ok, map}` where map is a map of decimal formats\n  keyed by number system or\n\n* raises an exception\n\nSee `Klepsidra.Cldr.Number.Format.Number.Format.all_formats_for/1` for further information.","ref":"Klepsidra.Cldr.Number.Format.html#all_formats_for!/1-returns"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.currency_spacing/2","doc":"Returns the currency space for a given locale and\nnumber system.","ref":"Klepsidra.Cldr.Number.Format.html#currency_spacing/2"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.decimal_format_list/0","doc":"Returns the list of decimal formats in the configured locales including\nthe list of locales configured for precompilation in `config.exs`.\n\nThis function exists to allow the decimal formatter\nto precompile all the known formats at compile time.","ref":"Klepsidra.Cldr.Number.Format.html#decimal_format_list/0"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.Format.decimal_format_list/0","doc":"#=> Klepsidra.Cldr.Number.Format.Format.decimal_format_list\n    [\"#\", \"#,##,##0%\",\n    \"#,##,##0.###\", \"#,##,##0.00¤\", \"#,##,##0.00¤;(#,##,##0.00¤)\",\n    \"#,##,##0 %\", \"#,##0%\", \"#,##0.###\", \"#,##0.00 ¤\",\n    \"#,##0.00 ¤;(#,##0.00 ¤)\", \"#,##0.00¤\", \"#,##0.00¤;(#,##0.00¤)\",\n    \"#,##0 %\", \"#0%\", \"#0.######\", \"#0.00 ¤\", \"#E0\", \"%#,##0\", \"% #,##0\",\n    \"0\", \"0.000000E+000\", \"0000 M ¤\", \"0000¤\", \"000G ¤\", \"000K ¤\", \"000M ¤\",\n    \"000T ¤\", \"000mM ¤\", \"000m ¤\", \"000 Bio'.' ¤\", \"000 Bln ¤\", \"000 Bn ¤\",\n    \"000 B ¤\", \"000 E ¤\", \"000 K ¤\", \"000 MRD ¤\", \"000 Md ¤\", \"000 Mio'.' ¤\",\n    \"000 Mio ¤\", \"000 Mld ¤\", \"000 Mln ¤\", \"000 Mn ¤\", \"000 Mrd'.' ¤\",\n    \"000 Mrd ¤\", \"000 Mr ¤\", \"000 M ¤\", \"000 NT ¤\", \"000 N ¤\", \"000 Tn ¤\",\n    \"000 Tr ¤\", ...]","ref":"Klepsidra.Cldr.Number.Format.html#decimal_format_list/0-example"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.decimal_format_list_for/1","doc":"Returns the list of decimal formats for a configured locale.","ref":"Klepsidra.Cldr.Number.Format.html#decimal_format_list_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.decimal_format_list_for/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.\n\nThis function exists to allow the decimal formatter to precompile all\nthe known formats at compile time. Its use is not otherwise recommended.","ref":"Klepsidra.Cldr.Number.Format.html#decimal_format_list_for/1-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.Format.decimal_format_list_for/1","doc":"iex> Klepsidra.Cldr.Number.Format.decimal_format_list_for(:en)\n    {:ok, [\"#,##0%\", \"#,##0.###\", \"#,##0.00\", \"#,##0.00;(#,##0.00)\",\"#E0\",\n     \"0 billion\", \"0 million\", \"0 thousand\",\n     \"0 trillion\", \"00 billion\", \"00 million\", \"00 thousand\", \"00 trillion\",\n     \"000 billion\", \"000 million\", \"000 thousand\", \"000 trillion\", \"000B\", \"000K\",\n     \"000M\", \"000T\", \"00B\", \"00K\", \"00M\", \"00T\", \"0B\", \"0K\", \"0M\", \"0T\",\n     \"¤#,##0.00\", \"¤#,##0.00;(¤#,##0.00)\", \"¤000B\", \"¤000K\", \"¤000M\",\n     \"¤000T\", \"¤00B\", \"¤00K\", \"¤00M\", \"¤00T\", \"¤0B\", \"¤0K\", \"¤0M\", \"¤0T\",\n     \"¤ #,##0.00\", \"¤ #,##0.00;(¤ #,##0.00)\", \"¤ 000B\", \"¤ 000K\", \"¤ 000M\",\n     \"¤ 000T\", \"¤ 00B\", \"¤ 00K\", \"¤ 00M\", \"¤ 00T\", \"¤ 0B\", \"¤ 0K\", \"¤ 0M\", \"¤ 0T\"]}","ref":"Klepsidra.Cldr.Number.Format.html#decimal_format_list_for/1-example"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.default_grouping_for/1","doc":"Returns the default grouping for a locale as a map.","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.default_grouping_for/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.default_grouping_for/1","doc":"* `{:ok, grouping}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Format.default_grouping_for/1","doc":"iex> Klepsidra.Cldr.Number.Format.default_grouping_for(:en)\n    {:ok, %{fraction: %{first: 0, rest: 0}, integer: %{first: 3, rest: 3}}}","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.default_grouping_for!/1","doc":"Returns the default grouping for a locale\nor raises on error.","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for!/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.default_grouping_for!/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for!/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.default_grouping_for!/1","doc":"* `grouping` as a map or\n\n* raises an exception","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for!/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Format.default_grouping_for!/1","doc":"iex> Klepsidra.Cldr.Number.Format.default_grouping_for!(:en)\n    %{fraction: %{first: 0, rest: 0}, integer: %{first: 3, rest: 3}}","ref":"Klepsidra.Cldr.Number.Format.html#default_grouping_for!/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.formats_for/2","doc":"Return the predfined formats for a given `locale` and `number_system`.","ref":"Klepsidra.Cldr.Number.Format.html#formats_for/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.formats_for/2","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.\n\n* `number_system` is any valid number system or number system type returned\n  by `Klepsidra.Cldr.Number.System.number_systems_for/1`.","ref":"Klepsidra.Cldr.Number.Format.html#formats_for/2-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.Format.formats_for/2","doc":"Klepsidra.Cldr.Number.Format.formats_for :fr, :native\n    #=> %Cldr.Number.Format{\n      accounting: \"#,##0.00 ¤;(#,##0.00 ¤)\",\n      currency: \"#,##0.00 ¤\",\n      percent: \"#,##0 %\",\n      scientific: \"#E0\",\n      standard: \"#,##0.###\"\n      currency_short: [{\"1000\", [one: \"0 k ¤\", other: \"0 k ¤\"]},\n       {\"10000\", [one: \"00 k ¤\", other: \"00 k ¤\"]},\n       {\"100000\", [one: \"000 k ¤\", other: \"000 k ¤\"]},\n       {\"1000000\", [one: \"0 M ¤\", other: \"0 M ¤\"]},\n       {\"10000000\", [one: \"00 M ¤\", other: \"00 M ¤\"]},\n       {\"100000000\", [one: \"000 M ¤\", other: \"000 M ¤\"]},\n       {\"1000000000\", [one: \"0 Md ¤\", other: \"0 Md ¤\"]},\n       {\"10000000000\", [one: \"00 Md ¤\", other: \"00 Md ¤\"]},\n       {\"100000000000\", [one: \"000 Md ¤\", other: \"000 Md ¤\"]},\n       {\"1000000000000\", [one: \"0 Bn ¤\", other: \"0 Bn ¤\"]},\n       {\"10000000000000\", [one: \"00 Bn ¤\", other: \"00 Bn ¤\"]},\n       {\"100000000000000\", [one: \"000 Bn ¤\", other: \"000 Bn ¤\"]}],\n       ...\n      }","ref":"Klepsidra.Cldr.Number.Format.html#formats_for/2-example"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.formats_for!/2","doc":"","ref":"Klepsidra.Cldr.Number.Format.html#formats_for!/2"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for/1","doc":"Returns the minimum grouping digits for a locale.","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for/1","doc":"* `{:ok, minumum_digits}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for/1","doc":"iex> Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for(\"en\")\n    {:ok, 1}","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for!/1","doc":"Returns the minimum grouping digits for a locale\nor raises on error.","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for!/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for!/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for!/1","doc":"* `minumum_digits` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for!/1","doc":"iex> Klepsidra.Cldr.Number.Format.minimum_grouping_digits_for!(\"en\")\n    1","ref":"Klepsidra.Cldr.Number.Format.html#minimum_grouping_digits_for!/1-examples"},{"type":"module","title":"Klepsidra.Cldr.Number.Formatter.Decimal","doc":"","ref":"Klepsidra.Cldr.Number.Formatter.Decimal.html"},{"type":"function","title":"Klepsidra.Cldr.Number.Formatter.Decimal.metadata!/1","doc":"","ref":"Klepsidra.Cldr.Number.Formatter.Decimal.html#metadata!/1"},{"type":"function","title":"Klepsidra.Cldr.Number.Formatter.Decimal.to_string/3","doc":"Formats a number according to a decimal format string.","ref":"Klepsidra.Cldr.Number.Formatter.Decimal.html#to_string/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Formatter.Decimal.to_string/3","doc":"* `number` is an integer, float or Decimal\n\n* `format` is a format string.  See `Klepsidra.Cldr.Number` for further information.\n\n* `options` is a map of options.  See `Klepsidra.Cldr.Number.to_string/2`\n  for further information.","ref":"Klepsidra.Cldr.Number.Formatter.Decimal.html#to_string/3-arguments"},{"type":"module","title":"Klepsidra.Cldr.Number.Ordinal","doc":"Implements ordinal plural rules for numbers.","ref":"Klepsidra.Cldr.Number.Ordinal.html"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.available_locale_names/0","doc":"The locale names for which plural rules are defined.","ref":"Klepsidra.Cldr.Number.Ordinal.html#available_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.known_locale_names/0","doc":"The configured locales for which plural rules are defined.\n\nReturns the intersection of `Klepsidra.Cldr.known_locale_names/0` and\nthe locales for which Ordinal plural rules are defined.\n\nThere are many `Cldr` locales which don't have their own plural\nrules so this list is the intersection of `Cldr`'s configured\nlocales and those that have rules.","ref":"Klepsidra.Cldr.Number.Ordinal.html#known_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.plural_rule/3","doc":"Return the plural key for a given number in a given locale\n\nReturns which plural key (`:zero`, `:one`, `:two`, `:few`,\n`:many` or `:other`) a given number fits into within the\ncontext of a given locale.\n\nNote that these key names should not be interpreted\nliterally.  For example, the key returned from\n`Cldr.Number.Ordinal.plural_rule(0, \"en\")` is actually\n`:other`, not `:zero`.\n\nThis key can then be used to format a number, date, time, unit,\nlist or other content in a plural-sensitive way.","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rule/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Ordinal.plural_rule/3","doc":"* `number` is any `integer`, `float` or `Decimal`\n\n* `locale` is any locale returned by `Cldr.Locale.new!/2` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\n* `rounding` is one of `[:down, :up, :ceiling, :floor, :half_even, :half_up, :half_down]`.  The\n  default is `:half_even`.","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rule/3-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Ordinal.plural_rule/3","doc":"iex> Klepsidra.Cldr.Number.Ordinal.plural_rule 0, \"fr\"\n    :other\n\n    iex> Klepsidra.Cldr.Number.Ordinal.plural_rule 1, \"en\"\n    :one","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rule/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.plural_rules/0","doc":"Returns all the plural rules defined in CLDR.","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rules/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.plural_rules_for/1","doc":"Return the plural rules for a locale.","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rules_for/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Ordinal.plural_rules_for/1","doc":"* `locale` is any locale returned by `Klepsidra.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\nThe rules are returned in AST form after parsing.","ref":"Klepsidra.Cldr.Number.Ordinal.html#plural_rules_for/1-arguments"},{"type":"function","title":"Klepsidra.Cldr.Number.Ordinal.pluralize/3","doc":"Pluralize a number using ordinal plural rules\nand a substitution map.","ref":"Klepsidra.Cldr.Number.Ordinal.html#pluralize/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Ordinal.pluralize/3","doc":"* `number` is an integer, float or Decimal or a `Range.t{}`.  When a range, The\n  is that in any usage, the start value is strictly less than the end value,\n  and that no values are negative. Results for any cases that do not meet\n  these criteria are undefined.\n\n* `locale` is any locale returned by `Klepsidra.Cldr.Locale.new!/1` or any\n  `locale_name` returned by `Klepsidra.Cldr.known_locale_names/0`\n\n* `substitutions` is a map that maps plural keys to a string.\n  The valid substitution keys are `:zero`, `:one`, `:two`,\n  `:few`, `:many` and `:other`.\n\nSee also `Klepsidra.Cldr.Number.Ordinal.Ordinal.plural_rule/3`.","ref":"Klepsidra.Cldr.Number.Ordinal.html#pluralize/3-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Ordinal.pluralize/3","doc":"iex> Klepsidra.Cldr.Number.Ordinal.pluralize 1, :en, %{one: \"one\"}\n    \"one\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize 2, :en, %{one: \"one\"}\n    nil\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize 2, :en, %{one: \"one\", two: \"two\"}\n    \"two\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize 22, :en, %{one: \"one\", two: \"two\", other: \"other\"}\n    \"two\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize Decimal.new(1), :en, %{one: \"one\"}\n    \"one\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize Decimal.new(2), :en, %{one: \"one\"}\n    nil\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize Decimal.new(2), :en, %{one: \"one\", two: \"two\"}\n    \"two\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize 1..10, \"ar\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"\n\n    iex> Klepsidra.Cldr.Number.Ordinal.pluralize 1..10, \"en\", %{one: \"one\", few: \"few\", other: \"other\"}\n    \"other\"","ref":"Klepsidra.Cldr.Number.Ordinal.html#pluralize/3-examples"},{"type":"module","title":"Klepsidra.Cldr.Number.PluralRule.Range","doc":"Implements plural rules for ranges","ref":"Klepsidra.Cldr.Number.PluralRule.Range.html"},{"type":"function","title":"Klepsidra.Cldr.Number.PluralRule.Range.plural_rule/3","doc":"Returns a final plural type for a start-of-range plural\ntype, an end-of-range plural type and a locale.","ref":"Klepsidra.Cldr.Number.PluralRule.Range.html#plural_rule/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.PluralRule.Range.plural_rule/3","doc":"* `first` is a plural type for the start of a range\n\n* `last` is a plural type for the end of a range\n\n* `locale` is any `Cldr.LanguageTag.t` or a language name\n  (not locale name)","ref":"Klepsidra.Cldr.Number.PluralRule.Range.html#plural_rule/3-arguments"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.PluralRule.Range.plural_rule/3","doc":"iex> Klepsidra.Cldr.Number.PluralRule.Range.plural_rule :other, :few, \"ar\"\n    :few","ref":"Klepsidra.Cldr.Number.PluralRule.Range.html#plural_rule/3-example"},{"type":"module","title":"Klepsidra.Cldr.Number.Symbol","doc":"","ref":"Klepsidra.Cldr.Number.Symbol.html"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.all_decimal_symbols/0","doc":"Returns a list of all decimal symbols defined\nby the locales configured in this backend as\na list.","ref":"Klepsidra.Cldr.Number.Symbol.html#all_decimal_symbols/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.all_decimal_symbols_class/0","doc":"Returns a list of all decimal symbols defined\nby the locales configured in this backend as\na string.\n\nThis string can be used as a character class\nwhen builing a regular expression.","ref":"Klepsidra.Cldr.Number.Symbol.html#all_decimal_symbols_class/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.all_grouping_symbols/0","doc":"Returns a list of all grouping symbols defined\nby the locales configured in this backend as\na list.","ref":"Klepsidra.Cldr.Number.Symbol.html#all_grouping_symbols/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.all_grouping_symbols_class/0","doc":"Returns a list of all grouping symbols defined\nby the locales configured in this backend as\na string.\n\nThis string can be used as a character class\nwhen builing a regular expression.","ref":"Klepsidra.Cldr.Number.Symbol.html#all_grouping_symbols_class/0"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.number_symbols_for/1","doc":"Returns a map of `Cldr.Number.Symbol.t` structs of the number symbols for each\nof the number systems of a locale.","ref":"Klepsidra.Cldr.Number.Symbol.html#number_symbols_for/1"},{"type":"function","title":"Options - Klepsidra.Cldr.Number.Symbol.number_symbols_for/1","doc":"* `locale` is any valid locale name returned by\n  `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by\n  `Klepsidra.Cldr.Locale.new!/1`. The default\n  is `Klepsidra.Cldr.get_locale/0`.","ref":"Klepsidra.Cldr.Number.Symbol.html#number_symbols_for/1-options"},{"type":"function","title":"Example: - Klepsidra.Cldr.Number.Symbol.number_symbols_for/1","doc":"iex> Klepsidra.Cldr.Number.Symbol.number_symbols_for(:th)\n    {:ok, %{\n       latn: %Cldr.Number.Symbol{\n         decimal: \".\",\n         exponential: \"E\",\n         group: \",\",\n         infinity: \"∞\",\n         list: \";\",\n         minus_sign: \"-\",\n         nan: \"NaN\",\n         per_mille: \"‰\",\n         percent_sign: \"%\",\n         plus_sign: \"+\",\n         superscripting_exponent: \"×\",\n         time_separator: \":\"\n       },\n       thai: %Cldr.Number.Symbol{\n         decimal: \".\",\n         exponential: \"E\",\n         group: \",\",\n         infinity: \"∞\",\n         list: \";\",\n         minus_sign: \"-\",\n         nan: \"NaN\",\n         per_mille: \"‰\",\n         percent_sign: \"%\",\n         plus_sign: \"+\",\n         superscripting_exponent: \"×\",\n         time_separator: \":\"\n       }\n     }}","ref":"Klepsidra.Cldr.Number.Symbol.html#number_symbols_for/1-example"},{"type":"function","title":"Klepsidra.Cldr.Number.Symbol.number_symbols_for/2","doc":"","ref":"Klepsidra.Cldr.Number.Symbol.html#number_symbols_for/2"},{"type":"module","title":"Klepsidra.Cldr.Number.System","doc":"","ref":"Klepsidra.Cldr.Number.System.html"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_system_for/2","doc":"Returns the actual number system from a number system type.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by ``Cldr.Locale.new!/2``\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`\n\nThis function will decode a number system type into the actual\nnumber system.  If the number system provided can't be decoded\nit is returned as is.","ref":"Klepsidra.Cldr.Number.System.html#number_system_for/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.number_system_for/2","doc":"iex> Klepsidra.Cldr.Number.System.number_system_for \"th\", :latn\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Klepsidra.Cldr.Number.System.number_system_for \"en\", :default\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Klepsidra.Cldr.Number.System.number_system_for \"he\", :traditional\n    {:ok, %{rules: \"hebrew\", type: :algorithmic}}\n\n    iex> Klepsidra.Cldr.Number.System.number_system_for \"en\", :native\n    {:ok, %{digits: \"0123456789\", type: :numeric}}\n\n    iex> Klepsidra.Cldr.Number.System.number_system_for \"en\", :finance\n    {\n      :error,\n      {Cldr.UnknownNumberSystemError,\n        \"The number system :finance is unknown for the locale named :en. Valid number systems are %{default: :latn, native: :latn}\"}\n    }","ref":"Klepsidra.Cldr.Number.System.html#number_system_for/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_system_from_locale/1","doc":"Returns the number system from a language tag or\nlocale name.","ref":"Klepsidra.Cldr.Number.System.html#number_system_from_locale/1"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.System.number_system_from_locale/1","doc":"* `locale` is any language tag returned be `Cldr.Locale.new/2`\n  or a locale name in the list returned by `Cldr.known_locale_names/1`","ref":"Klepsidra.Cldr.Number.System.html#number_system_from_locale/1-arguments"},{"type":"function","title":"Returns - Klepsidra.Cldr.Number.System.number_system_from_locale/1","doc":"* A number system name as an atom","ref":"Klepsidra.Cldr.Number.System.html#number_system_from_locale/1-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.number_system_from_locale/1","doc":"iex> Klepsidra.Cldr.Number.System.number_system_from_locale \"en-US-u-nu-thai\"\n    :thai\n\n    iex> Klepsidra.Cldr.Number.System.number_system_from_locale \"en-US\"\n    :latn","ref":"Klepsidra.Cldr.Number.System.html#number_system_from_locale/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_system_names_for/1","doc":"Returns the number systems available for a locale\nor `{:error, message}` if the locale is not known.\n\n* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Klepsidra.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.Number.System.html#number_system_names_for/1"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.number_system_names_for/1","doc":"iex> Klepsidra.Cldr.Number.System.number_system_names_for \"en\"\n    {:ok, [:latn]}\n\n    iex> Klepsidra.Cldr.Number.System.number_system_names_for \"zz\"\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","ref":"Klepsidra.Cldr.Number.System.html#number_system_names_for/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_system_names_for!/1","doc":"","ref":"Klepsidra.Cldr.Number.System.html#number_system_names_for!/1"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_system_types_for/1","doc":"","ref":"Klepsidra.Cldr.Number.System.html#number_system_types_for/1"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_systems_for/1","doc":"Returns the number systems available for a locale\nor `{:error, message}` if the locale is not known.\n\n* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Klepsidra.Cldr.Locale.new!/1`","ref":"Klepsidra.Cldr.Number.System.html#number_systems_for/1"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.number_systems_for/1","doc":"iex> Klepsidra.Cldr.Number.System.number_systems_for \"en\"\n    {:ok, %{default: :latn, native: :latn}}\n\n    iex> Klepsidra.Cldr.Number.System.number_systems_for \"th\"\n    {:ok, %{default: :latn, native: :thai}}\n\n    iex> Klepsidra.Cldr.Number.System.number_systems_for \"zz\"\n    {:error, {Cldr.InvalidLanguageError, \"The language \\\"zz\\\" is invalid\"}}","ref":"Klepsidra.Cldr.Number.System.html#number_systems_for/1-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_systems_for!/1","doc":"","ref":"Klepsidra.Cldr.Number.System.html#number_systems_for!/1"},{"type":"function","title":"Klepsidra.Cldr.Number.System.number_systems_like/2","doc":"","ref":"Klepsidra.Cldr.Number.System.html#number_systems_like/2"},{"type":"function","title":"Klepsidra.Cldr.Number.System.system_name_from/2","doc":"Returns a number system name for a given locale and number system reference.\n\n* `system_name` is any number system name returned by\n  `Klepsidra.Cldr.known_number_systems/0` or a number system type\n  returned by `Klepsidra.Cldr.known_number_system_types/0`\n\n* `locale` is any valid locale name returned by `Klepsidra.Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct returned by `Klepsidra.Cldr.Locale.new!/1`\n\nNumber systems can be references in one of two ways:\n\n* As a number system type such as :default, :native, :traditional and\n  :finance. This allows references to a number system for a locale in a\n  consistent fashion for a given use\n\n* WIth the number system name directly, such as :latn, :arab or any of the\n  other 70 or so\n\nThis function dereferences the supplied `system_name` and returns the\nactual system name.","ref":"Klepsidra.Cldr.Number.System.html#system_name_from/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.system_name_from/2","doc":"ex> Klepsidra.Cldr.Number.System.system_name_from(:default, \"en\")\n    {:ok, :latn}\n\n    iex> Klepsidra.Cldr.Number.System.system_name_from(\"latn\", \"en\")\n    {:ok, :latn}\n\n    iex> Klepsidra.Cldr.Number.System.system_name_from(:native, \"en\")\n    {:ok, :latn}\n\n    iex> Klepsidra.Cldr.Number.System.system_name_from(:nope, \"en\")\n    {\n      :error,\n      {Cldr.UnknownNumberSystemError, \"The number system :nope is unknown\"}\n    }\n\nNote that return value is not guaranteed to be a valid\nnumber system for the given locale as demonstrated in the third example.","ref":"Klepsidra.Cldr.Number.System.html#system_name_from/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.to_system/2","doc":"Converts a number into the representation of\na non-latin number system.\n\nThis function converts numbers to a known\nnumber system only, it does not provide number\nformatting.\n\n* `number` is a `float`, `integer` or `Decimal`\n\n* `system_name` is any number system name returned by\n  `Cldr.known_number_systems/0` or a number system type\n  returned by `Cldr.known_number_system_types/0`\n\nThere are two types of number systems in CLDR:\n\n* `:numeric` in which the number system defines\n  a direct mapping between the latin digits `0..9`\n  into a the number system equivalent.  In this case,\n` to_system/2` invokes `Cldr.Number.Transliterate.transliterate_digits/3`\n  for the given number.\n\n* `:algorithmic` in which the number system\n  does not have the same structure as the `:latn`\n  number system and therefore the conversion is\n  done algorithmically.  For CLDR the algorithm\n  is implemented through `Cldr.Rbnf` rulesets.\n  These rulesets are considered by CLDR to be\n  less rigorous than the `:numeric` number systems\n  and caution and testing for a specific use case\n  is recommended.","ref":"Klepsidra.Cldr.Number.System.html#to_system/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.to_system/2","doc":"iex> Klepsidra.Cldr.Number.System.to_system 123456, :hebr\n    {:ok, \"קכ״ג׳תנ״ו\"}\n\n    iex> Klepsidra.Cldr.Number.System.to_system 123, :hans\n    {:ok, \"一百二十三\"}\n\n    iex> Klepsidra.Cldr.Number.System.to_system 123, :hant\n    {:ok, \"一百二十三\"}\n\n    iex> Klepsidra.Cldr.Number.System.to_system 123, :hansfin\n    {:ok, \"壹佰贰拾叁\"}","ref":"Klepsidra.Cldr.Number.System.html#to_system/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.System.to_system!/2","doc":"Converts a number into the representation of\na non-latin number system. Returns a converted\nstring or raises on error.\n\n* `number` is a `float`, `integer` or `Decimal`\n\n* `system_name` is any number system name returned by\n  `Klepsidra.Cldr.known_number_systems/0` or a number system type\n  returned by `Klepsidra.Cldr.known_number_system_types/0`\n\nSee `Klepsidra.Cldr.Number.System.to_system/2` for further\ninformation.","ref":"Klepsidra.Cldr.Number.System.html#to_system!/2"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.System.to_system!/2","doc":"iex> Klepsidra.Cldr.Number.System.to_system! 123, :hans\n    \"一百二十三\"\n\n    iex> Klepsidra.Cldr.Number.System.to_system! 123, :hant\n    \"一百二十三\"\n\n    iex> Klepsidra.Cldr.Number.System.to_system! 123, :hansfin\n    \"壹佰贰拾叁\"","ref":"Klepsidra.Cldr.Number.System.html#to_system!/2-examples"},{"type":"module","title":"Klepsidra.Cldr.Number.Transliterate","doc":"Transliteration for digits and separators.\n\nTransliterating a string is an expensive business.  First the string has to\nbe exploded into its component graphemes.  Then for each grapheme we have\nto map to the equivalent in the other `{locale, number_system}`.  Then we\nhave to reassemble the string.\n\nEffort is made to short circuit where possible. Transliteration is not\nrequired for any `{locale, number_system}` that is the same as `{\"en\",\n\"latn\"}` since the implementation uses this combination for the placeholders during\nformatting already. When short circuiting is possible (typically the en-*\nlocales with \"latn\" number_system - the total number of short circuited\nlocales is 211 of the 537 in CLDR) the overall number formatting is twice as\nfast than when formal transliteration is required.\n\n#","ref":"Klepsidra.Cldr.Number.Transliterate.html"},{"type":"module","title":"Configuring precompilation of digit transliterations - Klepsidra.Cldr.Number.Transliterate","doc":"This module includes `Cldr.Number.Transliterate.transliterate_digits/3` which transliterates\ndigits between number systems.  For example from :arabic to :latn.  Since generating a\ntransliteration map is slow, pairs of transliterations can be configured so that the\ntransliteration map is created at compile time and therefore speeding up transliteration at\nrun time.\n\nTo configure these transliteration pairs, add the to the `use Cldr` configuration\nin a backend module:\n\n    defmodule MyApp.Cldr do\n      use Cldr,\n      locale: [\"en\", \"fr\", \"th\"],\n      default_locale: \"en\",\n      precompile_transliterations: [{:latn, :thai}, {:arab, :thai}]\n    end\n\nWhere each tuple in the list configures one transliteration map.  In this example, two maps are\nconfigured: from `:latn` to `:thai` and from `:arab` to `:thai`.\n\nA list of configurable number systems is returned by `Cldr.Number.System.numeric_systems/0`.\n\nIf a transliteration is requested between two number pairs that have not been configured for\nprecompilation, a warning is logged.","ref":"Klepsidra.Cldr.Number.Transliterate.html#module-configuring-precompilation-of-digit-transliterations"},{"type":"function","title":"Klepsidra.Cldr.Number.Transliterate.transliterate/3","doc":"Transliterates from latin digits to another number system's digits.\n\nTransliterates the latin digits 0..9 to their equivalents in\nanother number system. Also transliterates the decimal and grouping\nseparators as well as the plus, minus and exponent symbols. Any other character\nin the string will be returned \"as is\".","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Number.Transliterate.transliterate/3","doc":"* `sequence` is the string to be transliterated.\n\n* `locale` is any known locale, defaulting to `Klepsidra.Cldr.get_locale/0`.\n\n* `number_system` is any known number system. If expressed as a `string` it\n  is the actual name of a known number system. If epressed as an `atom` it is\n  used as a key to look up a number system for the locale (the usual keys are\n  `:default` and `:native` but :traditional and :finance are also part of the\n  standard). See `Klepsidra.Cldr.Number.System.number_systems_for/1` for a locale to\n  see what number system types are defined. The default is `:default`.\n\nFor available number systems see `Cldr.Number.System.number_systems/0`\nand `Klepsidra.Cldr.Number.System.number_systems_for/1`.  Also see\n`Klepsidra.Cldr.Number.Symbol.number_symbols_for/1`.","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate/3-arguments"},{"type":"function","title":"Examples - Klepsidra.Cldr.Number.Transliterate.transliterate/3","doc":"iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"123556\")\n    \"123556\"\n\n    iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"123,556.000\", \"fr\", :default)\n    \"123 556,000\"\n\n    iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", :default)\n    \"123556\"\n\n    iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", \"thai\")\n    \"๑๒๓๕๕๖\"\n\n    iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"123556\", \"th\", :native)\n    \"๑๒๓๕๕๖\"\n\n    iex> Klepsidra.Cldr.Number.Transliterate.transliterate(\"Some number is: 123556\", \"th\", \"thai\")\n    \"Some number is: ๑๒๓๕๕๖\"","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Number.Transliterate.transliterate!/3","doc":"","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate!/3"},{"type":"function","title":"Klepsidra.Cldr.Number.Transliterate.transliterate_digits/3","doc":"Transliterates digits from one number system to another number system\n\n* `digits` is binary representation of a number\n\n* `from_system` and `to_system` are number system names in atom form.  See\n`Cldr.Number.System.numeric_systems/0` for available number systems.","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate_digits/3"},{"type":"function","title":"Example - Klepsidra.Cldr.Number.Transliterate.transliterate_digits/3","doc":"iex> Klepsidra.Cldr.Number.Transliterate.transliterate_digits \"٠١٢٣٤٥٦٧٨٩\", :arab, :latn\n    \"0123456789\"","ref":"Klepsidra.Cldr.Number.Transliterate.html#transliterate_digits/3-example"},{"type":"module","title":"Klepsidra.Cldr.Rbnf.NumberSystem","doc":"Functions to implement the number system rule-based-number-format rules of CLDR.\n\nThese rules are defined only on the \"und\" locale and represent specialised\nnumber formatting.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Klepsidra.Cldr.Rbnf.NumberSystem.rule_sets(:und)\n    ...> |> Enum.sort()\n    [\n      :armenian_lower,\n      :armenian_upper,\n      :cyrillic_lower,\n      :ethiopic,\n      :georgian,\n      :greek_lower,\n      :greek_upper,\n      :hebrew,\n      :hebrew_item,\n      :roman_lower,\n      :roman_upper,\n      :tamil,\n      :zz_default\n    ]\n\nA rule can then be invoked on an available rule_set.  For example\n\n    iex> Klepsidra.Cldr.Rbnf.NumberSystem.roman_upper(123, :und)\n    \"CXXIII\"\n\nThis particular call is equivalent to the call through the public API of:\n\n    iex> Klepsidra.Cldr.Number.to_string(123, format: :roman)\n    {:ok, \"CXXIII\"}","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.all_rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#all_rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.armenian_lower/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#armenian_lower/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.armenian_lower/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#armenian_lower/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.armenian_upper/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#armenian_upper/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.armenian_upper/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#armenian_upper/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower_1_10/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_1_10/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower_final/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_final/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower_post/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_post/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.cyrillic_lower_thousands/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#cyrillic_lower_thousands/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic_p1/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic_p1/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic_p2/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic_p2/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic_p3/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic_p3/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.ethiopic_p/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#ethiopic_p/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.georgian/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#georgian/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.georgian/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#georgian/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_lower/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_lower/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_lower/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_lower/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_numeral_majuscules/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_numeral_majuscules/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_numeral_minuscules/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_numeral_minuscules/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_upper/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_upper/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.greek_upper/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#greek_upper/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew_0_99/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew_0_99/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew_item/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew_item/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew_item/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew_item/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew_item_hundreds/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew_item_hundreds/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.hebrew_thousands/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#hebrew_thousands/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.roman_lower/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#roman_lower/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.roman_lower/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#roman_lower/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.roman_upper/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#roman_upper/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.roman_upper/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#roman_upper/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.rule_sets/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#rule_sets/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.tamil/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#tamil/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.tamil/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#tamil/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.tamil_thousands/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#tamil_thousands/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.zz_default/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#zz_default/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.NumberSystem.zz_default/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.NumberSystem.html#zz_default/2"},{"type":"module","title":"Klepsidra.Cldr.Rbnf.Ordinal","doc":"Functions to implement the ordinal rule-based-number-format rules of CLDR.\n\nAs CLDR notes, the data is incomplete or non-existent for many languages.  It\nis considered complete for English however.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Klepsidra.Cldr.Rbnf.Ordinal.rule_sets(:en)\n    [:digits_ordinal]\n\n    iex> Klepsidra.Cldr.Rbnf.Ordinal.rule_sets(\"fr\")\n    ...> |> Enum.sort()\n    [\n      :digits_ordinal,\n      :digits_ordinal_feminine,\n      :digits_ordinal_feminine_plural,\n      :digits_ordinal_masculine,\n      :digits_ordinal_masculine_plural\n    ]\n\nA rule can then be invoked on an available rule_set.  For example\n\n    iex> Klepsidra.Cldr.Rbnf.Ordinal.digits_ordinal(123, :en)\n    \"123rd\"\n\nThis call is equivalent to the call through the public API of:\n\n    iex> Klepsidra.Cldr.Number.to_string(123, format: :ordinal)\n    {:ok, \"123rd\"}","ref":"Klepsidra.Cldr.Rbnf.Ordinal.html"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Ordinal.all_rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.Ordinal.html#all_rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Ordinal.digits_ordinal/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Ordinal.html#digits_ordinal/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Ordinal.rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.Ordinal.html#rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Ordinal.rule_sets/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.Ordinal.html#rule_sets/1"},{"type":"module","title":"Klepsidra.Cldr.Rbnf.Spellout","doc":"Functions to implement the spellout rule-based-number-format rules of CLDR.\n\nAs CLDR notes, the data is incomplete or non-existent for many languages.  It\nis considered complete for English however.\n\nThe standard public API for RBNF is via the `Cldr.Number.to_string/2` function.\n\nThe functions on this module are defined at compile time based upon the RBNF rules\ndefined in the Unicode CLDR data repository.  Available rules are identified by:\n\n    iex> Klepsidra.Cldr.Rbnf.Spellout.rule_sets(\"en\")\n    ...> |> Enum.sort()\n    [\n      :spellout_cardinal,\n      :spellout_cardinal_verbose,\n      :spellout_numbering,\n      :spellout_numbering_verbose,\n      :spellout_numbering_year,\n      :spellout_ordinal,\n      :spellout_ordinal_verbose\n    ]\n\nA rule can then be invoked on an available rule_set. For example:\n\n    iex> Klepsidra.Cldr.Rbnf.Spellout.spellout_ordinal(123, \"en\")\n    \"one hundred twenty-third\"\n\nThis call is equivalent to the call through the public API of:\n\n    iex> Klepsidra.Cldr.Number.to_string(123, format: :spellout)\n    {:ok, \"one hundred twenty-three\"}","ref":"Klepsidra.Cldr.Rbnf.Spellout.html"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.all_rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#all_rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.and/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#and/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.and_o/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#and_o/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.commas/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#commas/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.commas_o/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#commas_o/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.r2d_year/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#r2d_year/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.rule_sets/0","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#rule_sets/0"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.rule_sets/1","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#rule_sets/1"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_cardinal/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_cardinal/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_cardinal_verbose/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_cardinal_verbose/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_numbering/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_numbering/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_numbering_verbose/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_numbering_verbose/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_numbering_year/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_numbering_year/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_ordinal/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_ordinal/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.spellout_ordinal_verbose/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#spellout_ordinal_verbose/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.th/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#th/2"},{"type":"function","title":"Klepsidra.Cldr.Rbnf.Spellout.tieth/2","doc":"","ref":"Klepsidra.Cldr.Rbnf.Spellout.html#tieth/2"},{"type":"module","title":"Klepsidra.Cldr.Time","doc":"","ref":"Klepsidra.Cldr.Time.html"},{"type":"function","title":"Klepsidra.Cldr.Time.to_string/2","doc":"Formats a time according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html)","ref":"Klepsidra.Cldr.Time.html#to_string/2"},{"type":"function","title":"Returns - Klepsidra.Cldr.Time.to_string/2","doc":"* `{:ok, formatted_time}` or\n\n* `{:error, reason}`.","ref":"Klepsidra.Cldr.Time.html#to_string/2-returns"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Time.to_string/2","doc":"* `time` is a `%DateTime{}` or `%NaiveDateTime{}` struct or any map that contains the keys\n  `hour`, `minute`, `second` and optionally `calendar` and `microsecond`\n\n* `options` is a keyword list of options for formatting.","ref":"Klepsidra.Cldr.Time.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Time.to_string/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string.\n   The default is `:medium`.\n\n* `locale:` any locale returned by `Cldr.known_locale_names/1`.  The default is `\n  Cldr.get_locale()`.\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated.\n\n* `era: :variant` will use a variant for the era is one is available in the locale.\n  In the \"en\" locale, for example, `era: :variant` will return \"BCE\" instead of \"BC\".\n\n* `period: :variant` will use a variant for the time period and flexible time period if\n  one is available in the locale.  For example, in the \"en\" locale `period: :variant` will\n  return \"pm\" instead of \"PM\".","ref":"Klepsidra.Cldr.Time.html#to_string/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.Time.to_string/2","doc":"iex> Cldr.Time.to_string ~T[07:35:13.215217]\n    {:ok, \"7:35:13 AM\"}\n\n    iex> Cldr.Time.to_string ~T[07:35:13.215217], format: :short\n    {:ok, \"7:35 AM\"}\n\n    iex> Cldr.Time.to_string ~T[07:35:13.215217], format: :medium, locale: \"fr\"\n    {:ok, \"07:35:13\"}\n\n    iex> Cldr.Time.to_string ~T[07:35:13.215217], format: :medium\n    {:ok, \"7:35:13 AM\"}\n\n    iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Cldr.Time.to_string datetime, format: :long\n    {:ok, \"11:59:59 PM UTC\"}","ref":"Klepsidra.Cldr.Time.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Time.to_string!/2","doc":"Formats a time according to a format string\nas defined in CLDR and described in [TR35](http://unicode.org/reports/tr35/tr35-dates.html).","ref":"Klepsidra.Cldr.Time.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Time.to_string!/2","doc":"* `time` is a `%DateTime{}` or `%NaiveDateTime{}` struct or any map that contains the keys\n  `hour`, `minute`, `second` and optionally `calendar` and `microsecond`\n\n* `options` is a keyword list of options for formatting.","ref":"Klepsidra.Cldr.Time.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Time.to_string!/2","doc":"* `format:` `:short` | `:medium` | `:long` | `:full` or a format string.\n     The default is `:medium`.\n\n  * `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n    or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n  * `number_system:` a number system into which the formatted date digits should\n    be transliterated.\n\n  * `era: :variant` will use a variant for the era is one is available in the locale.\n    In the \"en\" locale, for example, `era: :variant` will return \"BCE\" instead of \"BC\".\n\n  * `period: :variant` will use a variant for the time period and flexible time period if\n    one is available in the locale.  For example, in the \"en\" locale `period: :variant` will\n    return \"pm\" instead of \"PM\".","ref":"Klepsidra.Cldr.Time.html#to_string!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Time.to_string!/2","doc":"* `formatted_time_string` or\n\n* raises an exception.","ref":"Klepsidra.Cldr.Time.html#to_string!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Time.to_string!/2","doc":"iex> Klepsidra.Cldr.Time.to_string! ~T[07:35:13.215217]\n    \"7:35:13 AM\"\n\n    iex> Klepsidra.Cldr.Time.to_string! ~T[07:35:13.215217], format: :short\n    \"7:35 AM\"\n\n    iex> Klepsidra.Cldr.Time.to_string ~T[07:35:13.215217], format: :short, period: :variant\n    {:ok, \"7:35 AM\"}\n\n    iex> Klepsidra.Cldr.Time.to_string! ~T[07:35:13.215217], format: :medium, locale: \"fr\"\n    \"07:35:13\"\n\n    iex> Klepsidra.Cldr.Time.to_string! ~T[07:35:13.215217], format: :medium\n    \"7:35:13 AM\"\n\n    iex> {:ok, datetime} = DateTime.from_naive(~N[2000-01-01 23:59:59.0], \"Etc/UTC\")\n    iex> Klepsidra.Cldr.Time.to_string! datetime, format: :long\n    \"11:59:59 PM UTC\"","ref":"Klepsidra.Cldr.Time.html#to_string!/2-examples"},{"type":"module","title":"Klepsidra.Cldr.Time.Interval","doc":"Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a\nshorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed\nto take a start and end date, time or datetime plus a formatting pattern\nand use that information to produce a localized format.\n\nSee `Cldr.Interval.to_string/3` and `Cldr.Time.Interval.to_string/3`","ref":"Klepsidra.Cldr.Time.Interval.html"},{"type":"function","title":"Klepsidra.Cldr.Time.Interval.do_to_string/3","doc":"","ref":"Klepsidra.Cldr.Time.Interval.html#do_to_string/3"},{"type":"function","title":"Klepsidra.Cldr.Time.Interval.do_to_string!/3","doc":"","ref":"Klepsidra.Cldr.Time.Interval.html#do_to_string!/3"},{"type":"function","title":"Klepsidra.Cldr.Time.Interval.to_string/3","doc":"Returns a string representing the formatted\ninterval formed by two times.","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Time.Interval.to_string/3","doc":"* `from` is any map that conforms to the\n  `Calendar.time` type.\n\n* `to` is any map that conforms to the\n  `Calendar.time` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :time]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone time.","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Time.Interval.to_string/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The\n  alternatives are `:time`, `:zone`,\n  and `:flex`. The default is `:time`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Time.Interval.to_string/3","doc":"* `{:ok, string}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Time.Interval.to_string/3","doc":"* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configured locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  time is formatted instead of an interval","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Time.Interval.to_string/3","doc":"iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :short\n    {:ok, \"10 – 10 AM\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :medium\n    {:ok, \"10:00 – 10:03 AM\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00], format: :long\n    {:ok, \"10:00 – 10:03 AM\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex\n    {:ok, \"10:00 – 10:03 in the morning\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :flex\n    {:ok, \"12:00 – 10:00 in the morning\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :zone\n    {:ok, \"12:00 – 10:00 AM Etc/UTC\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex, locale: \"th\"\n    {:ok, \"10:00 – 10:03 ในตอนเช้า\"}\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string ~T[10:00:00], nil\n    {:ok, \"10:00:00 AM –\"}","ref":"Klepsidra.Cldr.Time.Interval.html#to_string/3-examples"},{"type":"function","title":"Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"Returns a string representing the formatted\ninterval formed by two times or raises an\nexception.","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"* `from` is any map that conforms to the\n  `Calendar.time` type.\n\n* `to` is any map that conforms to the\n  `Calendar.time` type. `to` must occur\n  on or after `from`.\n\n* `options` is a keyword list of options. The default is\n  `[format: :medium, style: :time]`.\n\nEither `from` or `to` may also be `nil`, in which case an\nopen interval is formatted and the non-nil item is formatted\nas a standalone time.","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"* `:format` is one of `:short`, `:medium` or `:long` or a\n  specific format type or a string representing of an interval\n  format. The default is `:medium`.\n\n* `:style` supports dfferent formatting styles. The\n  alternatives are `:time`, `:zone`,\n  and `:flex`. The default is `:time`.\n\n* `locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Elixir.Klepsidra.Cldr.get_locale/0`\n\n* `number_system:` a number system into which the formatted date digits should\n  be transliterated","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"* `string` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"* For more information on interval format string\n  see `Cldr.Interval`.\n\n* The available predefined formats that can be applied are the\n  keys of the map returned by `Cldr.DateTime.Format.interval_formats(\"en\", :gregorian)`\n  where `\"en\"` can be replaced by any configured locale name and `:gregorian`\n  is the underlying CLDR calendar type.\n\n* In the case where `from` and `to` are equal, a single\n  time is formatted instead of an interval","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Time.Interval.to_string!/3","doc":"iex> Klepsidra.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :short\n    \"10 – 10 AM\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :medium\n    \"10:00 – 10:03 AM\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00], format: :long\n    \"10:00 – 10:03 AM\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex\n    \"10:00 – 10:03 in the morning\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :flex\n    \"12:00 – 10:00 in the morning\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~U[2020-01-01 00:00:00.0Z], ~U[2020-01-01 10:00:00.0Z],\n    ...> format: :long, style: :zone\n    \"12:00 – 10:00 AM Etc/UTC\"\n\n    iex> Klepsidra.Cldr.Time.Interval.to_string! ~T[10:00:00], ~T[10:03:00],\n    ...> format: :long, style: :flex, locale: \"th\"\n    \"10:00 – 10:03 ในตอนเช้า\"","ref":"Klepsidra.Cldr.Time.Interval.html#to_string!/3-examples"},{"type":"module","title":"Klepsidra.Cldr.Unit","doc":"Supports the CLDR Units definitions which provide for the localization of many\nunit types.","ref":"Klepsidra.Cldr.Unit.html"},{"type":"function","title":"Klepsidra.Cldr.Unit.add/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#add/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.add!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#add!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.compatible?/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#compatible?/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.convert/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#convert/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.convert!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#convert!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.decompose/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#decompose/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.default_gender/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#default_gender/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.default_style/0","doc":"","ref":"Klepsidra.Cldr.Unit.html#default_style/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.display_name/2","doc":"Returns the localized display name\nfor a unit.\n\nThe returned text is generally suitable\nfor including in UI elements such as\nselection boxes.","ref":"Klepsidra.Cldr.Unit.html#display_name/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.display_name/2","doc":"* `unit` is any `t:Cldr.Unit` or any\n  unit name returned by `Cldr.Unit.known_units/0`.\n\n* `options` is a keyword list of options.","ref":"Klepsidra.Cldr.Unit.html#display_name/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.display_name/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`.\n\n* `:style` is one of those returned by `Cldr.Unit.available_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`.","ref":"Klepsidra.Cldr.Unit.html#display_name/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.display_name/2","doc":"iex> Klepsidra.Cldr.Unit.display_name :liter\n    \"liters\"\n\n    iex> Klepsidra.Cldr.Unit.display_name :liter, locale: \"fr\"\n    \"litres\"\n\n    iex> Klepsidra.Cldr.Unit.display_name :liter, locale: \"fr\", style: :short\n    \"l\"","ref":"Klepsidra.Cldr.Unit.html#display_name/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.div/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#div/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.div!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#div!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.grammatical_features/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#grammatical_features/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.grammatical_gender/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#grammatical_gender/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.known_styles/0","doc":"","ref":"Klepsidra.Cldr.Unit.html#known_styles/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.known_unit_categories/0","doc":"","ref":"Klepsidra.Cldr.Unit.html#known_unit_categories/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.known_units/0","doc":"","ref":"Klepsidra.Cldr.Unit.html#known_units/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.localize/1","doc":"Localizes a unit according to the current\nprocesses locale and backend.\n\nThe current process's locale is set with\n`Cldr.put_locale/1`.\n\nSee `Cldr.Unit.localize/3` for further\ndetails.","ref":"Klepsidra.Cldr.Unit.html#localize/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.localize/2","doc":"Localizes a unit according to a territory\n\nA territory can be derived from a `t:Cldr.Locale.locale_name`\nor `t:Cldr.LangaugeTag`.\n\nUse this function if you have a unit which\nshould be presented in a user interface using\nunits relevant to the audience. For example, a\nunit `#Cldr.Unit100, :meter>` might be better\npresented to a US audience as `#Cldr.Unit<328, :foot>`.","ref":"Klepsidra.Cldr.Unit.html#localize/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.localize/2","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Unit.html#localize/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.localize/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `backend.get_locale/0`\n\n* `:territory` is any valid territory code returned by\n  `Cldr.known_territories/0`. The default is the territory defined\n  as part of the `:locale`. The option `:territory` has a precedence\n  over the territory in a locale.\n\n* `:usage` is the way in which the unit is intended\n  to be used.  The available `usage` varyies according\n  to the unit category.  See `Cldr.Unit.preferred_units/3`.","ref":"Klepsidra.Cldr.Unit.html#localize/2-options"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.localize/2","doc":"iex> unit = Cldr.Unit.new!(1.83, :meter)\n    iex> Klepsidra.Cldr.Unit.localize(unit, usage: :person_height, territory: :US)\n    [\n      Cldr.Unit.new!(:foot, 6, usage: :person_height),\n      Cldr.Unit.new!(:inch, \"0.04724409448818897637795275598\", usage: :person_height)\n    ]","ref":"Klepsidra.Cldr.Unit.html#localize/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system?/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system?/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_for/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_for/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_for/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_for/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_for_territory/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_for_territory/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_for_territory/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_for_territory/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_from_locale/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_from_locale/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_from_locale/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_from_locale/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_system_from_locale/3","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_system_from_locale/3"},{"type":"function","title":"Klepsidra.Cldr.Unit.measurement_systems_for_unit/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#measurement_systems_for_unit/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.mult/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#mult/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.mult!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#mult!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.new/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#new/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.new!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#new!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.parse/2","doc":"Parse a string to create a new unit.\n\nThis function attempts to parse a string\ninto a `number` and `unit type`. If successful\nit attempts to create a new unit using\n`Cldr.Unit.new/3`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","ref":"Klepsidra.Cldr.Unit.html#parse/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.parse/2","doc":"* `unit string` is any string to be parsed and if\n  possible used to create a new `t:Cldr.Unit`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Unit.html#parse/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.parse/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`","ref":"Klepsidra.Cldr.Unit.html#parse/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.parse/2","doc":"* `{:ok, unit}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Unit.html#parse/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.parse/2","doc":"iex> Klepsidra.Cldr.Unit.parse \"1kg\"\n    Cldr.Unit.new(1, :kilogram)\n\n    iex> Klepsidra.Cldr.Unit.parse \"1 tages\", locale: \"de\"\n    Cldr.Unit.new(1, :day)\n\n    iex> Klepsidra.Cldr.Unit.parse \"1 tag\", locale: \"de\"\n    Cldr.Unit.new(1, :day)\n\n    iex> Klepsidra.Cldr.Unit.parse(\"42 millispangels\")\n    {:error, {Cldr.UnknownUnitError, \"Unknown unit was detected at \\\"spangels\\\"\"}}","ref":"Klepsidra.Cldr.Unit.html#parse/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.parse!/2","doc":"Parse a string to create a new unit or\nraises an exception.\n\nThis function attempts to parse a string\ninto a `number` and `unit type`. If successful\nit attempts to create a new unit using\n`Cldr.Unit.new/3`.\n\nThe parsed `unit type` is un-aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","ref":"Klepsidra.Cldr.Unit.html#parse!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.parse!/2","doc":"* `unit string` is any string to be parsed and if\n  possible used to create a new `t:Cldr.Unit`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Unit.html#parse!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.parse!/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`","ref":"Klepsidra.Cldr.Unit.html#parse!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.parse!/2","doc":"* `unit` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Unit.html#parse!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.parse!/2","doc":"iex> Klepsidra.Cldr.Unit.parse! \"1kg\"\n    Cldr.Unit.new!(1, :kilogram)\n\n    iex> Klepsidra.Cldr.Unit.parse! \"1 tages\", locale: \"de\"\n    Cldr.Unit.new!(1, :day)\n\n    iex> Klepsidra.Cldr.Unit.parse!(\"42 candela per lux\")\n    Cldr.Unit.new!(42, \"candela per lux\")\n\n    iex> Klepsidra.Cldr.Unit.parse!(\"42 millispangels\")\n    ** (Cldr.UnknownUnitError) Unknown unit was detected at \"spangels\"","ref":"Klepsidra.Cldr.Unit.html#parse!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"Parse a string to find a matching unit-atom.\n\nThis function attempts to parse a string and\nextract the `unit type`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"* `unit_name_string` is any string to be parsed and converted into a `unit type`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`\n\n* `:backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module. The default is `Cldr.default_backend!/0`.\n\n* `:only` is a unit category or unit, or a list of unit categories and units.\n  The parsed unit must match one of the categories or units in order to\n  be valid. This is helpful when disambiguating parsed units. For example,\n  parsing \"w\" could be either `:watt` or `:weeks`. Specifying `only: :duration`\n  would return `:weeks`. Specifying `only: :power` would return `:watt`\n\n* `:except` is the oppostte of `:only`. The parsed unit must *not*\n  match the specified unit or category, or unit categories and units.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"* `{:ok, unit_name}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"* When both `:only` and `:except` options are passed, both\n  conditions must be true in order to return a parsed result.\n\n* Only units returned by `Cldr.Unit.known_units/0` can be\n  used in the `:only` and `:except` filters.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.parse_unit_name/2","doc":"iex> Klepsidra.Cldr.Unit.parse_unit_name \"kg\"\n    {:ok, :kilogram}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name \"w\"\n    {:ok, :watt}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name \"w\", only: :duration\n    {:ok, :week}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name \"m\", only: [:year, :month, :day]\n    {:ok, :month}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name \"tages\", locale: \"de\"\n    {:ok, :day}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name \"tag\", locale: \"de\"\n    {:ok, :day}\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name(\"millispangels\")\n    {:error, {Cldr.UnknownUnitError, \"Unknown unit was detected at \\\"spangels\\\"\"}}","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"Parse a string to find a matching unit-atom.\n\nThis function attempts to parse a string and\nextract the `unit type`.\n\nThe parsed `unit type` is aliased against all the\nknown unit names for a give locale (or the current\nlocale if no locale is specified). The known\naliases for unit types can be returned with\n`MyApp.Cldr.Unit.unit_strings_for/1` where `MyApp.Cldr`\nis the name of a backend module.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"* `unit_name_string` is any string to be parsed and converted into a `unit type`\n\n* `options` is a keyword list of options","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `t:Cldr.LanguageTag` struct. The default is `Cldr.get_locale/0`\n\n* `:backend` is any module that includes `use Cldr` and therefore\n  is a `Cldr` backend module. The default is `Cldr.default_backend!/0`.\n\n* `:only` is a unit category or unit, or a list of unit categories and units.\n  The parsed unit must match one of the categories or units in order to\n  be valid. This is helpful when disambiguating parsed units. For example,\n  parsing \"w\" could be either `watts` or `:week`. Specifying `only: :duration`\n  would return `:week`. Specifying `only: :power` would return `:watts`\n\n* `:except` is the oppostte of `:only`. The parsed unit must *not*\n  match the specified unit or category, or unit categories and units.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"* `unit_name` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"* When both `:only` and `:except` options are passed, both\n  conditions must be true in order to return a parsed result.\n\n* Only units returned by `Cldr.Unit.known_units/0` can be\n  used in the `:only` and `:except` filters.","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.parse_unit_name!/2","doc":"iex> Klepsidra.Cldr.Unit.parse_unit_name! \"kg\"\n    :kilogram\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name! \"w\"\n    :watt\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name! \"w\", only: :duration\n    :week\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name! \"m\", only: [:year, :month, :day]\n    :month\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name! \"tages\", locale: \"de\"\n    :day\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name! \"tag\", locale: \"de\"\n    :day\n\n    iex> Klepsidra.Cldr.Unit.parse_unit_name!(\"millispangels\")\n    ** (Cldr.UnknownUnitError) Unknown unit was detected at \"spangels\"","ref":"Klepsidra.Cldr.Unit.html#parse_unit_name!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.preferred_units/2","doc":"Returns a list of the preferred units for a given\nunit, locale, use case and scope.\n\nThe units used to represent length, volume and so on\ndepend on a given territory, measurement system and usage.\n\nFor example, in the US, people height is most commonly\nreferred to in `inches`, or informally as `feet and inches`.\nIn most of the rest of the world it is `centimeters`.","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.preferred_units/2","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`.\n\n* `backend` is any Cldr backend module. That is, any module\n  that includes `use Cldr`. The default is `Cldr.default_backend/0`\n\n* `options` is a keyword list of options or a\n  `Cldr.Unit.Conversion.Options` struct. The default\n  is `[]`.","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.preferred_units/2","doc":"* `:usage` is the unit usage. for example `;person` for a unit\n  type of length. The available usage for a given unit category can\n  be seen with `Cldr.Unit.unit_category_usage/0`. The default is `nil`\n\n* `:scope` is either `:small` or `nil`. In some usage, the units\n  used are different when the unit size is small. It is up to the\n  developer to determine when `scope: :small` is appropriate.\n\n* `:alt` is either `:informal` or `nil`. Like `:scope`, the units\n  in use depend on whether they are being used in a formal or informal\n  context.\n\n* `:locale` is any locale returned by `Cldr.validate_locale/2`","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.preferred_units/2","doc":"* `{:ok, unit_list, formatting_options}` or\n\n* `{:error, {exception, reason}}`","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2-returns"},{"type":"function","title":"Notes - Klepsidra.Cldr.Unit.preferred_units/2","doc":"`formatting_options` is a keyword list of options\nthat can be passed to `Cldr.Unit.to_string/3`. Its\nprimary intended usage is for localizing a unit that\ndecomposes into more than one unit (for example when\n2 meters might become 6 feet 6 inches.) In such\ncases, the last unit in the list (in this case the\ninches) is formatted with the `formatting_options`.","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2-notes"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.preferred_units/2","doc":"iex> meter = Cldr.Unit.new!(:meter, 1)\n    iex> Klepsidra.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :person_height\n    {:ok, [:foot, :inch], []}\n    iex> Klepsidra.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :person\n    {:ok, [:inch], []}\n    iex> Klepsidra.Cldr.Unit.preferred_units meter, locale: \"en-AU\", usage: :person\n    {:ok, [:centimeter], []}\n    iex> Klepsidra.Cldr.Unit.preferred_units meter, locale: \"en-US\", usage: :road\n    {:ok, [:foot], [round_nearest: 1]}\n    iex> Klepsidra.Cldr.Unit.preferred_units meter, locale: \"en-AU\", usage: :road\n    {:ok, [:meter], [round_nearest: 1]}","ref":"Klepsidra.Cldr.Unit.html#preferred_units/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.preferred_units!/2","doc":"Returns a list of the preferred units for a given\nunit, locale, use case and scope.\n\nThe units used to represent length, volume and so on\ndepend on a given territory, measurement system and usage.\n\nFor example, in the US, people height is most commonly\nreferred to in `inches`, or informally as `feet and inches`.\nIn most of the rest of the world it is `centimeters`.","ref":"Klepsidra.Cldr.Unit.html#preferred_units!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.preferred_units!/2","doc":"* `unit` is any unit returned by `Cldr.Unit.new/2`.\n\n* `backend` is any Cldr backend module. That is, any module\n  that includes `use Cldr`. The default is `Cldr.default_backend/0`\n\n* `options` is a keyword list of options or a\n  `Cldr.Unit.Conversion.Options` struct. The default\n  is `[]`.","ref":"Klepsidra.Cldr.Unit.html#preferred_units!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.preferred_units!/2","doc":"* `:usage` is the unit usage. for example `;person` for a unit\n  type of length. The available usage for a given unit category can\n  be seen with `Cldr.Unit.unit_category_usage/0`. The default is `nil`\n\n* `:scope` is either `:small` or `nil`. In some usage, the units\n  used are different when the unit size is small. It is up to the\n  developer to determine when `scope: :small` is appropriate.\n\n* `:alt` is either `:informal` or `nil`. Like `:scope`, the units\n  in use depend on whether they are being used in a formal or informal\n  context.\n\n* `:locale` is any locale returned by `Cldr.validate_locale/2`","ref":"Klepsidra.Cldr.Unit.html#preferred_units!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.preferred_units!/2","doc":"* `unit_list` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Unit.html#preferred_units!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.preferred_units!/2","doc":"iex> meter = Cldr.Unit.new!(:meter, 2)\n    iex> Klepsidra.Cldr.Unit.preferred_units! meter, locale: \"en-US\", usage: :person_height\n    [:foot, :inch]\n    iex> Klepsidra.Cldr.Unit.preferred_units! meter, locale: \"en-AU\", usage: :person\n    [:centimeter]\n    iex> Klepsidra.Cldr.Unit.preferred_units! meter, locale: \"en-US\", usage: :road\n    [:foot]\n    iex> Klepsidra.Cldr.Unit.preferred_units! meter, locale: \"en-AU\", usage: :road\n    [:meter]","ref":"Klepsidra.Cldr.Unit.html#preferred_units!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.round/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#round/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.round/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#round/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.round/3","doc":"","ref":"Klepsidra.Cldr.Unit.html#round/3"},{"type":"function","title":"Klepsidra.Cldr.Unit.styles/0","doc":"","ref":"Klepsidra.Cldr.Unit.html#styles/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.sub/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#sub/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.sub!/2","doc":"","ref":"Klepsidra.Cldr.Unit.html#sub!/2"},{"type":"function","title":"Klepsidra.Cldr.Unit.to_iolist/2","doc":"Formats a number into an iolist according to a unit definition\nfor a locale.","ref":"Klepsidra.Cldr.Unit.html#to_iolist/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.to_iolist/2","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.Unit.html#to_iolist/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.to_iolist/2","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Klepsidra.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","ref":"Klepsidra.Cldr.Unit.html#to_iolist/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.to_iolist/2","doc":"* `{:ok, io_list}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Unit.html#to_iolist/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.to_iolist/2","doc":"iex> Klepsidra.Cldr.Unit.to_iolist Cldr.Unit.new!(:gallon, 123)\n    {:ok, [\"123\", \" gallons\"]}","ref":"Klepsidra.Cldr.Unit.html#to_iolist/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.to_iolist!/2","doc":"Formats a unit using `to_iolist/3` but raises if there is\nan error.","ref":"Klepsidra.Cldr.Unit.html#to_iolist!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.to_iolist!/2","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.Unit.html#to_iolist!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.to_iolist!/2","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles/0`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`.\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Klepsidra.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","ref":"Klepsidra.Cldr.Unit.html#to_iolist!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.to_iolist!/2","doc":"* `io_list` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Unit.html#to_iolist!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.to_iolist!/2","doc":"iex> Klepsidra.Cldr.Unit.to_iolist! 123, unit: :gallon\n    [\"123\", \" gallons\"]","ref":"Klepsidra.Cldr.Unit.html#to_iolist!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.to_string/2","doc":"Formats a number into a string according to a unit definition for a locale.","ref":"Klepsidra.Cldr.Unit.html#to_string/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.to_string/2","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.Unit.html#to_string/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.to_string/2","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Klepsidra.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","ref":"Klepsidra.Cldr.Unit.html#to_string/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.to_string/2","doc":"* `{:ok, formatted_string}` or\n\n* `{:error, {exception, message}}`","ref":"Klepsidra.Cldr.Unit.html#to_string/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.to_string/2","doc":"iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 123)\n    {:ok, \"123 gallons\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1)\n    {:ok, \"1 gallon\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"af\"\n    {:ok, \"1 gelling\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"af-NA\"\n    {:ok, \"1 gelling\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1), locale: \"bs\"\n    {:ok, \"1 galon\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1234), format: :long\n    {:ok, \"1 thousand gallons\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:gallon, 1234), format: :short\n    {:ok, \"1K gallons\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:megahertz, 1234)\n    {:ok, \"1,234 megahertz\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:megahertz, 1234), style: :narrow\n    {:ok, \"1,234MHz\"}\n\n    iex> Klepsidra.Cldr.Unit.to_string Cldr.Unit.new!(:megabyte, 1234), locale: \"en\", style: :unknown\n    {:error, {Cldr.UnknownFormatError, \"The unit style :unknown is not known.\"}}","ref":"Klepsidra.Cldr.Unit.html#to_string/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.to_string!/2","doc":"Formats a list using `to_string/3` but raises if there is\nan error.","ref":"Klepsidra.Cldr.Unit.html#to_string!/2"},{"type":"function","title":"Arguments - Klepsidra.Cldr.Unit.to_string!/2","doc":"* `list_or_number` is any number (integer, float or Decimal) or a\n  `t:Cldr.Unit` struct or a list of `t:Cldr.Unit` structs\n\n* `options` is a keyword list","ref":"Klepsidra.Cldr.Unit.html#to_string!/2-arguments"},{"type":"function","title":"Options - Klepsidra.Cldr.Unit.to_string!/2","doc":"* `:unit` is any unit returned by `Cldr.Unit.known_units/0`. Ignored if\n  the number to be formatted is a `t:Cldr.Unit` struct\n\n* `:locale` is any valid locale name returned by `Cldr.known_locale_names/0`\n  or a `Cldr.LanguageTag` struct.  The default is `Cldr.get_locale/0`\n\n* `:style` is one of those returned by `Cldr.Unit.known_styles`.\n  The current styles are `:long`, `:short` and `:narrow`.\n  The default is `style: :long`\n\n* `:grammatical_case` indicates that a localisation for the given\n  locale and given grammatical case should be used. See `Cldr.Unit.known_grammatical_cases/0`\n  for the list of known grammatical cases. Note that not all locales\n  define all cases. However all locales do define the `:nominative`\n  case, which is also the default.\n\n* `:gender` indicates that a localisation for the given\n  locale and given grammatical gender should be used. See `Cldr.Unit.known_grammatical_genders/0`\n  for the list of known grammatical genders. Note that not all locales\n  define all genders. The default gender is `Klepsidra.Cldr.Unit.default_gender/1`\n  for the given locale.\n\n* `:list_options` is a keyword list of options for formatting a list\n  which is passed through to `Cldr.List.to_string/3`. This is only\n  applicable when formatting a list of units.\n\n* Any other options are passed to `Cldr.Number.to_string/2`\n  which is used to format the `number`","ref":"Klepsidra.Cldr.Unit.html#to_string!/2-options"},{"type":"function","title":"Returns - Klepsidra.Cldr.Unit.to_string!/2","doc":"* `formatted_string` or\n\n* raises an exception","ref":"Klepsidra.Cldr.Unit.html#to_string!/2-returns"},{"type":"function","title":"Examples - Klepsidra.Cldr.Unit.to_string!/2","doc":"iex> Klepsidra.Cldr.Unit.to_string! 123, unit: :gallon\n    \"123 gallons\"\n\n    iex> Klepsidra.Cldr.Unit.to_string! 1, unit: :gallon\n    \"1 gallon\"\n\n    iex> Klepsidra.Cldr.Unit.to_string! 1, unit: :gallon, locale: \"af\"\n    \"1 gelling\"","ref":"Klepsidra.Cldr.Unit.html#to_string!/2-examples"},{"type":"function","title":"Klepsidra.Cldr.Unit.unit_category/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#unit_category/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.unit_strings_for/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#unit_strings_for/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.validate_style/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#validate_style/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.validate_unit/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#validate_unit/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.value/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#value/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.zero/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#zero/1"},{"type":"function","title":"Klepsidra.Cldr.Unit.zero?/1","doc":"","ref":"Klepsidra.Cldr.Unit.html#zero?/1"},{"type":"module","title":"Klepsidra.Cldr.Unit.Additional","doc":"","ref":"Klepsidra.Cldr.Unit.Additional.html"},{"type":"function","title":"Klepsidra.Cldr.Unit.Additional.additional_units/0","doc":"","ref":"Klepsidra.Cldr.Unit.Additional.html#additional_units/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.Additional.known_locale_names/0","doc":"","ref":"Klepsidra.Cldr.Unit.Additional.html#known_locale_names/0"},{"type":"function","title":"Klepsidra.Cldr.Unit.Additional.units_for/2","doc":"","ref":"Klepsidra.Cldr.Unit.Additional.html#units_for/2"},{"type":"module","title":"Klepsidra.Projects","doc":"The Projects context.","ref":"Klepsidra.Projects.html"},{"type":"function","title":"Klepsidra.Projects.change_note/2","doc":"Returns an `%Ecto.Changeset{}` for tracking note changes.","ref":"Klepsidra.Projects.html#change_note/2"},{"type":"function","title":"Examples - Klepsidra.Projects.change_note/2","doc":"iex> change_note(note)\n    %Ecto.Changeset{data: %Note{}}","ref":"Klepsidra.Projects.html#change_note/2-examples"},{"type":"function","title":"Klepsidra.Projects.change_project/2","doc":"Returns an `%Ecto.Changeset{}` for tracking project changes.","ref":"Klepsidra.Projects.html#change_project/2"},{"type":"function","title":"Examples - Klepsidra.Projects.change_project/2","doc":"iex> change_project(project)\n    %Ecto.Changeset{data: %Project{}}","ref":"Klepsidra.Projects.html#change_project/2-examples"},{"type":"function","title":"Klepsidra.Projects.create_note/1","doc":"Creates a note.","ref":"Klepsidra.Projects.html#create_note/1"},{"type":"function","title":"Examples - Klepsidra.Projects.create_note/1","doc":"iex> create_note(%{field: value})\n    {:ok, %Note{}}\n\n    iex> create_note(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#create_note/1-examples"},{"type":"function","title":"Klepsidra.Projects.create_project/1","doc":"Creates a project.","ref":"Klepsidra.Projects.html#create_project/1"},{"type":"function","title":"Examples - Klepsidra.Projects.create_project/1","doc":"iex> create_project(%{field: value})\n    {:ok, %Project{}}\n\n    iex> create_project(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#create_project/1-examples"},{"type":"function","title":"Klepsidra.Projects.delete_note/1","doc":"Deletes a note.","ref":"Klepsidra.Projects.html#delete_note/1"},{"type":"function","title":"Examples - Klepsidra.Projects.delete_note/1","doc":"iex> delete_note(note)\n    {:ok, %Note{}}\n\n    iex> delete_note(note)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#delete_note/1-examples"},{"type":"function","title":"Klepsidra.Projects.delete_project/1","doc":"Deletes a project.","ref":"Klepsidra.Projects.html#delete_project/1"},{"type":"function","title":"Examples - Klepsidra.Projects.delete_project/1","doc":"iex> delete_project(project)\n    {:ok, %Project{}}\n\n    iex> delete_project(project)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#delete_project/1-examples"},{"type":"function","title":"Klepsidra.Projects.get_note!/1","doc":"Gets a single note.\n\nRaises `Ecto.NoResultsError` if the Note does not exist.","ref":"Klepsidra.Projects.html#get_note!/1"},{"type":"function","title":"Examples - Klepsidra.Projects.get_note!/1","doc":"iex> get_note!(123)\n    %Note{}\n\n    iex> get_note!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.Projects.html#get_note!/1-examples"},{"type":"function","title":"Klepsidra.Projects.get_project!/1","doc":"Gets a single project.\n\nRaises `Ecto.NoResultsError` if the Project does not exist.","ref":"Klepsidra.Projects.html#get_project!/1"},{"type":"function","title":"Examples - Klepsidra.Projects.get_project!/1","doc":"iex> get_project!(123)\n    %Project{}\n\n    iex> get_project!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.Projects.html#get_project!/1-examples"},{"type":"function","title":"Klepsidra.Projects.list_project_notes/0","doc":"Returns the list of project_notes.","ref":"Klepsidra.Projects.html#list_project_notes/0"},{"type":"function","title":"Examples - Klepsidra.Projects.list_project_notes/0","doc":"iex> list_project_notes()\n    [%Note{}, ...]","ref":"Klepsidra.Projects.html#list_project_notes/0-examples"},{"type":"function","title":"Klepsidra.Projects.list_projects/0","doc":"Returns the list of projects.","ref":"Klepsidra.Projects.html#list_projects/0"},{"type":"function","title":"Examples - Klepsidra.Projects.list_projects/0","doc":"iex> list_projects()\n    [%Project{}, ...]","ref":"Klepsidra.Projects.html#list_projects/0-examples"},{"type":"function","title":"Klepsidra.Projects.update_note/2","doc":"Updates a note.","ref":"Klepsidra.Projects.html#update_note/2"},{"type":"function","title":"Examples - Klepsidra.Projects.update_note/2","doc":"iex> update_note(note, %{field: new_value})\n    {:ok, %Note{}}\n\n    iex> update_note(note, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#update_note/2-examples"},{"type":"function","title":"Klepsidra.Projects.update_project/2","doc":"Updates a project.","ref":"Klepsidra.Projects.html#update_project/2"},{"type":"function","title":"Examples - Klepsidra.Projects.update_project/2","doc":"iex> update_project(project, %{field: new_value})\n    {:ok, %Project{}}\n\n    iex> update_project(project, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.Projects.html#update_project/2-examples"},{"type":"module","title":"Klepsidra.Projects.Note","doc":"Defines the schema for the project `notes` entity, annotations\nof ongoing management of projects.","ref":"Klepsidra.Projects.Note.html"},{"type":"type","title":"Klepsidra.Projects.Note.t/0","doc":"","ref":"Klepsidra.Projects.Note.html#t:t/0"},{"type":"module","title":"Klepsidra.Projects.Project","doc":"Defines a schema for the `Projects` entity, used to label long-running projects.\n\nProjects can be initiated by both customers, as well as in response to supplier\nrequirements, and can be linked to a `BusinessPartner` entity.\n\nTimers can also belong to projects, timing disparate activities as part of a\nlong-running project.","ref":"Klepsidra.Projects.Project.html"},{"type":"function","title":"Klepsidra.Projects.Project.populate_projects_list/0","doc":"Used across live components to populate select options with projects.","ref":"Klepsidra.Projects.Project.html#populate_projects_list/0"},{"type":"type","title":"Klepsidra.Projects.Project.t/0","doc":"","ref":"Klepsidra.Projects.Project.html#t:t/0"},{"type":"module","title":"Klepsidra.TimeTracking","doc":"The TimeTracking context.","ref":"Klepsidra.TimeTracking.html"},{"type":"function","title":"Klepsidra.TimeTracking.change_note/2","doc":"Returns an `%Ecto.Changeset{}` for tracking note changes.","ref":"Klepsidra.TimeTracking.html#change_note/2"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.change_note/2","doc":"iex> change_note(note)\n    %Ecto.Changeset{data: %Note{}}","ref":"Klepsidra.TimeTracking.html#change_note/2-examples"},{"type":"function","title":"Klepsidra.TimeTracking.change_timer/2","doc":"Returns an `%Ecto.Changeset{}` for tracking timer changes.","ref":"Klepsidra.TimeTracking.html#change_timer/2"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.change_timer/2","doc":"iex> change_timer(timer)\n    %Ecto.Changeset{data: %Timer{}}","ref":"Klepsidra.TimeTracking.html#change_timer/2-examples"},{"type":"function","title":"Klepsidra.TimeTracking.create_note/1","doc":"Creates a note.","ref":"Klepsidra.TimeTracking.html#create_note/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.create_note/1","doc":"iex> create_note(%{field: value})\n    {:ok, %Note{}}\n\n    iex> create_note(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#create_note/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.create_timer/1","doc":"Creates a timer.","ref":"Klepsidra.TimeTracking.html#create_timer/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.create_timer/1","doc":"iex> create_timer(%{field: value})\n    {:ok, %Timer{}}\n\n    iex> create_timer(%{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#create_timer/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.delete_note/1","doc":"Deletes a note.","ref":"Klepsidra.TimeTracking.html#delete_note/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.delete_note/1","doc":"iex> delete_note(note)\n    {:ok, %Note{}}\n\n    iex> delete_note(note)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#delete_note/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.delete_timer/1","doc":"Deletes a timer.","ref":"Klepsidra.TimeTracking.html#delete_timer/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.delete_timer/1","doc":"iex> delete_timer(timer)\n    {:ok, %Timer{}}\n\n    iex> delete_timer(timer)\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#delete_timer/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.get_note!/1","doc":"Gets a single note.\n\nRaises `Ecto.NoResultsError` if the Note does not exist.","ref":"Klepsidra.TimeTracking.html#get_note!/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.get_note!/1","doc":"iex> get_note!(123)\n    %Note{}\n\n    iex> get_note!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.TimeTracking.html#get_note!/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.get_timer!/1","doc":"Gets a single timer.\n\nRaises `Ecto.NoResultsError` if the Timer does not exist.","ref":"Klepsidra.TimeTracking.html#get_timer!/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.get_timer!/1","doc":"iex> get_timer!(123)\n    %Timer{}\n\n    iex> get_timer!(456)\n    ** (Ecto.NoResultsError)","ref":"Klepsidra.TimeTracking.html#get_timer!/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.list_notes/0","doc":"Returns the list of notes.","ref":"Klepsidra.TimeTracking.html#list_notes/0"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.list_notes/0","doc":"iex> list_notes()\n    [%Note{}, ...]","ref":"Klepsidra.TimeTracking.html#list_notes/0-examples"},{"type":"function","title":"Klepsidra.TimeTracking.list_notes/1","doc":"Returns a list of notes matching the given `filter`.\n\nExample filter:\n\n%{timer_id: 42}","ref":"Klepsidra.TimeTracking.html#list_notes/1"},{"type":"function","title":"Klepsidra.TimeTracking.list_timers/0","doc":"Returns the list of timers.","ref":"Klepsidra.TimeTracking.html#list_timers/0"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.list_timers/0","doc":"iex> list_timers()\n    [%Timer{}, ...]","ref":"Klepsidra.TimeTracking.html#list_timers/0-examples"},{"type":"function","title":"Klepsidra.TimeTracking.update_note/2","doc":"Updates a note.","ref":"Klepsidra.TimeTracking.html#update_note/2"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.update_note/2","doc":"iex> update_note(note, %{field: new_value})\n    {:ok, %Note{}}\n\n    iex> update_note(note, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#update_note/2-examples"},{"type":"function","title":"Klepsidra.TimeTracking.update_timer/2","doc":"Updates a timer.","ref":"Klepsidra.TimeTracking.html#update_timer/2"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.update_timer/2","doc":"iex> update_timer(timer, %{field: new_value})\n    {:ok, %Timer{}}\n\n    iex> update_timer(timer, %{field: bad_value})\n    {:error, %Ecto.Changeset{}}","ref":"Klepsidra.TimeTracking.html#update_timer/2-examples"},{"type":"module","title":"Klepsidra.TimeTracking.Note","doc":"Defines the data schema for the `Note` entity, annotations of timed activities.","ref":"Klepsidra.TimeTracking.Note.html"},{"type":"type","title":"Klepsidra.TimeTracking.Note.t/0","doc":"","ref":"Klepsidra.TimeTracking.Note.html#t:t/0"},{"type":"module","title":"Klepsidra.TimeTracking.TimeUnits","doc":"Provides handling and user interface presentation of time units.","ref":"Klepsidra.TimeTracking.TimeUnits.html"},{"type":"function","title":"Klepsidra.TimeTracking.TimeUnits.construct_duration_unit_options_list/1","doc":"Constructs a list of time units, ready to be used in an `options` input element.\n\nReturns list of tuples of the user-facing unit name and string version of the\ntime unit atom, shaped for use in Phoenix-constructed [HTML] option input elements.\nEach tuple has two elements, the first human-readable value, the second\nis the string version of the time unit atom name.\n\nFor example, weeks would be presented as: `{\"Weeks\", \"week\"}`.","ref":"Klepsidra.TimeTracking.TimeUnits.html#construct_duration_unit_options_list/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.TimeUnits.construct_duration_unit_options_list/1","doc":"iex> Klepsidra.TimeTracking.TimeUnits.construct_duration_unit_options_list()\n    [\n      {\"Minutes\", \"minute\"},\n      {\"5 min\", \"five_minute_increment\"},\n      {\"6 min\", \"six_minute_increment\"},\n      {\"10 min\", \"ten_minute_increment\"},\n      {\"12 min\", \"twelve_minute_increment\"},\n      {\"15 min\", \"fifteen_minute_increment\"},\n      {\"18 min\", \"eighteen_minute_increment\"},\n      {\"20 min\", \"twenty_minute_increment\"},\n      {\"24 min\", \"twenty_four_minute_increment\"},\n      {\"30 min\", \"thirty_minute_increment\"},\n      {\"36 min\", \"thirty_six_minute_increment\"},\n      {\"45 min\", \"fourty_five_minute_increment\"},\n      {\"60 min\", \"sixty_minute_increment\"},\n      {\"90 min\", \"ninety_minute_increment\"},\n      {\"2 hour increment\", \"one_hundred_twenty_minute_increment\"}\n    ]\n\n    iex> Klepsidra.TimeTracking.TimeUnits.construct_duration_unit_options_list(use_primitives?: true)\n    [{\"Seconds\", \"second\"}, {\"Minutes\", \"minute\"}, {\"Hours\", \"hour\"}]","ref":"Klepsidra.TimeTracking.TimeUnits.html#construct_duration_unit_options_list/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.TimeUnits.get_default_billing_increment/0","doc":"Returns the default billing increment for use in option select controls'\nvalue property.\n\nThe returned value is a string, to be immediately usable, without further\nconversion. The default is stored, compiled, in the module attribute\n`@default_billing_increment`, which will be supplanted in the future by\na user-defined choice, directly in the user interface.","ref":"Klepsidra.TimeTracking.TimeUnits.html#get_default_billing_increment/0"},{"type":"module","title":"Klepsidra.TimeTracking.Timer","doc":"Defines the `timers` schema and functions needed to clock in, out and parse datetimes.","ref":"Klepsidra.TimeTracking.Timer.html"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.assign_timer_duration/2","doc":"Used across `timer` live components to calculate timer durations.\n\nThe function takes the `timer_params` parameters passed to the validation function,\nextracts the start and end datetime stamps, returning a map with the two\ncalculated durations: `%{duration: 0, billing_duration: 0}`","ref":"Klepsidra.TimeTracking.Timer.html#assign_timer_duration/2"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.calculate_timer_duration/3","doc":"Calculates the time elapsed between start and end timestamps.\n\nThe time unit can be passed in as the optional `unit` argument. If it is omitted,\nminutes are used as the default time unit.\n\nIn calculating the time duration, the difference between the two timestamps is\nalways incremented by one. This ensures that if the timer were simply started\nand immediately stopped, it would still register the use of one unit of time.","ref":"Klepsidra.TimeTracking.Timer.html#calculate_timer_duration/3"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.calculate_timer_duration/3","doc":"iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:45\")\n    72\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:45\", :minute)\n    72\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:45\", :second)\n    4261\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:45\", :hour)\n    2\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:34\", :hour)\n    2\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(\"2024-02-28 12:34\", \"2024-02-28 13:33\", :hour)\n    1\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(~N[2024-06-06 23:40:31], ~N[2024-06-07 01:23:45])\n    104\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(~N[2024-06-06 23:40:31], ~N[2024-06-07 01:23:45], :minute)\n    104\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(~N[2024-06-06 23:40:31], ~N[2024-06-07 01:23:45], :second)\n    6195\n\n    iex> Klepsidra.TimeTracking.Timer.calculate_timer_duration(~N[2024-06-06 23:40:31], ~N[2024-06-07 01:23:45], :hour)\n    2","ref":"Klepsidra.TimeTracking.Timer.html#calculate_timer_duration/3-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.clock_out/2","doc":"Clock out of an active timer, given a starting timestamp string.","ref":"Klepsidra.TimeTracking.Timer.html#clock_out/2"},{"type":"function","title":"Return values - Klepsidra.TimeTracking.Timer.clock_out/2","doc":"Returns a map containing the ending timestamp and duration in the requested unit of time.","ref":"Klepsidra.TimeTracking.Timer.html#clock_out/2-return-values"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.clock_out/2","doc":"iex> Klepsidra.TimeTracking.Timer.get_current_timestamp()\n    ...> |> NaiveDateTime.add(-15, :minute)\n    ...> |> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!()\n    ...> |> Klepsidra.TimeTracking.Timer.clock_out()\n    %{end_timestamp: Klepsidra.TimeTracking.Timer.get_current_timestamp() |> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!(), timer_duration: 16}\n\n    iex> Klepsidra.TimeTracking.Timer.get_current_timestamp()\n    ...> |> NaiveDateTime.add(-15, :minute)\n    ...> |> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!()\n    ...> |> Klepsidra.TimeTracking.Timer.clock_out(:hour)\n    %{end_timestamp: Klepsidra.TimeTracking.Timer.get_current_timestamp() |> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!(), timer_duration: 1}","ref":"Klepsidra.TimeTracking.Timer.html#clock_out/2-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html/1","doc":"Converts `NativeDateTime` structure to HTML-ready string, with the seconds component\nelided.\n\nReturns a tuple with `:ok` or `:error` as the first element, with a string\ncompatible with HTML's input `datetime-local` element, in the format\n\"YYYY-MM-DDThh:mm\". This can directly be fed into an `input` element's `value`\nslot.","ref":"Klepsidra.TimeTracking.Timer.html#convert_naivedatetime_to_html/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html/1","doc":"iex> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html(~N[2024-04-07 22:12:32])\n    {:ok, \"2024-04-07T22:12:32\"}","ref":"Klepsidra.TimeTracking.Timer.html#convert_naivedatetime_to_html/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!/1","doc":"Converts `NativeDateTime` structure to HTML-ready string, with the seconds component\nelided.\n\nReturns a string compatible with HTML's input `datetime-local` element, in the\nformat \"YYYY-MM-DDThh:mm\". This can directly be fed into an `input` element's\n`value` slot.","ref":"Klepsidra.TimeTracking.Timer.html#convert_naivedatetime_to_html!/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!/1","doc":"iex> Klepsidra.TimeTracking.Timer.convert_naivedatetime_to_html!(~N[2024-04-07 22:12:32])\n    \"2024-04-07T22:12:32\"","ref":"Klepsidra.TimeTracking.Timer.html#convert_naivedatetime_to_html!/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.duration_to_string/2","doc":"Formats a number into a string according to a unit definition for a locale.\n\nTakes an integer duration, and an atom time unit, including any custom time\nunits defined and compiled as part of this project.\n\nReturns a tuple {:ok, ...} containing a locale-specific and quantity-sensitive\npluralisation of the defined time unit as a string.","ref":"Klepsidra.TimeTracking.Timer.html#duration_to_string/2"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.duration_to_string/2","doc":"iex> Klepsidra.TimeTracking.Timer.duration_to_string(3, :minute)\n    {:ok, \"3 minutes\"}\n\n    iex> Klepsidra.TimeTracking.Timer.duration_to_string(7, :six_minute_increment)\n    {:ok, \"7 six minute increments\"}\n\n    iex> Klepsidra.TimeTracking.Timer.duration_to_string(1, :hour)\n    {:ok, \"1 hour\"}\n\n    iex> Klepsidra.TimeTracking.Timer.duration_to_string(0, :second)\n    {:ok, \"0 seconds\"}","ref":"Klepsidra.TimeTracking.Timer.html#duration_to_string/2-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.get_current_timestamp/0","doc":"Get the current local date and time, without a timezone component,\nfor the timezone the the computer the program is running on is set to.\n\nThis function will display what the date and time are right now, for the\ntime zone configuration the computer is localised to.\n\nRelying on this function to return the time is fine for many uses, including for\ntiming tasks, but is unsuitable for use where real precision and time awareness may be\ncritical.\n\nReturns a `NaiveDateTime` struct.","ref":"Klepsidra.TimeTracking.Timer.html#get_current_timestamp/0"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.get_current_timestamp/0","doc":"iex> naivedatetime_stamp = Klepsidra.TimeTracking.Timer.get_current_timestamp()\n    iex> naivedatetime_stamp.year >= 2024\n    true","ref":"Klepsidra.TimeTracking.Timer.html#get_current_timestamp/0-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.parse_html_datetime/1","doc":"Parses HTML `datetime-local` strings into `NativeDateTime` structure.\n\nDatetime strings coming from HTML, from `datetime-local` type fields,\nare not conformant to the extended date and time of day  ISO 8601:2019 standard format.\nSpecifically, they are encoded as \"YYYY-MM-DDThh:mm\", and are generally (but not always)\npassed without a seconds component. `NativeDateTime` cannot parse this, returning an\nerror.\n\nUsing the Timex library's `parse/2` function, parse datetime strings into an ISO\nconforming `NativeDateTime` structure, returning a result tuple:\n\n`{:ok, ~N[...]}` on success, or {:error, reason} upon failure.\n\nIt is possible to receive a datetime with date and time components separated by either\na letter \"t\" or a single space (\" \"), binary pattern matching will determine which is\nreceived in the `datetime_string` argument.\n\nAn error is returned if the datetime string cannot be parsed as a valid date and time,\nand also if the string doesn't match the expected pattern.","ref":"Klepsidra.TimeTracking.Timer.html#parse_html_datetime/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.parse_html_datetime/1","doc":"iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"1970-01-01T11:15\")\n    {:ok, ~N[1970-01-01 11:15:00]}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"1970-01-01T11:15:39\")\n    {:ok, ~N[1970-01-01 11:15:39]}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"1970-01-01 11:15\")\n    {:ok, ~N[1970-01-01 11:15:00]}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"1970-01-01 11:15:59\")\n    {:ok, ~N[1970-01-01 11:15:59]}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"1970-02-29T11:15\")\n    {:error, :invalid_date}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(\"\")\n    {:error, \"Invalid argument passed as timestamp\"}\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime(nil)\n    {:error, \"Invalid argument passed as timestamp\"}","ref":"Klepsidra.TimeTracking.Timer.html#parse_html_datetime/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.parse_html_datetime!/1","doc":"Parses HTML `datetime-local` strings into `NativeDateTime` structure.\n\nWorks just like `parse_html_datetime1`, but instead of returning an {:ok, _} or\n{:error, reason} tuple, returns the `NaiveDateTime` struct on success, raising\nan error otherwise.","ref":"Klepsidra.TimeTracking.Timer.html#parse_html_datetime!/1"},{"type":"function","title":"Examples - Klepsidra.TimeTracking.Timer.parse_html_datetime!/1","doc":"iex> Klepsidra.TimeTracking.Timer.parse_html_datetime!(\"1970-01-01T11:15\")\n    ~N[1970-01-01 11:15:00]\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime!(\"1970-01-01T11:15:39\")\n    ~N[1970-01-01 11:15:39]\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime!(\"1970-01-01 11:15\")\n    ~N[1970-01-01 11:15:00]\n\n    iex> Klepsidra.TimeTracking.Timer.parse_html_datetime!(\"1970-01-01 11:15:59\")\n    ~N[1970-01-01 11:15:59]","ref":"Klepsidra.TimeTracking.Timer.html#parse_html_datetime!/1-examples"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.read_checkbox/1","doc":"","ref":"Klepsidra.TimeTracking.Timer.html#read_checkbox/1"},{"type":"function","title":"Klepsidra.TimeTracking.Timer.validate_timestamps_and_chronology/4","doc":"Validate that the `end_timestamp` is chronologically after the `start_timestamp`.","ref":"Klepsidra.TimeTracking.Timer.html#validate_timestamps_and_chronology/4"},{"type":"function","title":"Options - Klepsidra.TimeTracking.Timer.validate_timestamps_and_chronology/4","doc":"* `:message` - the message on failure, defaults to \"Timestamps are not in valid order\"","ref":"Klepsidra.TimeTracking.Timer.html#validate_timestamps_and_chronology/4-options"},{"type":"type","title":"Klepsidra.TimeTracking.Timer.t/0","doc":"","ref":"Klepsidra.TimeTracking.Timer.html#t:t/0"},{"type":"module","title":"KlepsidraWeb","doc":"The entrypoint for defining your web interface, such\nas controllers, components, channels, and so on.\n\nThis can be used in your application as:\n\n    use KlepsidraWeb, :controller\n    use KlepsidraWeb, :html\n\nThe definitions below will be executed for every controller,\ncomponent, etc, so keep them short and clean, focused\non imports, uses and aliases.\n\nDo NOT define functions inside the quoted expressions\nbelow. Instead, define additional modules and import\nthose modules here.","ref":"KlepsidraWeb.html"},{"type":"macro","title":"KlepsidraWeb.__using__/1","doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"KlepsidraWeb.html#__using__/1"},{"type":"function","title":"KlepsidraWeb.channel/0","doc":"","ref":"KlepsidraWeb.html#channel/0"},{"type":"function","title":"KlepsidraWeb.controller/0","doc":"","ref":"KlepsidraWeb.html#controller/0"},{"type":"function","title":"KlepsidraWeb.html/0","doc":"","ref":"KlepsidraWeb.html#html/0"},{"type":"function","title":"KlepsidraWeb.live_component/0","doc":"","ref":"KlepsidraWeb.html#live_component/0"},{"type":"function","title":"KlepsidraWeb.live_view/0","doc":"","ref":"KlepsidraWeb.html#live_view/0"},{"type":"function","title":"KlepsidraWeb.router/0","doc":"","ref":"KlepsidraWeb.html#router/0"},{"type":"function","title":"KlepsidraWeb.static_paths/0","doc":"","ref":"KlepsidraWeb.html#static_paths/0"},{"type":"function","title":"KlepsidraWeb.verified_routes/0","doc":"","ref":"KlepsidraWeb.html#verified_routes/0"},{"type":"module","title":"KlepsidraWeb.CoreComponents","doc":"Provides core UI components.\n\nAt the first glance, this module may seem daunting, but its goal is\nto provide some core building blocks in your application, such modals,\ntables, and forms. The components are mostly markup and well documented\nwith doc strings and declarative assigns. You may customize and style\nthem in any way you want, based on your application growth and needs.\n\nThe default components use Tailwind CSS, a utility-first CSS framework.\nSee the [Tailwind CSS documentation](https://tailwindcss.com) to learn\nhow to customize them or feel free to swap in another framework altogether.\n\nIcons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.","ref":"KlepsidraWeb.CoreComponents.html"},{"type":"function","title":"KlepsidraWeb.CoreComponents.back/1","doc":"Renders a back navigation link.","ref":"KlepsidraWeb.CoreComponents.html#back/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.back/1","doc":"<.back navigate={~p\"/posts\"}>Back to posts</.back>","ref":"KlepsidraWeb.CoreComponents.html#back/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.back/1","doc":"* `navigate` (`:any`) (required)","ref":"KlepsidraWeb.CoreComponents.html#back/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.back/1","doc":"* `inner_block` (required)","ref":"KlepsidraWeb.CoreComponents.html#back/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.button/1","doc":"Renders a button.","ref":"KlepsidraWeb.CoreComponents.html#button/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.button/1","doc":"<.button>Send!</.button>\n    <.button phx-click=\"go\" class=\"ml-2\">Send!</.button>","ref":"KlepsidraWeb.CoreComponents.html#button/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.button/1","doc":"* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\", \"form\", \"name\", \"value\"]`.","ref":"KlepsidraWeb.CoreComponents.html#button/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.button/1","doc":"* `inner_block` (required)","ref":"KlepsidraWeb.CoreComponents.html#button/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.error/1","doc":"Generates a generic error message.","ref":"KlepsidraWeb.CoreComponents.html#error/1"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.error/1","doc":"* `inner_block` (required)","ref":"KlepsidraWeb.CoreComponents.html#error/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.flash/1","doc":"Renders flash notices.","ref":"KlepsidraWeb.CoreComponents.html#flash/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.flash/1","doc":"<.flash kind={:info} flash={@flash} />\n    <.flash kind={:info} phx-mounted={show(\"#flash\")}>Welcome Back!</.flash>","ref":"KlepsidraWeb.CoreComponents.html#flash/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.flash/1","doc":"* `id` (`:string`) - the optional id of flash container. Defaults to `\"flash\"`.\n* `flash` (`:map`) - the map of flash messages to display. Defaults to `%{}`.\n* `title` (`:string`) - Defaults to `nil`.\n* `kind` (`:atom`) - used for styling and flash lookup.Must be one of `:info`, or `:error`.\n* Global attributes are accepted. the arbitrary HTML attributes to add to the flash container.","ref":"KlepsidraWeb.CoreComponents.html#flash/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.flash/1","doc":"* `inner_block` - the optional inner block that renders the flash message.","ref":"KlepsidraWeb.CoreComponents.html#flash/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.flash_group/1","doc":"Shows the flash group with standard titles and content.","ref":"KlepsidraWeb.CoreComponents.html#flash_group/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.flash_group/1","doc":"<.flash_group flash={@flash} />","ref":"KlepsidraWeb.CoreComponents.html#flash_group/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.flash_group/1","doc":"* `flash` (`:map`) (required) - the map of flash messages.","ref":"KlepsidraWeb.CoreComponents.html#flash_group/1-attributes"},{"type":"function","title":"KlepsidraWeb.CoreComponents.header/1","doc":"Renders a header with title.","ref":"KlepsidraWeb.CoreComponents.html#header/1"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.header/1","doc":"* `class` (`:string`) - Defaults to `nil`.","ref":"KlepsidraWeb.CoreComponents.html#header/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.header/1","doc":"* `inner_block` (required)\n* `subtitle`\n* `actions`","ref":"KlepsidraWeb.CoreComponents.html#header/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.hide/2","doc":"","ref":"KlepsidraWeb.CoreComponents.html#hide/2"},{"type":"function","title":"KlepsidraWeb.CoreComponents.hide_modal/2","doc":"","ref":"KlepsidraWeb.CoreComponents.html#hide_modal/2"},{"type":"function","title":"KlepsidraWeb.CoreComponents.icon/1","doc":"Renders a [Hero Icon](https://heroicons.com).\n\nHero icons come in three styles – outline, solid, and mini.\nBy default, the outline style is used, but solid an mini may\nbe applied by using the `-solid` and `-mini` suffix.\n\nYou can customize the size and colors of the icons by setting\nwidth, height, and background color classes.\n\nIcons are extracted from your `assets/vendor/heroicons` directory and bundled\nwithin your compiled app.css by the plugin in your `assets/tailwind.config.js`.","ref":"KlepsidraWeb.CoreComponents.html#icon/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.icon/1","doc":"<.icon name=\"hero-x-mark-solid\" />\n    <.icon name=\"hero-arrow-path\" class=\"ml-1 w-3 h-3 animate-spin\" />","ref":"KlepsidraWeb.CoreComponents.html#icon/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.icon/1","doc":"* `name` (`:string`) (required)\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted.","ref":"KlepsidraWeb.CoreComponents.html#icon/1-attributes"},{"type":"function","title":"KlepsidraWeb.CoreComponents.input/1","doc":"Renders an input with label and error messages.\n\nA `%Phoenix.HTML.Form{}` and field name may be passed to the input\nto build input names and error messages, or all the attributes and\nerrors may be passed explicitly.","ref":"KlepsidraWeb.CoreComponents.html#input/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.input/1","doc":"<.input field={@form[:email]} type=\"email\" />\n    <.input name=\"my-input\" errors={[\"oh no!\"]} />","ref":"KlepsidraWeb.CoreComponents.html#input/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.input/1","doc":"* `id` (`:any`) - Defaults to `nil`.\n* `name` (`:any`)\n* `label` (`:string`) - Defaults to `nil`.\n* `value` (`:any`)\n* `type` (`:string`) - Defaults to `\"text\"`.\n* `field` (`Phoenix.HTML.FormField`) - a form field struct retrieved from the form, for example: @form[:email].\n* `errors` (`:list`) - Defaults to `[]`.\n* `checked` (`:boolean`) - the checked flag for checkbox inputs.\n* `prompt` (`:string`) - the prompt for select inputs. Defaults to `nil`.\n* `options` (`:list`) - the options to pass to Phoenix.HTML.Form.options_for_select/2.\n* `multiple` (`:boolean`) - the multiple flag for select inputs. Defaults to `false`.\n* Global attributes are accepted. Supports all globals plus: `[\"autocomplete\", \"cols\", \"disabled\", \"form\", \"list\", \"max\", \"maxlength\", \"min\", \"minlength\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"size\", \"step\"]`.","ref":"KlepsidraWeb.CoreComponents.html#input/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.input/1","doc":"* `inner_block`","ref":"KlepsidraWeb.CoreComponents.html#input/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.label/1","doc":"Renders a label.","ref":"KlepsidraWeb.CoreComponents.html#label/1"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.label/1","doc":"* `for` (`:string`) - Defaults to `nil`.","ref":"KlepsidraWeb.CoreComponents.html#label/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.label/1","doc":"* `inner_block` (required)","ref":"KlepsidraWeb.CoreComponents.html#label/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.list/1","doc":"Renders a data list.","ref":"KlepsidraWeb.CoreComponents.html#list/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.list/1","doc":"<.list>\n      <:item title=\"Title\"><%= @post.title %></:item>\n      <:item title=\"Views\"><%= @post.views %></:item>\n    </.list>","ref":"KlepsidraWeb.CoreComponents.html#list/1-examples"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.list/1","doc":"* `item` (required) - Accepts attributes:\n\n  * `title` (`:string`) (required)","ref":"KlepsidraWeb.CoreComponents.html#list/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.modal/1","doc":"Renders a modal.","ref":"KlepsidraWeb.CoreComponents.html#modal/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.modal/1","doc":"<.modal id=\"confirm-modal\">\n      This is a modal.\n    </.modal>\n\nJS commands may be passed to the `:on_cancel` to configure\nthe closing/cancel event, for example:\n\n    <.modal id=\"confirm\" on_cancel={JS.navigate(~p\"/posts\")}>\n      This is another modal.\n    </.modal>","ref":"KlepsidraWeb.CoreComponents.html#modal/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.modal/1","doc":"* `id` (`:string`) (required)\n* `show` (`:boolean`) - Defaults to `false`.\n* `on_cancel` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.","ref":"KlepsidraWeb.CoreComponents.html#modal/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.modal/1","doc":"* `inner_block` (required)","ref":"KlepsidraWeb.CoreComponents.html#modal/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.show/2","doc":"","ref":"KlepsidraWeb.CoreComponents.html#show/2"},{"type":"function","title":"KlepsidraWeb.CoreComponents.show_modal/2","doc":"","ref":"KlepsidraWeb.CoreComponents.html#show_modal/2"},{"type":"function","title":"KlepsidraWeb.CoreComponents.simple_form/1","doc":"Renders a simple form.","ref":"KlepsidraWeb.CoreComponents.html#simple_form/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.simple_form/1","doc":"<.simple_form for={@form} phx-change=\"validate\" phx-submit=\"save\">\n      <.input field={@form[:email]} label=\"Email\"/>\n      <.input field={@form[:username]} label=\"Username\" />\n      <:actions>\n        <.button>Save</.button>\n      </:actions>\n    </.simple_form>","ref":"KlepsidraWeb.CoreComponents.html#simple_form/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.simple_form/1","doc":"* `for` (`:any`) (required) - the datastructure for the form.\n* `as` (`:any`) - the server side parameter to collect all input under. Defaults to `nil`.\n* Global attributes are accepted. the arbitrary HTML attributes to apply to the form tag. Supports all globals plus: `[\"autocomplete\", \"name\", \"rel\", \"action\", \"enctype\", \"method\", \"novalidate\", \"target\"]`.","ref":"KlepsidraWeb.CoreComponents.html#simple_form/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.simple_form/1","doc":"* `inner_block` (required)\n* `actions` - the slot for form actions, such as a submit button.","ref":"KlepsidraWeb.CoreComponents.html#simple_form/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.table/1","doc":"Renders a table with generic styling.","ref":"KlepsidraWeb.CoreComponents.html#table/1"},{"type":"function","title":"Examples - KlepsidraWeb.CoreComponents.table/1","doc":"<.table id=\"users\" rows={@users}>\n      <:col :let={user} label=\"id\"><%= user.id %></:col>\n      <:col :let={user} label=\"username\"><%= user.username %></:col>\n    </.table>","ref":"KlepsidraWeb.CoreComponents.html#table/1-examples"},{"type":"function","title":"Attributes - KlepsidraWeb.CoreComponents.table/1","doc":"* `id` (`:string`) (required)\n* `rows` (`:list`) (required)\n* `row_id` (`:any`) - the function for generating the row id. Defaults to `nil`.\n* `row_click` (`:any`) - the function for handling phx-click on each row. Defaults to `nil`.\n* `row_item` (`:any`) - the function for mapping each row before calling the :col and :action slots. Defaults to `&Function.identity/1`.","ref":"KlepsidraWeb.CoreComponents.html#table/1-attributes"},{"type":"function","title":"Slots - KlepsidraWeb.CoreComponents.table/1","doc":"* `col` (required) - Accepts attributes:\n\n  * `label` (`:string`)\n* `action` - the slot for showing user actions in the last table column.","ref":"KlepsidraWeb.CoreComponents.html#table/1-slots"},{"type":"function","title":"KlepsidraWeb.CoreComponents.translate_error/1","doc":"Translates an error message using gettext.","ref":"KlepsidraWeb.CoreComponents.html#translate_error/1"},{"type":"function","title":"KlepsidraWeb.CoreComponents.translate_errors/2","doc":"Translates the errors for a field from a keyword list of errors.","ref":"KlepsidraWeb.CoreComponents.html#translate_errors/2"},{"type":"module","title":"KlepsidraWeb.Gettext","doc":"A module providing Internationalization with a gettext-based API.\n\nBy using [Gettext](https://hexdocs.pm/gettext),\nyour module gains a set of macros for translations, for example:\n\n    import KlepsidraWeb.Gettext\n\n    # Simple translation\n    gettext(\"Here is the string to translate\")\n\n    # Plural translation\n    ngettext(\"Here is the string to translate\",\n             \"Here are the strings to translate\",\n             3)\n\n    # Domain-based translation\n    dgettext(\"errors\", \"Here is the error message to translate\")\n\nSee the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.","ref":"KlepsidraWeb.Gettext.html"},{"type":"macro","title":"KlepsidraWeb.Gettext.dgettext/3","doc":"","ref":"KlepsidraWeb.Gettext.html#dgettext/3"},{"type":"macro","title":"KlepsidraWeb.Gettext.dgettext_noop/2","doc":"","ref":"KlepsidraWeb.Gettext.html#dgettext_noop/2"},{"type":"macro","title":"KlepsidraWeb.Gettext.dngettext/5","doc":"","ref":"KlepsidraWeb.Gettext.html#dngettext/5"},{"type":"macro","title":"KlepsidraWeb.Gettext.dngettext_noop/3","doc":"","ref":"KlepsidraWeb.Gettext.html#dngettext_noop/3"},{"type":"macro","title":"KlepsidraWeb.Gettext.dpgettext/4","doc":"","ref":"KlepsidraWeb.Gettext.html#dpgettext/4"},{"type":"macro","title":"KlepsidraWeb.Gettext.dpgettext_noop/3","doc":"","ref":"KlepsidraWeb.Gettext.html#dpgettext_noop/3"},{"type":"macro","title":"KlepsidraWeb.Gettext.dpngettext/6","doc":"","ref":"KlepsidraWeb.Gettext.html#dpngettext/6"},{"type":"macro","title":"KlepsidraWeb.Gettext.dpngettext_noop/4","doc":"","ref":"KlepsidraWeb.Gettext.html#dpngettext_noop/4"},{"type":"macro","title":"KlepsidraWeb.Gettext.gettext/2","doc":"","ref":"KlepsidraWeb.Gettext.html#gettext/2"},{"type":"macro","title":"KlepsidraWeb.Gettext.gettext_comment/1","doc":"","ref":"KlepsidraWeb.Gettext.html#gettext_comment/1"},{"type":"macro","title":"KlepsidraWeb.Gettext.gettext_noop/1","doc":"","ref":"KlepsidraWeb.Gettext.html#gettext_noop/1"},{"type":"function","title":"KlepsidraWeb.Gettext.handle_missing_bindings/2","doc":"","ref":"KlepsidraWeb.Gettext.html#handle_missing_bindings/2"},{"type":"function","title":"KlepsidraWeb.Gettext.handle_missing_plural_translation/7","doc":"","ref":"KlepsidraWeb.Gettext.html#handle_missing_plural_translation/7"},{"type":"function","title":"KlepsidraWeb.Gettext.handle_missing_translation/5","doc":"","ref":"KlepsidraWeb.Gettext.html#handle_missing_translation/5"},{"type":"function","title":"KlepsidraWeb.Gettext.lgettext/5","doc":"","ref":"KlepsidraWeb.Gettext.html#lgettext/5"},{"type":"function","title":"KlepsidraWeb.Gettext.lngettext/7","doc":"","ref":"KlepsidraWeb.Gettext.html#lngettext/7"},{"type":"macro","title":"KlepsidraWeb.Gettext.ngettext/4","doc":"","ref":"KlepsidraWeb.Gettext.html#ngettext/4"},{"type":"macro","title":"KlepsidraWeb.Gettext.ngettext_noop/2","doc":"","ref":"KlepsidraWeb.Gettext.html#ngettext_noop/2"},{"type":"macro","title":"KlepsidraWeb.Gettext.pgettext/3","doc":"","ref":"KlepsidraWeb.Gettext.html#pgettext/3"},{"type":"macro","title":"KlepsidraWeb.Gettext.pgettext_noop/2","doc":"","ref":"KlepsidraWeb.Gettext.html#pgettext_noop/2"},{"type":"macro","title":"KlepsidraWeb.Gettext.pngettext/5","doc":"","ref":"KlepsidraWeb.Gettext.html#pngettext/5"},{"type":"macro","title":"KlepsidraWeb.Gettext.pngettext_noop/3","doc":"","ref":"KlepsidraWeb.Gettext.html#pngettext_noop/3"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,49,46,50]}}